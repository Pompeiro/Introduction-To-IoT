
tur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000856c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080086fc  080086fc  000186fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800878c  0800878c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800878c  0800878c  0001878c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008794  08008794  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008794  08008794  00018794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008798  08008798  00018798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800879c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c9c  200001e4  08008980  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e80  08008980  00021e80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019741  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036d2  00000000  00000000  00039955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  0003d028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f60  00000000  00000000  0003e100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023f05  00000000  00000000  0003f060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014951  00000000  00000000  00062f65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc63a  00000000  00000000  000778b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00143ef0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a50  00000000  00000000  00143f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080086e4 	.word	0x080086e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	080086e4 	.word	0x080086e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000900:	f000 b96e 	b.w	8000be0 <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9d08      	ldr	r5, [sp, #32]
 8000922:	4604      	mov	r4, r0
 8000924:	468c      	mov	ip, r1
 8000926:	2b00      	cmp	r3, #0
 8000928:	f040 8083 	bne.w	8000a32 <__udivmoddi4+0x116>
 800092c:	428a      	cmp	r2, r1
 800092e:	4617      	mov	r7, r2
 8000930:	d947      	bls.n	80009c2 <__udivmoddi4+0xa6>
 8000932:	fab2 f282 	clz	r2, r2
 8000936:	b142      	cbz	r2, 800094a <__udivmoddi4+0x2e>
 8000938:	f1c2 0020 	rsb	r0, r2, #32
 800093c:	fa24 f000 	lsr.w	r0, r4, r0
 8000940:	4091      	lsls	r1, r2
 8000942:	4097      	lsls	r7, r2
 8000944:	ea40 0c01 	orr.w	ip, r0, r1
 8000948:	4094      	lsls	r4, r2
 800094a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800094e:	0c23      	lsrs	r3, r4, #16
 8000950:	fbbc f6f8 	udiv	r6, ip, r8
 8000954:	fa1f fe87 	uxth.w	lr, r7
 8000958:	fb08 c116 	mls	r1, r8, r6, ip
 800095c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000960:	fb06 f10e 	mul.w	r1, r6, lr
 8000964:	4299      	cmp	r1, r3
 8000966:	d909      	bls.n	800097c <__udivmoddi4+0x60>
 8000968:	18fb      	adds	r3, r7, r3
 800096a:	f106 30ff 	add.w	r0, r6, #4294967295
 800096e:	f080 8119 	bcs.w	8000ba4 <__udivmoddi4+0x288>
 8000972:	4299      	cmp	r1, r3
 8000974:	f240 8116 	bls.w	8000ba4 <__udivmoddi4+0x288>
 8000978:	3e02      	subs	r6, #2
 800097a:	443b      	add	r3, r7
 800097c:	1a5b      	subs	r3, r3, r1
 800097e:	b2a4      	uxth	r4, r4
 8000980:	fbb3 f0f8 	udiv	r0, r3, r8
 8000984:	fb08 3310 	mls	r3, r8, r0, r3
 8000988:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800098c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000990:	45a6      	cmp	lr, r4
 8000992:	d909      	bls.n	80009a8 <__udivmoddi4+0x8c>
 8000994:	193c      	adds	r4, r7, r4
 8000996:	f100 33ff 	add.w	r3, r0, #4294967295
 800099a:	f080 8105 	bcs.w	8000ba8 <__udivmoddi4+0x28c>
 800099e:	45a6      	cmp	lr, r4
 80009a0:	f240 8102 	bls.w	8000ba8 <__udivmoddi4+0x28c>
 80009a4:	3802      	subs	r0, #2
 80009a6:	443c      	add	r4, r7
 80009a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009ac:	eba4 040e 	sub.w	r4, r4, lr
 80009b0:	2600      	movs	r6, #0
 80009b2:	b11d      	cbz	r5, 80009bc <__udivmoddi4+0xa0>
 80009b4:	40d4      	lsrs	r4, r2
 80009b6:	2300      	movs	r3, #0
 80009b8:	e9c5 4300 	strd	r4, r3, [r5]
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	b902      	cbnz	r2, 80009c6 <__udivmoddi4+0xaa>
 80009c4:	deff      	udf	#255	; 0xff
 80009c6:	fab2 f282 	clz	r2, r2
 80009ca:	2a00      	cmp	r2, #0
 80009cc:	d150      	bne.n	8000a70 <__udivmoddi4+0x154>
 80009ce:	1bcb      	subs	r3, r1, r7
 80009d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009d4:	fa1f f887 	uxth.w	r8, r7
 80009d8:	2601      	movs	r6, #1
 80009da:	fbb3 fcfe 	udiv	ip, r3, lr
 80009de:	0c21      	lsrs	r1, r4, #16
 80009e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009e8:	fb08 f30c 	mul.w	r3, r8, ip
 80009ec:	428b      	cmp	r3, r1
 80009ee:	d907      	bls.n	8000a00 <__udivmoddi4+0xe4>
 80009f0:	1879      	adds	r1, r7, r1
 80009f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009f6:	d202      	bcs.n	80009fe <__udivmoddi4+0xe2>
 80009f8:	428b      	cmp	r3, r1
 80009fa:	f200 80e9 	bhi.w	8000bd0 <__udivmoddi4+0x2b4>
 80009fe:	4684      	mov	ip, r0
 8000a00:	1ac9      	subs	r1, r1, r3
 8000a02:	b2a3      	uxth	r3, r4
 8000a04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000a10:	fb08 f800 	mul.w	r8, r8, r0
 8000a14:	45a0      	cmp	r8, r4
 8000a16:	d907      	bls.n	8000a28 <__udivmoddi4+0x10c>
 8000a18:	193c      	adds	r4, r7, r4
 8000a1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a1e:	d202      	bcs.n	8000a26 <__udivmoddi4+0x10a>
 8000a20:	45a0      	cmp	r8, r4
 8000a22:	f200 80d9 	bhi.w	8000bd8 <__udivmoddi4+0x2bc>
 8000a26:	4618      	mov	r0, r3
 8000a28:	eba4 0408 	sub.w	r4, r4, r8
 8000a2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a30:	e7bf      	b.n	80009b2 <__udivmoddi4+0x96>
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d909      	bls.n	8000a4a <__udivmoddi4+0x12e>
 8000a36:	2d00      	cmp	r5, #0
 8000a38:	f000 80b1 	beq.w	8000b9e <__udivmoddi4+0x282>
 8000a3c:	2600      	movs	r6, #0
 8000a3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a42:	4630      	mov	r0, r6
 8000a44:	4631      	mov	r1, r6
 8000a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4a:	fab3 f683 	clz	r6, r3
 8000a4e:	2e00      	cmp	r6, #0
 8000a50:	d14a      	bne.n	8000ae8 <__udivmoddi4+0x1cc>
 8000a52:	428b      	cmp	r3, r1
 8000a54:	d302      	bcc.n	8000a5c <__udivmoddi4+0x140>
 8000a56:	4282      	cmp	r2, r0
 8000a58:	f200 80b8 	bhi.w	8000bcc <__udivmoddi4+0x2b0>
 8000a5c:	1a84      	subs	r4, r0, r2
 8000a5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a62:	2001      	movs	r0, #1
 8000a64:	468c      	mov	ip, r1
 8000a66:	2d00      	cmp	r5, #0
 8000a68:	d0a8      	beq.n	80009bc <__udivmoddi4+0xa0>
 8000a6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a6e:	e7a5      	b.n	80009bc <__udivmoddi4+0xa0>
 8000a70:	f1c2 0320 	rsb	r3, r2, #32
 8000a74:	fa20 f603 	lsr.w	r6, r0, r3
 8000a78:	4097      	lsls	r7, r2
 8000a7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a82:	40d9      	lsrs	r1, r3
 8000a84:	4330      	orrs	r0, r6
 8000a86:	0c03      	lsrs	r3, r0, #16
 8000a88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a8c:	fa1f f887 	uxth.w	r8, r7
 8000a90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a98:	fb06 f108 	mul.w	r1, r6, r8
 8000a9c:	4299      	cmp	r1, r3
 8000a9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000aa2:	d909      	bls.n	8000ab8 <__udivmoddi4+0x19c>
 8000aa4:	18fb      	adds	r3, r7, r3
 8000aa6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000aaa:	f080 808d 	bcs.w	8000bc8 <__udivmoddi4+0x2ac>
 8000aae:	4299      	cmp	r1, r3
 8000ab0:	f240 808a 	bls.w	8000bc8 <__udivmoddi4+0x2ac>
 8000ab4:	3e02      	subs	r6, #2
 8000ab6:	443b      	add	r3, r7
 8000ab8:	1a5b      	subs	r3, r3, r1
 8000aba:	b281      	uxth	r1, r0
 8000abc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ac0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ac4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ac8:	fb00 f308 	mul.w	r3, r0, r8
 8000acc:	428b      	cmp	r3, r1
 8000ace:	d907      	bls.n	8000ae0 <__udivmoddi4+0x1c4>
 8000ad0:	1879      	adds	r1, r7, r1
 8000ad2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ad6:	d273      	bcs.n	8000bc0 <__udivmoddi4+0x2a4>
 8000ad8:	428b      	cmp	r3, r1
 8000ada:	d971      	bls.n	8000bc0 <__udivmoddi4+0x2a4>
 8000adc:	3802      	subs	r0, #2
 8000ade:	4439      	add	r1, r7
 8000ae0:	1acb      	subs	r3, r1, r3
 8000ae2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ae6:	e778      	b.n	80009da <__udivmoddi4+0xbe>
 8000ae8:	f1c6 0c20 	rsb	ip, r6, #32
 8000aec:	fa03 f406 	lsl.w	r4, r3, r6
 8000af0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000af4:	431c      	orrs	r4, r3
 8000af6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000afa:	fa01 f306 	lsl.w	r3, r1, r6
 8000afe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000b02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000b06:	431f      	orrs	r7, r3
 8000b08:	0c3b      	lsrs	r3, r7, #16
 8000b0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b0e:	fa1f f884 	uxth.w	r8, r4
 8000b12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000b1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000b1e:	458a      	cmp	sl, r1
 8000b20:	fa02 f206 	lsl.w	r2, r2, r6
 8000b24:	fa00 f306 	lsl.w	r3, r0, r6
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x220>
 8000b2a:	1861      	adds	r1, r4, r1
 8000b2c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b30:	d248      	bcs.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b32:	458a      	cmp	sl, r1
 8000b34:	d946      	bls.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b36:	f1a9 0902 	sub.w	r9, r9, #2
 8000b3a:	4421      	add	r1, r4
 8000b3c:	eba1 010a 	sub.w	r1, r1, sl
 8000b40:	b2bf      	uxth	r7, r7
 8000b42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b4e:	fb00 f808 	mul.w	r8, r0, r8
 8000b52:	45b8      	cmp	r8, r7
 8000b54:	d907      	bls.n	8000b66 <__udivmoddi4+0x24a>
 8000b56:	19e7      	adds	r7, r4, r7
 8000b58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b5c:	d22e      	bcs.n	8000bbc <__udivmoddi4+0x2a0>
 8000b5e:	45b8      	cmp	r8, r7
 8000b60:	d92c      	bls.n	8000bbc <__udivmoddi4+0x2a0>
 8000b62:	3802      	subs	r0, #2
 8000b64:	4427      	add	r7, r4
 8000b66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b6a:	eba7 0708 	sub.w	r7, r7, r8
 8000b6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b72:	454f      	cmp	r7, r9
 8000b74:	46c6      	mov	lr, r8
 8000b76:	4649      	mov	r1, r9
 8000b78:	d31a      	bcc.n	8000bb0 <__udivmoddi4+0x294>
 8000b7a:	d017      	beq.n	8000bac <__udivmoddi4+0x290>
 8000b7c:	b15d      	cbz	r5, 8000b96 <__udivmoddi4+0x27a>
 8000b7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b82:	eb67 0701 	sbc.w	r7, r7, r1
 8000b86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b8a:	40f2      	lsrs	r2, r6
 8000b8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b90:	40f7      	lsrs	r7, r6
 8000b92:	e9c5 2700 	strd	r2, r7, [r5]
 8000b96:	2600      	movs	r6, #0
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	462e      	mov	r6, r5
 8000ba0:	4628      	mov	r0, r5
 8000ba2:	e70b      	b.n	80009bc <__udivmoddi4+0xa0>
 8000ba4:	4606      	mov	r6, r0
 8000ba6:	e6e9      	b.n	800097c <__udivmoddi4+0x60>
 8000ba8:	4618      	mov	r0, r3
 8000baa:	e6fd      	b.n	80009a8 <__udivmoddi4+0x8c>
 8000bac:	4543      	cmp	r3, r8
 8000bae:	d2e5      	bcs.n	8000b7c <__udivmoddi4+0x260>
 8000bb0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000bb4:	eb69 0104 	sbc.w	r1, r9, r4
 8000bb8:	3801      	subs	r0, #1
 8000bba:	e7df      	b.n	8000b7c <__udivmoddi4+0x260>
 8000bbc:	4608      	mov	r0, r1
 8000bbe:	e7d2      	b.n	8000b66 <__udivmoddi4+0x24a>
 8000bc0:	4660      	mov	r0, ip
 8000bc2:	e78d      	b.n	8000ae0 <__udivmoddi4+0x1c4>
 8000bc4:	4681      	mov	r9, r0
 8000bc6:	e7b9      	b.n	8000b3c <__udivmoddi4+0x220>
 8000bc8:	4666      	mov	r6, ip
 8000bca:	e775      	b.n	8000ab8 <__udivmoddi4+0x19c>
 8000bcc:	4630      	mov	r0, r6
 8000bce:	e74a      	b.n	8000a66 <__udivmoddi4+0x14a>
 8000bd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bd4:	4439      	add	r1, r7
 8000bd6:	e713      	b.n	8000a00 <__udivmoddi4+0xe4>
 8000bd8:	3802      	subs	r0, #2
 8000bda:	443c      	add	r4, r7
 8000bdc:	e724      	b.n	8000a28 <__udivmoddi4+0x10c>
 8000bde:	bf00      	nop

08000be0 <__aeabi_idiv0>:
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <user_define>:
GPIO_TypeDef *GPIO_Trigger;
GPIO_TypeDef *GPIO_Echo;
uint16_t GPIO_PIN_Trigger, GPIO_PIN_Echo;

void user_define(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	////////////////////////////USER DEFINITIONS BEGIN//////////////////////////////////////////////
	htim_echo        = htim1;         //*!Change "htim1" like htim2, htim3, ... according to which TIMx you use for Echo Pin.
 8000be8:	4a13      	ldr	r2, [pc, #76]	; (8000c38 <user_define+0x54>)
 8000bea:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <user_define+0x58>)
 8000bec:	4610      	mov	r0, r2
 8000bee:	4619      	mov	r1, r3
 8000bf0:	2348      	movs	r3, #72	; 0x48
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	f007 f92c 	bl	8007e50 <memcpy>
  TIM_Echo         = TIM1;          //*!Change "TIM1" like TIM2, TIM3, ... according to which TIMx you use for Echo Pin.
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <user_define+0x5c>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <user_define+0x60>)
 8000bfc:	601a      	str	r2, [r3, #0]
	htim_delay       = htim2;	        //*!Change "htim2" like htim3, htim5, ... according to which TIMx you use for the delay.
 8000bfe:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <user_define+0x64>)
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <user_define+0x68>)
 8000c02:	4610      	mov	r0, r2
 8000c04:	4619      	mov	r1, r3
 8000c06:	2348      	movs	r3, #72	; 0x48
 8000c08:	461a      	mov	r2, r3
 8000c0a:	f007 f921 	bl	8007e50 <memcpy>
	TIM_Delay        = TIM2;          //*!Change "TIM2" like TIM3, TIM5, ... according to which TIMx you use for the delay.
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <user_define+0x6c>)
 8000c10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c14:	601a      	str	r2, [r3, #0]
	
	GPIO_Trigger     = GPIOD;         //*!Change "GPIOD" like GPIOA, GPIOB, ... according to which GPIOx you use for Trigger Pin.
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <user_define+0x70>)
 8000c18:	4a0f      	ldr	r2, [pc, #60]	; (8000c58 <user_define+0x74>)
 8000c1a:	601a      	str	r2, [r3, #0]
	GPIO_PIN_Trigger = GPIO_PIN_13;   //*!Change "GPIO_PIN_13" like GPIO_PIN_1, GPIO_PIN_2, ... according to which GPIO_PIN_x you use for Trigger Pin.
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <user_define+0x78>)
 8000c1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c22:	801a      	strh	r2, [r3, #0]
	GPIO_Echo        = GPIOD;         //*!Change "GPIOD" like GPIOC, GPIOE, ... according to which GPIOx you use to follow echo signal status.
 8000c24:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <user_define+0x7c>)
 8000c26:	4a0c      	ldr	r2, [pc, #48]	; (8000c58 <user_define+0x74>)
 8000c28:	601a      	str	r2, [r3, #0]
	GPIO_PIN_Echo    = GPIO_PIN_15;   //*!Change "GPIO_PIN_15" like GPIO_PIN_3, GPIO_PIN_5, ... according to which GPIO_PIN_x you use to follow echo signal status.
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <user_define+0x80>)
 8000c2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c30:	801a      	strh	r2, [r3, #0]
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	2000044c 	.word	0x2000044c
 8000c3c:	20000504 	.word	0x20000504
 8000c40:	200004e8 	.word	0x200004e8
 8000c44:	40010000 	.word	0x40010000
 8000c48:	20000494 	.word	0x20000494
 8000c4c:	2000054c 	.word	0x2000054c
 8000c50:	200004e4 	.word	0x200004e4
 8000c54:	200004e0 	.word	0x200004e0
 8000c58:	40020c00 	.word	0x40020c00
 8000c5c:	20000448 	.word	0x20000448
 8000c60:	200004dc 	.word	0x200004dc
 8000c64:	2000044a 	.word	0x2000044a

08000c68 <HCSR04_Init>:
/**
*@brief: The sensor initiliazing settings.
*@retval: None
*/
void HCSR04_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	user_define();
 8000c6c:	f7ff ffba 	bl	8000be4 <user_define>
	
	HAL_GPIO_WritePin(GPIO_Trigger, GPIO_PIN_Trigger, GPIO_PIN_RESET);
 8000c70:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <HCSR04_Init+0x38>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <HCSR04_Init+0x3c>)
 8000c76:	8811      	ldrh	r1, [r2, #0]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f001 f8b8 	bl	8001df0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO_Echo, GPIO_PIN_Echo, GPIO_PIN_RESET);
 8000c80:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <HCSR04_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a09      	ldr	r2, [pc, #36]	; (8000cac <HCSR04_Init+0x44>)
 8000c86:	8811      	ldrh	r1, [r2, #0]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f001 f8b0 	bl	8001df0 <HAL_GPIO_WritePin>
	 
  HAL_TIM_Base_Start_IT(&htim_echo);
 8000c90:	4807      	ldr	r0, [pc, #28]	; (8000cb0 <HCSR04_Init+0x48>)
 8000c92:	f002 fee5 	bl	8003a60 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim_delay);
 8000c96:	4807      	ldr	r0, [pc, #28]	; (8000cb4 <HCSR04_Init+0x4c>)
 8000c98:	f002 fee2 	bl	8003a60 <HAL_TIM_Base_Start_IT>
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	200004e0 	.word	0x200004e0
 8000ca4:	20000448 	.word	0x20000448
 8000ca8:	200004dc 	.word	0x200004dc
 8000cac:	2000044a 	.word	0x2000044a
 8000cb0:	2000044c 	.word	0x2000044c
 8000cb4:	20000494 	.word	0x20000494

08000cb8 <HCSR04_TIM_PEC>:
*@brief: HC-SR04 HAL_TIM_PeriodElapsedCallback
*@param: htim pointer to a TIM_HandleTypeDef structure that contains the configuration information for TIM module.
*@retval: None
*/
void HCSR04_TIM_PEC(TIM_HandleTypeDef *htim)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	user_define();
 8000cc0:	f7ff ff90 	bl	8000be4 <user_define>
	
	if(htim->Instance == TIM_Delay)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <HCSR04_TIM_PEC+0x54>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d105      	bne.n	8000cdc <HCSR04_TIM_PEC+0x24>
		__HAL_TIM_CLEAR_FLAG(&htim_delay, TIM_FLAG_UPDATE);            //Clear TIM_Delay UPDATE event Flag.
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <HCSR04_TIM_PEC+0x58>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f06f 0201 	mvn.w	r2, #1
 8000cd8:	611a      	str	r2, [r3, #16]
	else if(htim->Instance == TIM_Echo)
		{
			HAL_GPIO_WritePin(GPIO_Echo, GPIO_PIN_Echo, GPIO_PIN_RESET); //Reset Echo led (default:blue)  
	    __HAL_TIM_CLEAR_FLAG(&htim_echo, TIM_FLAG_UPDATE);           //Clear TIM_Echo UPDATE event Flag.
	  }
}
 8000cda:	e012      	b.n	8000d02 <HCSR04_TIM_PEC+0x4a>
	else if(htim->Instance == TIM_Echo)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <HCSR04_TIM_PEC+0x5c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d10c      	bne.n	8000d02 <HCSR04_TIM_PEC+0x4a>
			HAL_GPIO_WritePin(GPIO_Echo, GPIO_PIN_Echo, GPIO_PIN_RESET); //Reset Echo led (default:blue)  
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <HCSR04_TIM_PEC+0x60>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0b      	ldr	r2, [pc, #44]	; (8000d1c <HCSR04_TIM_PEC+0x64>)
 8000cee:	8811      	ldrh	r1, [r2, #0]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f001 f87c 	bl	8001df0 <HAL_GPIO_WritePin>
	    __HAL_TIM_CLEAR_FLAG(&htim_echo, TIM_FLAG_UPDATE);           //Clear TIM_Echo UPDATE event Flag.
 8000cf8:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <HCSR04_TIM_PEC+0x68>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f06f 0201 	mvn.w	r2, #1
 8000d00:	611a      	str	r2, [r3, #16]
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200004e4 	.word	0x200004e4
 8000d10:	20000494 	.word	0x20000494
 8000d14:	200004e8 	.word	0x200004e8
 8000d18:	200004dc 	.word	0x200004dc
 8000d1c:	2000044a 	.word	0x2000044a
 8000d20:	2000044c 	.word	0x2000044c

08000d24 <HCSR04_GetInfo>:
*@param: HCSR04_DATA pointer to hcsr04_data_t structure that contains data for the sensor.
         HCSR04_DATA -> duration: ms, us, distance: mm, cm, m, inch.   
*@retval: None
*/
void HCSR04_GetInfo(hcsr04_data_t *HCSR04_DATA)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	static volatile float duration = 0, distance = 0;
	
	user_define();
 8000d2c:	f7ff ff5a 	bl	8000be4 <user_define>
		//The sensor trigger pulse width= 10us 
	  
		//Blinking blue led shows that the sensor is seeking an object or has not dedected it exactly (it doesn't send the echo signal well).
		//if blue led is on and not blinking, it shows that the sensor has found an object (it sends the echo signal well).
	  //Blue led also indicates that TIM_Echo(default:TIM1) works and counts.		
		HAL_GPIO_WritePin(GPIO_Echo, GPIO_PIN_Echo, GPIO_PIN_SET);        //Set blue led. 
 8000d30:	4b48      	ldr	r3, [pc, #288]	; (8000e54 <HCSR04_GetInfo+0x130>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a48      	ldr	r2, [pc, #288]	; (8000e58 <HCSR04_GetInfo+0x134>)
 8000d36:	8811      	ldrh	r1, [r2, #0]
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f001 f858 	bl	8001df0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Trigger, GPIO_PIN_Trigger, GPIO_PIN_SET);  //Set trigger pin, orange led.
 8000d40:	4b46      	ldr	r3, [pc, #280]	; (8000e5c <HCSR04_GetInfo+0x138>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a46      	ldr	r2, [pc, #280]	; (8000e60 <HCSR04_GetInfo+0x13c>)
 8000d46:	8811      	ldrh	r1, [r2, #0]
 8000d48:	2201      	movs	r2, #1
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f001 f850 	bl	8001df0 <HAL_GPIO_WritePin>
	  //Default: Timer2 Parameter Settings;
	  //10us delay is enough and the sensor sends 8 pulses at 40kHz.
	  //APB1 timer clocks (MHz): 84, Prescaler:83, AutoReload Register(ARR):9
	  //84 MHz / (83+1) = 1 MHz equals 1 us, (ARR+1) x 1us equals 10us delay.
	  /*----10us delay by default:TIM2-----------------------------*/
    __HAL_TIM_SetCounter(&htim_delay, 0);
 8000d50:	4b44      	ldr	r3, [pc, #272]	; (8000e64 <HCSR04_GetInfo+0x140>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2200      	movs	r2, #0
 8000d56:	625a      	str	r2, [r3, #36]	; 0x24
	  while(__HAL_TIM_GET_FLAG(&htim_delay, TIM_FLAG_UPDATE) != SET)
 8000d58:	bf00      	nop
 8000d5a:	4b42      	ldr	r3, [pc, #264]	; (8000e64 <HCSR04_GetInfo+0x140>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	691b      	ldr	r3, [r3, #16]
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d1f8      	bne.n	8000d5a <HCSR04_GetInfo+0x36>
	  {	
			
	  }
    /*-----------------------------------------------------------*/

    HAL_GPIO_WritePin(GPIO_Trigger, GPIO_PIN_Trigger, GPIO_PIN_RESET); //Reset trigger pin, orange led.
 8000d68:	4b3c      	ldr	r3, [pc, #240]	; (8000e5c <HCSR04_GetInfo+0x138>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a3c      	ldr	r2, [pc, #240]	; (8000e60 <HCSR04_GetInfo+0x13c>)
 8000d6e:	8811      	ldrh	r1, [r2, #0]
 8000d70:	2200      	movs	r2, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f001 f83c 	bl	8001df0 <HAL_GPIO_WritePin>
    
	
		while(__HAL_TIM_GET_FLAG(&htim_echo,TIM_FLAG_TRIGGER) != RESET && __HAL_TIM_GET_FLAG(&htim_echo, TIM_FLAG_UPDATE) != SET)
 8000d78:	e012      	b.n	8000da0 <HCSR04_GetInfo+0x7c>
		{	
			
			duration = __HAL_TIM_GetCounter(&htim_echo);        //Get TIM_Echo(default:TIM1) counter value(default:us) as long as there is Echo signal(rising edge).					
 8000d7a:	4b3b      	ldr	r3, [pc, #236]	; (8000e68 <HCSR04_GetInfo+0x144>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d80:	ee07 3a90 	vmov	s15, r3
 8000d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d88:	4b38      	ldr	r3, [pc, #224]	; (8000e6c <HCSR04_GetInfo+0x148>)
 8000d8a:	edc3 7a00 	vstr	s15, [r3]
			__HAL_TIM_SetCounter(&htim_echo, 0);                //Set the counter 0 , reset it.	
 8000d8e:	4b36      	ldr	r3, [pc, #216]	; (8000e68 <HCSR04_GetInfo+0x144>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2200      	movs	r2, #0
 8000d94:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_CLEAR_FLAG(&htim_echo, TIM_FLAG_TRIGGER); //Clear TIM_Echo Trigger Flag.
 8000d96:	4b34      	ldr	r3, [pc, #208]	; (8000e68 <HCSR04_GetInfo+0x144>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000d9e:	611a      	str	r2, [r3, #16]
		while(__HAL_TIM_GET_FLAG(&htim_echo,TIM_FLAG_TRIGGER) != RESET && __HAL_TIM_GET_FLAG(&htim_echo, TIM_FLAG_UPDATE) != SET)
 8000da0:	4b31      	ldr	r3, [pc, #196]	; (8000e68 <HCSR04_GetInfo+0x144>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	691b      	ldr	r3, [r3, #16]
 8000da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000daa:	2b40      	cmp	r3, #64	; 0x40
 8000dac:	d106      	bne.n	8000dbc <HCSR04_GetInfo+0x98>
 8000dae:	4b2e      	ldr	r3, [pc, #184]	; (8000e68 <HCSR04_GetInfo+0x144>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	691b      	ldr	r3, [r3, #16]
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d1de      	bne.n	8000d7a <HCSR04_GetInfo+0x56>
		
		}
		
				
		//X=V*t, X=distance_cm, V=0.0343cm/us, t=(transmission + reception time)/2 us
		distance = (duration/2)*(float)0.0343; //sound speed = 343m/s = 0.0343cm/us
 8000dbc:	4b2b      	ldr	r3, [pc, #172]	; (8000e6c <HCSR04_GetInfo+0x148>)
 8000dbe:	ed93 7a00 	vldr	s14, [r3]
 8000dc2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000dc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dca:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000e70 <HCSR04_GetInfo+0x14c>
 8000dce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dd2:	4b28      	ldr	r3, [pc, #160]	; (8000e74 <HCSR04_GetInfo+0x150>)
 8000dd4:	edc3 7a00 	vstr	s15, [r3]
		distance -= zero_point;                //subtract the zero point and then, the distance(default:cm) equals from the zero point to object.
 8000dd8:	4b26      	ldr	r3, [pc, #152]	; (8000e74 <HCSR04_GetInfo+0x150>)
 8000dda:	edd3 7a00 	vldr	s15, [r3]
 8000dde:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000de2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000de6:	4b23      	ldr	r3, [pc, #140]	; (8000e74 <HCSR04_GetInfo+0x150>)
 8000de8:	edc3 7a00 	vstr	s15, [r3]
	
	  HCSR04_DATA->distance_cm = distance;
 8000dec:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <HCSR04_GetInfo+0x150>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	60da      	str	r2, [r3, #12]
		HCSR04_DATA->distance_mm = distance*10;
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <HCSR04_GetInfo+0x150>)
 8000df6:	edd3 7a00 	vldr	s15, [r3]
 8000dfa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000dfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	edc3 7a02 	vstr	s15, [r3, #8]
		HCSR04_DATA->distance_m = distance/100;
 8000e08:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <HCSR04_GetInfo+0x150>)
 8000e0a:	ed93 7a00 	vldr	s14, [r3]
 8000e0e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8000e78 <HCSR04_GetInfo+0x154>
 8000e12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	edc3 7a04 	vstr	s15, [r3, #16]
		HCSR04_DATA->distance_inch = distance/(float)2.54;
 8000e1c:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <HCSR04_GetInfo+0x150>)
 8000e1e:	ed93 7a00 	vldr	s14, [r3]
 8000e22:	eddf 6a16 	vldr	s13, [pc, #88]	; 8000e7c <HCSR04_GetInfo+0x158>
 8000e26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	edc3 7a05 	vstr	s15, [r3, #20]
		
		HCSR04_DATA->duration_us = duration;
 8000e30:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <HCSR04_GetInfo+0x148>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	605a      	str	r2, [r3, #4]
		HCSR04_DATA->duration_ms = duration/1000;
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <HCSR04_GetInfo+0x148>)
 8000e3a:	ed93 7a00 	vldr	s14, [r3]
 8000e3e:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000e80 <HCSR04_GetInfo+0x15c>
 8000e42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	edc3 7a00 	vstr	s15, [r3]
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200004dc 	.word	0x200004dc
 8000e58:	2000044a 	.word	0x2000044a
 8000e5c:	200004e0 	.word	0x200004e0
 8000e60:	20000448 	.word	0x20000448
 8000e64:	20000494 	.word	0x20000494
 8000e68:	2000044c 	.word	0x2000044c
 8000e6c:	20000200 	.word	0x20000200
 8000e70:	3d0c7e28 	.word	0x3d0c7e28
 8000e74:	20000204 	.word	0x20000204
 8000e78:	42c80000 	.word	0x42c80000
 8000e7c:	40228f5c 	.word	0x40228f5c
 8000e80:	447a0000 	.word	0x447a0000

08000e84 <Delay>:
static void MX_TIM2_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */

void Delay(uint32_t i)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	static uint32_t j=0, ij=0;
	for(ij=0;ij<i;ij++)
 8000e8c:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <Delay+0x4c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	e011      	b.n	8000eb8 <Delay+0x34>
		for(j=0;j<1;j++);
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <Delay+0x50>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	e004      	b.n	8000ea6 <Delay+0x22>
 8000e9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <Delay+0x50>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	4a0c      	ldr	r2, [pc, #48]	; (8000ed4 <Delay+0x50>)
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <Delay+0x50>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d0f6      	beq.n	8000e9c <Delay+0x18>
	for(ij=0;ij<i;ij++)
 8000eae:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <Delay+0x4c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	4a06      	ldr	r2, [pc, #24]	; (8000ed0 <Delay+0x4c>)
 8000eb6:	6013      	str	r3, [r2, #0]
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <Delay+0x4c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d8e8      	bhi.n	8000e94 <Delay+0x10>
}
 8000ec2:	bf00      	nop
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	20000210 	.word	0x20000210
 8000ed4:	20000214 	.word	0x20000214

08000ed8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]

	HCSR04_TIM_PEC(htim);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f7ff fee9 	bl	8000cb8 <HCSR04_TIM_PEC>

}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b0d4      	sub	sp, #336	; 0x150
 8000ef4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	int i=0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	int dx_cm_int = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	  int intpart = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	  float decpart = 0.0;
 8000f08:	f04f 0300 	mov.w	r3, #0
 8000f0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  int decpart_int = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	  float Distance = 0.0;
 8000f16:	f04f 0300 	mov.w	r3, #0
 8000f1a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	  int intpart2 = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	  float decpart2 = 0.0;
 8000f24:	f04f 0300 	mov.w	r3, #0
 8000f28:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	  int decpart_int2 = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	  uint32_t time, time_copy;
uint8_t myBuf[30]="\r\n";
 8000f32:	f640 230d 	movw	r3, #2573	; 0xa0d
 8000f36:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000f3a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	611a      	str	r2, [r3, #16]
 8000f4a:	615a      	str	r2, [r3, #20]
 8000f4c:	831a      	strh	r2, [r3, #24]
uint8_t myBuf1[30]="\r\n";
 8000f4e:	f640 230d 	movw	r3, #2573	; 0xa0d
 8000f52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000f56:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
 8000f64:	611a      	str	r2, [r3, #16]
 8000f66:	615a      	str	r2, [r3, #20]
 8000f68:	831a      	strh	r2, [r3, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6a:	f000 fbe5 	bl	8001738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f6e:	f000 f8ed 	bl	800114c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f72:	f000 fa0d 	bl	8001390 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f76:	f000 f9bf 	bl	80012f8 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000f7a:	f006 fa25 	bl	80073c8 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000f7e:	f000 f94f 	bl	8001220 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HCSR04_Init();
 8000f82:	f7ff fe71 	bl	8000c68 <HCSR04_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		HCSR04_GetInfo(&HCSR04_sensor);
 8000f86:	486a      	ldr	r0, [pc, #424]	; (8001130 <main+0x240>)
 8000f88:	f7ff fecc 	bl	8000d24 <HCSR04_GetInfo>

	    tx_us = HCSR04_sensor.duration_us;  //the time duration(us) of the signal obtained from echo pin (transmission + reception).
 8000f8c:	4b68      	ldr	r3, [pc, #416]	; (8001130 <main+0x240>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	4a68      	ldr	r2, [pc, #416]	; (8001134 <main+0x244>)
 8000f92:	6013      	str	r3, [r2, #0]
			dx_cm = HCSR04_sensor.distance_cm;  //the distance in cm.
 8000f94:	4b66      	ldr	r3, [pc, #408]	; (8001130 <main+0x240>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	4a67      	ldr	r2, [pc, #412]	; (8001138 <main+0x248>)
 8000f9a:	6013      	str	r3, [r2, #0]
			intpart = dx_cm;
 8000f9c:	4b66      	ldr	r3, [pc, #408]	; (8001138 <main+0x248>)
 8000f9e:	edd3 7a00 	vldr	s15, [r3]
 8000fa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fa6:	ee17 3a90 	vmov	r3, s15
 8000faa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			decpart = dx_cm - intpart;
 8000fae:	4b62      	ldr	r3, [pc, #392]	; (8001138 <main+0x248>)
 8000fb0:	ed93 7a00 	vldr	s14, [r3]
 8000fb4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000fb8:	ee07 3a90 	vmov	s15, r3
 8000fbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fc4:	edc7 7a4b 	vstr	s15, [r7, #300]	; 0x12c
			decpart_int = decpart * 10;
 8000fc8:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 8000fcc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000fd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fd8:	ee17 3a90 	vmov	r3, s15
 8000fdc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	  i=i+1;
 8000fe0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	  //snprintf(myBuf, 30, "%d", i);

//snprintf(myBuf1, 30, "%d.%d \n", intpart, decpart_int);
//CDC_Transmit_FS(myBuf1, strlen((char *)myBuf1));

HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET); //triger
 8000fea:	2200      	movs	r2, #0
 8000fec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ff0:	4852      	ldr	r0, [pc, #328]	; (800113c <main+0x24c>)
 8000ff2:	f000 fefd 	bl	8001df0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET); // echo
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ffc:	484f      	ldr	r0, [pc, #316]	; (800113c <main+0x24c>)
 8000ffe:	f000 fef7 	bl	8001df0 <HAL_GPIO_WritePin>

HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET); //triger
 8001002:	2201      	movs	r2, #1
 8001004:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001008:	484c      	ldr	r0, [pc, #304]	; (800113c <main+0x24c>)
 800100a:	f000 fef1 	bl	8001df0 <HAL_GPIO_WritePin>
Delay(8); // delay 10us
 800100e:	2008      	movs	r0, #8
 8001010:	f7ff ff38 	bl	8000e84 <Delay>
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET); //triger
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800101a:	4848      	ldr	r0, [pc, #288]	; (800113c <main+0x24c>)
 800101c:	f000 fee8 	bl	8001df0 <HAL_GPIO_WritePin>

while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == 0x00){
 8001020:	bf00      	nop
 8001022:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001026:	4845      	ldr	r0, [pc, #276]	; (800113c <main+0x24c>)
 8001028:	f000 feca 	bl	8001dc0 <HAL_GPIO_ReadPin>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d0f7      	beq.n	8001022 <main+0x132>

}

time = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) != 0x00){
 8001038:	e007      	b.n	800104a <main+0x15a>
	time++;
 800103a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800103e:	3301      	adds	r3, #1
 8001040:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	Delay(1);
 8001044:	2001      	movs	r0, #1
 8001046:	f7ff ff1d 	bl	8000e84 <Delay>
while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) != 0x00){
 800104a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800104e:	483b      	ldr	r0, [pc, #236]	; (800113c <main+0x24c>)
 8001050:	f000 feb6 	bl	8001dc0 <HAL_GPIO_ReadPin>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1ef      	bne.n	800103a <main+0x14a>

}
time_copy = time;
 800105a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800105e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
Distance = (float)time_copy * 0.0171821*4;
 8001062:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001066:	ee07 3a90 	vmov	s15, r3
 800106a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800106e:	ee17 0a90 	vmov	r0, s15
 8001072:	f7ff fb93 	bl	800079c <__aeabi_f2d>
 8001076:	a32c      	add	r3, pc, #176	; (adr r3, 8001128 <main+0x238>)
 8001078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107c:	f7ff f900 	bl	8000280 <__aeabi_dmul>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	4610      	mov	r0, r2
 8001086:	4619      	mov	r1, r3
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	4b2c      	ldr	r3, [pc, #176]	; (8001140 <main+0x250>)
 800108e:	f7ff f8f7 	bl	8000280 <__aeabi_dmul>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f7ff fbd7 	bl	800084c <__aeabi_d2f>
 800109e:	4603      	mov	r3, r0
 80010a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
intpart2 = Distance;
 80010a4:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 80010a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010ac:	ee17 3a90 	vmov	r3, s15
 80010b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
decpart2 = Distance - intpart2;
 80010b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80010b8:	ee07 3a90 	vmov	s15, r3
 80010bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010c0:	ed97 7a49 	vldr	s14, [r7, #292]	; 0x124
 80010c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c8:	edc7 7a47 	vstr	s15, [r7, #284]	; 0x11c
decpart_int2 = decpart2 * 10;
 80010cc:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 80010d0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80010d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010dc:	ee17 3a90 	vmov	r3, s15
 80010e0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
snprintf(myBuf1, 30, "%d.%d %d.%d\n", intpart, decpart_int, intpart2, decpart_int2);
 80010e4:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 80010e8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80010ec:	9302      	str	r3, [sp, #8]
 80010ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80010fe:	4a11      	ldr	r2, [pc, #68]	; (8001144 <main+0x254>)
 8001100:	211e      	movs	r1, #30
 8001102:	f006 febb 	bl	8007e7c <sniprintf>
CDC_Transmit_FS(myBuf1, strlen((char *)myBuf1));
 8001106:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff f860 	bl	80001d0 <strlen>
 8001110:	4603      	mov	r3, r0
 8001112:	b29a      	uxth	r2, r3
 8001114:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001118:	4611      	mov	r1, r2
 800111a:	4618      	mov	r0, r3
 800111c:	f006 fa12 	bl	8007544 <CDC_Transmit_FS>
Delay(8*100*1000); // every second
 8001120:	4809      	ldr	r0, [pc, #36]	; (8001148 <main+0x258>)
 8001122:	f7ff feaf 	bl	8000e84 <Delay>
		HCSR04_GetInfo(&HCSR04_sensor);
 8001126:	e72e      	b.n	8000f86 <main+0x96>
 8001128:	364e70a6 	.word	0x364e70a6
 800112c:	3f91982f 	.word	0x3f91982f
 8001130:	200004ec 	.word	0x200004ec
 8001134:	20000208 	.word	0x20000208
 8001138:	2000020c 	.word	0x2000020c
 800113c:	40020c00 	.word	0x40020c00
 8001140:	40100000 	.word	0x40100000
 8001144:	080086fc 	.word	0x080086fc
 8001148:	000c3500 	.word	0x000c3500

0800114c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b094      	sub	sp, #80	; 0x50
 8001150:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001152:	f107 0320 	add.w	r3, r7, #32
 8001156:	2230      	movs	r2, #48	; 0x30
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f006 fe86 	bl	8007e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001170:	2300      	movs	r3, #0
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	4b28      	ldr	r3, [pc, #160]	; (8001218 <SystemClock_Config+0xcc>)
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	4a27      	ldr	r2, [pc, #156]	; (8001218 <SystemClock_Config+0xcc>)
 800117a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800117e:	6413      	str	r3, [r2, #64]	; 0x40
 8001180:	4b25      	ldr	r3, [pc, #148]	; (8001218 <SystemClock_Config+0xcc>)
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800118c:	2300      	movs	r3, #0
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	4b22      	ldr	r3, [pc, #136]	; (800121c <SystemClock_Config+0xd0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a21      	ldr	r2, [pc, #132]	; (800121c <SystemClock_Config+0xd0>)
 8001196:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	4b1f      	ldr	r3, [pc, #124]	; (800121c <SystemClock_Config+0xd0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011a8:	2301      	movs	r3, #1
 80011aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b2:	2302      	movs	r3, #2
 80011b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011bc:	2304      	movs	r3, #4
 80011be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011c0:	23a8      	movs	r3, #168	; 0xa8
 80011c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011c4:	2302      	movs	r3, #2
 80011c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011c8:	2307      	movs	r3, #7
 80011ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011cc:	f107 0320 	add.w	r3, r7, #32
 80011d0:	4618      	mov	r0, r3
 80011d2:	f001 ffa9 	bl	8003128 <HAL_RCC_OscConfig>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011dc:	f000 f946 	bl	800146c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e0:	230f      	movs	r3, #15
 80011e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e4:	2302      	movs	r3, #2
 80011e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	2105      	movs	r1, #5
 80011fe:	4618      	mov	r0, r3
 8001200:	f002 fa0a 	bl	8003618 <HAL_RCC_ClockConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800120a:	f000 f92f 	bl	800146c <Error_Handler>
  }
}
 800120e:	bf00      	nop
 8001210:	3750      	adds	r7, #80	; 0x50
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800
 800121c:	40007000 	.word	0x40007000

08001220 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08c      	sub	sp, #48	; 0x30
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001226:	f107 0320 	add.w	r3, r7, #32
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800124c:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <MX_TIM1_Init+0xd0>)
 800124e:	4a29      	ldr	r2, [pc, #164]	; (80012f4 <MX_TIM1_Init+0xd4>)
 8001250:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8001252:	4b27      	ldr	r3, [pc, #156]	; (80012f0 <MX_TIM1_Init+0xd0>)
 8001254:	22a7      	movs	r2, #167	; 0xa7
 8001256:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001258:	4b25      	ldr	r3, [pc, #148]	; (80012f0 <MX_TIM1_Init+0xd0>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 23323;
 800125e:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <MX_TIM1_Init+0xd0>)
 8001260:	f645 321b 	movw	r2, #23323	; 0x5b1b
 8001264:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001266:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <MX_TIM1_Init+0xd0>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800126c:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <MX_TIM1_Init+0xd0>)
 800126e:	2200      	movs	r2, #0
 8001270:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001272:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <MX_TIM1_Init+0xd0>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001278:	481d      	ldr	r0, [pc, #116]	; (80012f0 <MX_TIM1_Init+0xd0>)
 800127a:	f002 fba1 	bl	80039c0 <HAL_TIM_Base_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001284:	f000 f8f2 	bl	800146c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800128e:	f107 0320 	add.w	r3, r7, #32
 8001292:	4619      	mov	r1, r3
 8001294:	4816      	ldr	r0, [pc, #88]	; (80012f0 <MX_TIM1_Init+0xd0>)
 8001296:	f002 fd5b 	bl	8003d50 <HAL_TIM_ConfigClockSource>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80012a0:	f000 f8e4 	bl	800146c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80012a4:	2305      	movs	r3, #5
 80012a6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80012a8:	2350      	movs	r3, #80	; 0x50
 80012aa:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 15;
 80012b0:	230f      	movs	r3, #15
 80012b2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	4619      	mov	r1, r3
 80012ba:	480d      	ldr	r0, [pc, #52]	; (80012f0 <MX_TIM1_Init+0xd0>)
 80012bc:	f002 fe0c 	bl	8003ed8 <HAL_TIM_SlaveConfigSynchro>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80012c6:	f000 f8d1 	bl	800146c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	4619      	mov	r1, r3
 80012d6:	4806      	ldr	r0, [pc, #24]	; (80012f0 <MX_TIM1_Init+0xd0>)
 80012d8:	f003 f830 	bl	800433c <HAL_TIMEx_MasterConfigSynchronization>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80012e2:	f000 f8c3 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	3730      	adds	r7, #48	; 0x30
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000504 	.word	0x20000504
 80012f4:	40010000 	.word	0x40010000

080012f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130c:	463b      	mov	r3, r7
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001314:	4b1d      	ldr	r3, [pc, #116]	; (800138c <MX_TIM2_Init+0x94>)
 8001316:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800131a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800131c:	4b1b      	ldr	r3, [pc, #108]	; (800138c <MX_TIM2_Init+0x94>)
 800131e:	2253      	movs	r2, #83	; 0x53
 8001320:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001322:	4b1a      	ldr	r3, [pc, #104]	; (800138c <MX_TIM2_Init+0x94>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001328:	4b18      	ldr	r3, [pc, #96]	; (800138c <MX_TIM2_Init+0x94>)
 800132a:	2209      	movs	r2, #9
 800132c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132e:	4b17      	ldr	r3, [pc, #92]	; (800138c <MX_TIM2_Init+0x94>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001334:	4b15      	ldr	r3, [pc, #84]	; (800138c <MX_TIM2_Init+0x94>)
 8001336:	2200      	movs	r2, #0
 8001338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800133a:	4814      	ldr	r0, [pc, #80]	; (800138c <MX_TIM2_Init+0x94>)
 800133c:	f002 fb40 	bl	80039c0 <HAL_TIM_Base_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001346:	f000 f891 	bl	800146c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800134a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001350:	f107 0308 	add.w	r3, r7, #8
 8001354:	4619      	mov	r1, r3
 8001356:	480d      	ldr	r0, [pc, #52]	; (800138c <MX_TIM2_Init+0x94>)
 8001358:	f002 fcfa 	bl	8003d50 <HAL_TIM_ConfigClockSource>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001362:	f000 f883 	bl	800146c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001366:	2300      	movs	r3, #0
 8001368:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800136e:	463b      	mov	r3, r7
 8001370:	4619      	mov	r1, r3
 8001372:	4806      	ldr	r0, [pc, #24]	; (800138c <MX_TIM2_Init+0x94>)
 8001374:	f002 ffe2 	bl	800433c <HAL_TIMEx_MasterConfigSynchronization>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800137e:	f000 f875 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001382:	bf00      	nop
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	2000054c 	.word	0x2000054c

08001390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
 80013a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
 80013aa:	4b2e      	ldr	r3, [pc, #184]	; (8001464 <MX_GPIO_Init+0xd4>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a2d      	ldr	r2, [pc, #180]	; (8001464 <MX_GPIO_Init+0xd4>)
 80013b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b2b      	ldr	r3, [pc, #172]	; (8001464 <MX_GPIO_Init+0xd4>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	4b27      	ldr	r3, [pc, #156]	; (8001464 <MX_GPIO_Init+0xd4>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a26      	ldr	r2, [pc, #152]	; (8001464 <MX_GPIO_Init+0xd4>)
 80013cc:	f043 0310 	orr.w	r3, r3, #16
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b24      	ldr	r3, [pc, #144]	; (8001464 <MX_GPIO_Init+0xd4>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0310 	and.w	r3, r3, #16
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	4b20      	ldr	r3, [pc, #128]	; (8001464 <MX_GPIO_Init+0xd4>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a1f      	ldr	r2, [pc, #124]	; (8001464 <MX_GPIO_Init+0xd4>)
 80013e8:	f043 0308 	orr.w	r3, r3, #8
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <MX_GPIO_Init+0xd4>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0308 	and.w	r3, r3, #8
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <MX_GPIO_Init+0xd4>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a18      	ldr	r2, [pc, #96]	; (8001464 <MX_GPIO_Init+0xd4>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b16      	ldr	r3, [pc, #88]	; (8001464 <MX_GPIO_Init+0xd4>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	f44f 4138 	mov.w	r1, #47104	; 0xb800
 800141c:	4812      	ldr	r0, [pc, #72]	; (8001468 <MX_GPIO_Init+0xd8>)
 800141e:	f000 fce7 	bl	8001df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD11 PD12 PD13 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001422:	f44f 4338 	mov.w	r3, #47104	; 0xb800
 8001426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001428:	2301      	movs	r3, #1
 800142a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2300      	movs	r3, #0
 8001432:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4619      	mov	r1, r3
 800143a:	480b      	ldr	r0, [pc, #44]	; (8001468 <MX_GPIO_Init+0xd8>)
 800143c:	f000 fb24 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001440:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001446:	2300      	movs	r3, #0
 8001448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800144a:	2302      	movs	r3, #2
 800144c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	4804      	ldr	r0, [pc, #16]	; (8001468 <MX_GPIO_Init+0xd8>)
 8001456:	f000 fb17 	bl	8001a88 <HAL_GPIO_Init>

}
 800145a:	bf00      	nop
 800145c:	3728      	adds	r7, #40	; 0x28
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800
 8001468:	40020c00 	.word	0x40020c00

0800146c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001470:	b672      	cpsid	i
}
 8001472:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001474:	e7fe      	b.n	8001474 <Error_Handler+0x8>
	...

08001478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <HAL_MspInit+0x4c>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	4a0f      	ldr	r2, [pc, #60]	; (80014c4 <HAL_MspInit+0x4c>)
 8001488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148c:	6453      	str	r3, [r2, #68]	; 0x44
 800148e:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <HAL_MspInit+0x4c>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	603b      	str	r3, [r7, #0]
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <HAL_MspInit+0x4c>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	4a08      	ldr	r2, [pc, #32]	; (80014c4 <HAL_MspInit+0x4c>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a8:	6413      	str	r3, [r2, #64]	; 0x40
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_MspInit+0x4c>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800

080014c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a2f      	ldr	r2, [pc, #188]	; (80015a4 <HAL_TIM_Base_MspInit+0xdc>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d13d      	bne.n	8001566 <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	4b2e      	ldr	r3, [pc, #184]	; (80015a8 <HAL_TIM_Base_MspInit+0xe0>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	4a2d      	ldr	r2, [pc, #180]	; (80015a8 <HAL_TIM_Base_MspInit+0xe0>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6453      	str	r3, [r2, #68]	; 0x44
 80014fa:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <HAL_TIM_Base_MspInit+0xe0>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4b27      	ldr	r3, [pc, #156]	; (80015a8 <HAL_TIM_Base_MspInit+0xe0>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a26      	ldr	r2, [pc, #152]	; (80015a8 <HAL_TIM_Base_MspInit+0xe0>)
 8001510:	f043 0310 	orr.w	r3, r3, #16
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <HAL_TIM_Base_MspInit+0xe0>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0310 	and.w	r3, r3, #16
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001522:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001534:	2301      	movs	r3, #1
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	4619      	mov	r1, r3
 800153e:	481b      	ldr	r0, [pc, #108]	; (80015ac <HAL_TIM_Base_MspInit+0xe4>)
 8001540:	f000 faa2 	bl	8001a88 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001544:	2200      	movs	r2, #0
 8001546:	2100      	movs	r1, #0
 8001548:	2019      	movs	r0, #25
 800154a:	f000 fa66 	bl	8001a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800154e:	2019      	movs	r0, #25
 8001550:	f000 fa7f 	bl	8001a52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001554:	2200      	movs	r2, #0
 8001556:	2100      	movs	r1, #0
 8001558:	201a      	movs	r0, #26
 800155a:	f000 fa5e 	bl	8001a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800155e:	201a      	movs	r0, #26
 8001560:	f000 fa77 	bl	8001a52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001564:	e01a      	b.n	800159c <HAL_TIM_Base_MspInit+0xd4>
  else if(htim_base->Instance==TIM2)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800156e:	d115      	bne.n	800159c <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <HAL_TIM_Base_MspInit+0xe0>)
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	4a0b      	ldr	r2, [pc, #44]	; (80015a8 <HAL_TIM_Base_MspInit+0xe0>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	6413      	str	r3, [r2, #64]	; 0x40
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <HAL_TIM_Base_MspInit+0xe0>)
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800158c:	2200      	movs	r2, #0
 800158e:	2100      	movs	r1, #0
 8001590:	201c      	movs	r0, #28
 8001592:	f000 fa42 	bl	8001a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001596:	201c      	movs	r0, #28
 8001598:	f000 fa5b 	bl	8001a52 <HAL_NVIC_EnableIRQ>
}
 800159c:	bf00      	nop
 800159e:	3728      	adds	r7, #40	; 0x28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40010000 	.word	0x40010000
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40021000 	.word	0x40021000

080015b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <NMI_Handler+0x4>

080015b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ba:	e7fe      	b.n	80015ba <HardFault_Handler+0x4>

080015bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <MemManage_Handler+0x4>

080015c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <BusFault_Handler+0x4>

080015c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <UsageFault_Handler+0x4>

080015ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015fc:	f000 f8ee 	bl	80017dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}

08001604 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001608:	4802      	ldr	r0, [pc, #8]	; (8001614 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800160a:	f002 fa99 	bl	8003b40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000504 	.word	0x20000504

08001618 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800161e:	f002 fa8f 	bl	8003b40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000504 	.word	0x20000504

0800162c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
		distance++;
	if(triggerTime < TriggerDuration)
		triggerTime++;
		*/
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <TIM2_IRQHandler+0x10>)
 8001632:	f002 fa85 	bl	8003b40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	2000054c 	.word	0x2000054c

08001640 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001644:	4802      	ldr	r0, [pc, #8]	; (8001650 <OTG_FS_IRQHandler+0x10>)
 8001646:	f000 fd3c 	bl	80020c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20001a68 	.word	0x20001a68

08001654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800165c:	4a14      	ldr	r2, [pc, #80]	; (80016b0 <_sbrk+0x5c>)
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <_sbrk+0x60>)
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001668:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <_sbrk+0x64>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d102      	bne.n	8001676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <_sbrk+0x64>)
 8001672:	4a12      	ldr	r2, [pc, #72]	; (80016bc <_sbrk+0x68>)
 8001674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <_sbrk+0x64>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	429a      	cmp	r2, r3
 8001682:	d207      	bcs.n	8001694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001684:	f006 fbba 	bl	8007dfc <__errno>
 8001688:	4603      	mov	r3, r0
 800168a:	220c      	movs	r2, #12
 800168c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
 8001692:	e009      	b.n	80016a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <_sbrk+0x64>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800169a:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <_sbrk+0x64>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <_sbrk+0x64>)
 80016a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016a6:	68fb      	ldr	r3, [r7, #12]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20020000 	.word	0x20020000
 80016b4:	00000400 	.word	0x00000400
 80016b8:	20000218 	.word	0x20000218
 80016bc:	20001e80 	.word	0x20001e80

080016c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <SystemInit+0x20>)
 80016c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ca:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <SystemInit+0x20>)
 80016cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800171c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016e8:	480d      	ldr	r0, [pc, #52]	; (8001720 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ea:	490e      	ldr	r1, [pc, #56]	; (8001724 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016ec:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f0:	e002      	b.n	80016f8 <LoopCopyDataInit>

080016f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016f6:	3304      	adds	r3, #4

080016f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016fc:	d3f9      	bcc.n	80016f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016fe:	4a0b      	ldr	r2, [pc, #44]	; (800172c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001700:	4c0b      	ldr	r4, [pc, #44]	; (8001730 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001704:	e001      	b.n	800170a <LoopFillZerobss>

08001706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001708:	3204      	adds	r2, #4

0800170a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800170c:	d3fb      	bcc.n	8001706 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800170e:	f7ff ffd7 	bl	80016c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001712:	f006 fb79 	bl	8007e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001716:	f7ff fbeb 	bl	8000ef0 <main>
  bx  lr    
 800171a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800171c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001724:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001728:	0800879c 	.word	0x0800879c
  ldr r2, =_sbss
 800172c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001730:	20001e80 	.word	0x20001e80

08001734 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001734:	e7fe      	b.n	8001734 <ADC_IRQHandler>
	...

08001738 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800173c:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <HAL_Init+0x40>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0d      	ldr	r2, [pc, #52]	; (8001778 <HAL_Init+0x40>)
 8001742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001746:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <HAL_Init+0x40>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <HAL_Init+0x40>)
 800174e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001752:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <HAL_Init+0x40>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a07      	ldr	r2, [pc, #28]	; (8001778 <HAL_Init+0x40>)
 800175a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800175e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001760:	2003      	movs	r0, #3
 8001762:	f000 f94f 	bl	8001a04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001766:	2000      	movs	r0, #0
 8001768:	f000 f808 	bl	800177c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800176c:	f7ff fe84 	bl	8001478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40023c00 	.word	0x40023c00

0800177c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_InitTick+0x54>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_InitTick+0x58>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	4619      	mov	r1, r3
 800178e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001792:	fbb3 f3f1 	udiv	r3, r3, r1
 8001796:	fbb2 f3f3 	udiv	r3, r2, r3
 800179a:	4618      	mov	r0, r3
 800179c:	f000 f967 	bl	8001a6e <HAL_SYSTICK_Config>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e00e      	b.n	80017c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b0f      	cmp	r3, #15
 80017ae:	d80a      	bhi.n	80017c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b0:	2200      	movs	r2, #0
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	f04f 30ff 	mov.w	r0, #4294967295
 80017b8:	f000 f92f 	bl	8001a1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017bc:	4a06      	ldr	r2, [pc, #24]	; (80017d8 <HAL_InitTick+0x5c>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e000      	b.n	80017c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000000 	.word	0x20000000
 80017d4:	20000008 	.word	0x20000008
 80017d8:	20000004 	.word	0x20000004

080017dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_IncTick+0x20>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	461a      	mov	r2, r3
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_IncTick+0x24>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	4a04      	ldr	r2, [pc, #16]	; (8001800 <HAL_IncTick+0x24>)
 80017ee:	6013      	str	r3, [r2, #0]
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	20000008 	.word	0x20000008
 8001800:	20000594 	.word	0x20000594

08001804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return uwTick;
 8001808:	4b03      	ldr	r3, [pc, #12]	; (8001818 <HAL_GetTick+0x14>)
 800180a:	681b      	ldr	r3, [r3, #0]
}
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000594 	.word	0x20000594

0800181c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001824:	f7ff ffee 	bl	8001804 <HAL_GetTick>
 8001828:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001834:	d005      	beq.n	8001842 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001836:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <HAL_Delay+0x44>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4413      	add	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001842:	bf00      	nop
 8001844:	f7ff ffde 	bl	8001804 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	429a      	cmp	r2, r3
 8001852:	d8f7      	bhi.n	8001844 <HAL_Delay+0x28>
  {
  }
}
 8001854:	bf00      	nop
 8001856:	bf00      	nop
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000008 	.word	0x20000008

08001864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001880:	4013      	ands	r3, r2
 8001882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800188c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001896:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	60d3      	str	r3, [r2, #12]
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b0:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <__NVIC_GetPriorityGrouping+0x18>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	0a1b      	lsrs	r3, r3, #8
 80018b6:	f003 0307 	and.w	r3, r3, #7
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	db0b      	blt.n	80018f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	f003 021f 	and.w	r2, r3, #31
 80018e0:	4907      	ldr	r1, [pc, #28]	; (8001900 <__NVIC_EnableIRQ+0x38>)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	095b      	lsrs	r3, r3, #5
 80018e8:	2001      	movs	r0, #1
 80018ea:	fa00 f202 	lsl.w	r2, r0, r2
 80018ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000e100 	.word	0xe000e100

08001904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	6039      	str	r1, [r7, #0]
 800190e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001914:	2b00      	cmp	r3, #0
 8001916:	db0a      	blt.n	800192e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	b2da      	uxtb	r2, r3
 800191c:	490c      	ldr	r1, [pc, #48]	; (8001950 <__NVIC_SetPriority+0x4c>)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	0112      	lsls	r2, r2, #4
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	440b      	add	r3, r1
 8001928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800192c:	e00a      	b.n	8001944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4908      	ldr	r1, [pc, #32]	; (8001954 <__NVIC_SetPriority+0x50>)
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	3b04      	subs	r3, #4
 800193c:	0112      	lsls	r2, r2, #4
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	440b      	add	r3, r1
 8001942:	761a      	strb	r2, [r3, #24]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	e000e100 	.word	0xe000e100
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001958:	b480      	push	{r7}
 800195a:	b089      	sub	sp, #36	; 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f1c3 0307 	rsb	r3, r3, #7
 8001972:	2b04      	cmp	r3, #4
 8001974:	bf28      	it	cs
 8001976:	2304      	movcs	r3, #4
 8001978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3304      	adds	r3, #4
 800197e:	2b06      	cmp	r3, #6
 8001980:	d902      	bls.n	8001988 <NVIC_EncodePriority+0x30>
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3b03      	subs	r3, #3
 8001986:	e000      	b.n	800198a <NVIC_EncodePriority+0x32>
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800198c:	f04f 32ff 	mov.w	r2, #4294967295
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43da      	mvns	r2, r3
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	401a      	ands	r2, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a0:	f04f 31ff 	mov.w	r1, #4294967295
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	43d9      	mvns	r1, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b0:	4313      	orrs	r3, r2
         );
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3724      	adds	r7, #36	; 0x24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d0:	d301      	bcc.n	80019d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d2:	2301      	movs	r3, #1
 80019d4:	e00f      	b.n	80019f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d6:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <SysTick_Config+0x40>)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019de:	210f      	movs	r1, #15
 80019e0:	f04f 30ff 	mov.w	r0, #4294967295
 80019e4:	f7ff ff8e 	bl	8001904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <SysTick_Config+0x40>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ee:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <SysTick_Config+0x40>)
 80019f0:	2207      	movs	r2, #7
 80019f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	e000e010 	.word	0xe000e010

08001a04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ff29 	bl	8001864 <__NVIC_SetPriorityGrouping>
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b086      	sub	sp, #24
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	4603      	mov	r3, r0
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	607a      	str	r2, [r7, #4]
 8001a26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a2c:	f7ff ff3e 	bl	80018ac <__NVIC_GetPriorityGrouping>
 8001a30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	68b9      	ldr	r1, [r7, #8]
 8001a36:	6978      	ldr	r0, [r7, #20]
 8001a38:	f7ff ff8e 	bl	8001958 <NVIC_EncodePriority>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a42:	4611      	mov	r1, r2
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff5d 	bl	8001904 <__NVIC_SetPriority>
}
 8001a4a:	bf00      	nop
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	4603      	mov	r3, r0
 8001a5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff31 	bl	80018c8 <__NVIC_EnableIRQ>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff ffa2 	bl	80019c0 <SysTick_Config>
 8001a7c:	4603      	mov	r3, r0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b089      	sub	sp, #36	; 0x24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	e16b      	b.n	8001d7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	f040 815a 	bne.w	8001d76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d005      	beq.n	8001ada <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d130      	bne.n	8001b3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4013      	ands	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	68da      	ldr	r2, [r3, #12]
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b10:	2201      	movs	r2, #1
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	091b      	lsrs	r3, r3, #4
 8001b26:	f003 0201 	and.w	r2, r3, #1
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	2b03      	cmp	r3, #3
 8001b46:	d017      	beq.n	8001b78 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	2203      	movs	r2, #3
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d123      	bne.n	8001bcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	08da      	lsrs	r2, r3, #3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3208      	adds	r2, #8
 8001b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	220f      	movs	r2, #15
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	691a      	ldr	r2, [r3, #16]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	08da      	lsrs	r2, r3, #3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3208      	adds	r2, #8
 8001bc6:	69b9      	ldr	r1, [r7, #24]
 8001bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 0203 	and.w	r2, r3, #3
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 80b4 	beq.w	8001d76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	4b60      	ldr	r3, [pc, #384]	; (8001d94 <HAL_GPIO_Init+0x30c>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	4a5f      	ldr	r2, [pc, #380]	; (8001d94 <HAL_GPIO_Init+0x30c>)
 8001c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1e:	4b5d      	ldr	r3, [pc, #372]	; (8001d94 <HAL_GPIO_Init+0x30c>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c2a:	4a5b      	ldr	r2, [pc, #364]	; (8001d98 <HAL_GPIO_Init+0x310>)
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	089b      	lsrs	r3, r3, #2
 8001c30:	3302      	adds	r3, #2
 8001c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	220f      	movs	r2, #15
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a52      	ldr	r2, [pc, #328]	; (8001d9c <HAL_GPIO_Init+0x314>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d02b      	beq.n	8001cae <HAL_GPIO_Init+0x226>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a51      	ldr	r2, [pc, #324]	; (8001da0 <HAL_GPIO_Init+0x318>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d025      	beq.n	8001caa <HAL_GPIO_Init+0x222>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a50      	ldr	r2, [pc, #320]	; (8001da4 <HAL_GPIO_Init+0x31c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d01f      	beq.n	8001ca6 <HAL_GPIO_Init+0x21e>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a4f      	ldr	r2, [pc, #316]	; (8001da8 <HAL_GPIO_Init+0x320>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d019      	beq.n	8001ca2 <HAL_GPIO_Init+0x21a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a4e      	ldr	r2, [pc, #312]	; (8001dac <HAL_GPIO_Init+0x324>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d013      	beq.n	8001c9e <HAL_GPIO_Init+0x216>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a4d      	ldr	r2, [pc, #308]	; (8001db0 <HAL_GPIO_Init+0x328>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d00d      	beq.n	8001c9a <HAL_GPIO_Init+0x212>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a4c      	ldr	r2, [pc, #304]	; (8001db4 <HAL_GPIO_Init+0x32c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d007      	beq.n	8001c96 <HAL_GPIO_Init+0x20e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a4b      	ldr	r2, [pc, #300]	; (8001db8 <HAL_GPIO_Init+0x330>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d101      	bne.n	8001c92 <HAL_GPIO_Init+0x20a>
 8001c8e:	2307      	movs	r3, #7
 8001c90:	e00e      	b.n	8001cb0 <HAL_GPIO_Init+0x228>
 8001c92:	2308      	movs	r3, #8
 8001c94:	e00c      	b.n	8001cb0 <HAL_GPIO_Init+0x228>
 8001c96:	2306      	movs	r3, #6
 8001c98:	e00a      	b.n	8001cb0 <HAL_GPIO_Init+0x228>
 8001c9a:	2305      	movs	r3, #5
 8001c9c:	e008      	b.n	8001cb0 <HAL_GPIO_Init+0x228>
 8001c9e:	2304      	movs	r3, #4
 8001ca0:	e006      	b.n	8001cb0 <HAL_GPIO_Init+0x228>
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e004      	b.n	8001cb0 <HAL_GPIO_Init+0x228>
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	e002      	b.n	8001cb0 <HAL_GPIO_Init+0x228>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <HAL_GPIO_Init+0x228>
 8001cae:	2300      	movs	r3, #0
 8001cb0:	69fa      	ldr	r2, [r7, #28]
 8001cb2:	f002 0203 	and.w	r2, r2, #3
 8001cb6:	0092      	lsls	r2, r2, #2
 8001cb8:	4093      	lsls	r3, r2
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cc0:	4935      	ldr	r1, [pc, #212]	; (8001d98 <HAL_GPIO_Init+0x310>)
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	089b      	lsrs	r3, r3, #2
 8001cc6:	3302      	adds	r3, #2
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cce:	4b3b      	ldr	r3, [pc, #236]	; (8001dbc <HAL_GPIO_Init+0x334>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cf2:	4a32      	ldr	r2, [pc, #200]	; (8001dbc <HAL_GPIO_Init+0x334>)
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cf8:	4b30      	ldr	r3, [pc, #192]	; (8001dbc <HAL_GPIO_Init+0x334>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d1c:	4a27      	ldr	r2, [pc, #156]	; (8001dbc <HAL_GPIO_Init+0x334>)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d22:	4b26      	ldr	r3, [pc, #152]	; (8001dbc <HAL_GPIO_Init+0x334>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d46:	4a1d      	ldr	r2, [pc, #116]	; (8001dbc <HAL_GPIO_Init+0x334>)
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d4c:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <HAL_GPIO_Init+0x334>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	43db      	mvns	r3, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d70:	4a12      	ldr	r2, [pc, #72]	; (8001dbc <HAL_GPIO_Init+0x334>)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	61fb      	str	r3, [r7, #28]
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	2b0f      	cmp	r3, #15
 8001d80:	f67f ae90 	bls.w	8001aa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop
 8001d88:	3724      	adds	r7, #36	; 0x24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40013800 	.word	0x40013800
 8001d9c:	40020000 	.word	0x40020000
 8001da0:	40020400 	.word	0x40020400
 8001da4:	40020800 	.word	0x40020800
 8001da8:	40020c00 	.word	0x40020c00
 8001dac:	40021000 	.word	0x40021000
 8001db0:	40021400 	.word	0x40021400
 8001db4:	40021800 	.word	0x40021800
 8001db8:	40021c00 	.word	0x40021c00
 8001dbc:	40013c00 	.word	0x40013c00

08001dc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691a      	ldr	r2, [r3, #16]
 8001dd0:	887b      	ldrh	r3, [r7, #2]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d002      	beq.n	8001dde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	73fb      	strb	r3, [r7, #15]
 8001ddc:	e001      	b.n	8001de2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dde:	2300      	movs	r3, #0
 8001de0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	807b      	strh	r3, [r7, #2]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e00:	787b      	ldrb	r3, [r7, #1]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e06:	887a      	ldrh	r2, [r7, #2]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e0c:	e003      	b.n	8001e16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e0e:	887b      	ldrh	r3, [r7, #2]
 8001e10:	041a      	lsls	r2, r3, #16
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	619a      	str	r2, [r3, #24]
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e24:	b08f      	sub	sp, #60	; 0x3c
 8001e26:	af0a      	add	r7, sp, #40	; 0x28
 8001e28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e10f      	b.n	8002054 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d106      	bne.n	8001e54 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f005 fcc0 	bl	80077d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2203      	movs	r2, #3
 8001e58:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d102      	bne.n	8001e6e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f002 fc07 	bl	8004686 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	603b      	str	r3, [r7, #0]
 8001e7e:	687e      	ldr	r6, [r7, #4]
 8001e80:	466d      	mov	r5, sp
 8001e82:	f106 0410 	add.w	r4, r6, #16
 8001e86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e92:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e96:	1d33      	adds	r3, r6, #4
 8001e98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e9a:	6838      	ldr	r0, [r7, #0]
 8001e9c:	f002 fade 	bl	800445c <USB_CoreInit>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d005      	beq.n	8001eb2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e0d0      	b.n	8002054 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f002 fbf5 	bl	80046a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	73fb      	strb	r3, [r7, #15]
 8001ec2:	e04a      	b.n	8001f5a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ec4:	7bfa      	ldrb	r2, [r7, #15]
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	1a9b      	subs	r3, r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	333d      	adds	r3, #61	; 0x3d
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ed8:	7bfa      	ldrb	r2, [r7, #15]
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	1a9b      	subs	r3, r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	333c      	adds	r3, #60	; 0x3c
 8001ee8:	7bfa      	ldrb	r2, [r7, #15]
 8001eea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001eec:	7bfa      	ldrb	r2, [r7, #15]
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
 8001ef0:	b298      	uxth	r0, r3
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	1a9b      	subs	r3, r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	3342      	adds	r3, #66	; 0x42
 8001f00:	4602      	mov	r2, r0
 8001f02:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f04:	7bfa      	ldrb	r2, [r7, #15]
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	1a9b      	subs	r3, r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	333f      	adds	r3, #63	; 0x3f
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f18:	7bfa      	ldrb	r2, [r7, #15]
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	1a9b      	subs	r3, r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	3344      	adds	r3, #68	; 0x44
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	1a9b      	subs	r3, r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	3348      	adds	r3, #72	; 0x48
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f40:	7bfa      	ldrb	r2, [r7, #15]
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	1a9b      	subs	r3, r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	3350      	adds	r3, #80	; 0x50
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f54:	7bfb      	ldrb	r3, [r7, #15]
 8001f56:	3301      	adds	r3, #1
 8001f58:	73fb      	strb	r3, [r7, #15]
 8001f5a:	7bfa      	ldrb	r2, [r7, #15]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d3af      	bcc.n	8001ec4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f64:	2300      	movs	r3, #0
 8001f66:	73fb      	strb	r3, [r7, #15]
 8001f68:	e044      	b.n	8001ff4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f6a:	7bfa      	ldrb	r2, [r7, #15]
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	1a9b      	subs	r3, r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	440b      	add	r3, r1
 8001f78:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f80:	7bfa      	ldrb	r2, [r7, #15]
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	1a9b      	subs	r3, r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001f92:	7bfa      	ldrb	r2, [r7, #15]
 8001f94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f96:	7bfa      	ldrb	r2, [r7, #15]
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	1a9b      	subs	r3, r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fac:	7bfa      	ldrb	r2, [r7, #15]
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	1a9b      	subs	r3, r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fc2:	7bfa      	ldrb	r2, [r7, #15]
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	1a9b      	subs	r3, r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	440b      	add	r3, r1
 8001fd0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fd8:	7bfa      	ldrb	r2, [r7, #15]
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	1a9b      	subs	r3, r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	73fb      	strb	r3, [r7, #15]
 8001ff4:	7bfa      	ldrb	r2, [r7, #15]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d3b5      	bcc.n	8001f6a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	603b      	str	r3, [r7, #0]
 8002004:	687e      	ldr	r6, [r7, #4]
 8002006:	466d      	mov	r5, sp
 8002008:	f106 0410 	add.w	r4, r6, #16
 800200c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800200e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002010:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002012:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002014:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002018:	e885 0003 	stmia.w	r5, {r0, r1}
 800201c:	1d33      	adds	r3, r6, #4
 800201e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002020:	6838      	ldr	r0, [r7, #0]
 8002022:	f002 fb6b 	bl	80046fc <USB_DevInit>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d005      	beq.n	8002038 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2202      	movs	r2, #2
 8002030:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e00d      	b.n	8002054 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f003 fbb3 	bl	80057b8 <USB_DevDisconnect>

  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800205c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <HAL_PCD_Start+0x1c>
 8002074:	2302      	movs	r3, #2
 8002076:	e020      	b.n	80020ba <HAL_PCD_Start+0x5e>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	2b01      	cmp	r3, #1
 8002086:	d109      	bne.n	800209c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800208c:	2b01      	cmp	r3, #1
 800208e:	d005      	beq.n	800209c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002094:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f002 fadf 	bl	8004664 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f003 fb63 	bl	8005776 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020c2:	b590      	push	{r4, r7, lr}
 80020c4:	b08d      	sub	sp, #52	; 0x34
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020d0:	6a3b      	ldr	r3, [r7, #32]
 80020d2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f003 fc21 	bl	8005920 <USB_GetMode>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f040 839d 	bne.w	8002820 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f003 fb85 	bl	80057fa <USB_ReadInterrupts>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 8393 	beq.w	800281e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f003 fb7c 	bl	80057fa <USB_ReadInterrupts>
 8002102:	4603      	mov	r3, r0
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b02      	cmp	r3, #2
 800210a:	d107      	bne.n	800211c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	695a      	ldr	r2, [r3, #20]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f002 0202 	and.w	r2, r2, #2
 800211a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f003 fb6a 	bl	80057fa <USB_ReadInterrupts>
 8002126:	4603      	mov	r3, r0
 8002128:	f003 0310 	and.w	r3, r3, #16
 800212c:	2b10      	cmp	r3, #16
 800212e:	d161      	bne.n	80021f4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	699a      	ldr	r2, [r3, #24]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0210 	bic.w	r2, r2, #16
 800213e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002140:	6a3b      	ldr	r3, [r7, #32]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	f003 020f 	and.w	r2, r3, #15
 800214c:	4613      	mov	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	1a9b      	subs	r3, r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	4413      	add	r3, r2
 800215c:	3304      	adds	r3, #4
 800215e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	0c5b      	lsrs	r3, r3, #17
 8002164:	f003 030f 	and.w	r3, r3, #15
 8002168:	2b02      	cmp	r3, #2
 800216a:	d124      	bne.n	80021b6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002172:	4013      	ands	r3, r2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d035      	beq.n	80021e4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	091b      	lsrs	r3, r3, #4
 8002180:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002182:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002186:	b29b      	uxth	r3, r3
 8002188:	461a      	mov	r2, r3
 800218a:	6a38      	ldr	r0, [r7, #32]
 800218c:	f003 f9d0 	bl	8005530 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	68da      	ldr	r2, [r3, #12]
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	091b      	lsrs	r3, r3, #4
 8002198:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800219c:	441a      	add	r2, r3
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	699a      	ldr	r2, [r3, #24]
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	091b      	lsrs	r3, r3, #4
 80021aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021ae:	441a      	add	r2, r3
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	619a      	str	r2, [r3, #24]
 80021b4:	e016      	b.n	80021e4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	0c5b      	lsrs	r3, r3, #17
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	2b06      	cmp	r3, #6
 80021c0:	d110      	bne.n	80021e4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021c8:	2208      	movs	r2, #8
 80021ca:	4619      	mov	r1, r3
 80021cc:	6a38      	ldr	r0, [r7, #32]
 80021ce:	f003 f9af 	bl	8005530 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	699a      	ldr	r2, [r3, #24]
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021de:	441a      	add	r2, r3
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699a      	ldr	r2, [r3, #24]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0210 	orr.w	r2, r2, #16
 80021f2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f003 fafe 	bl	80057fa <USB_ReadInterrupts>
 80021fe:	4603      	mov	r3, r0
 8002200:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002204:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002208:	d16e      	bne.n	80022e8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800220a:	2300      	movs	r3, #0
 800220c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f003 fb04 	bl	8005820 <USB_ReadDevAllOutEpInterrupt>
 8002218:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800221a:	e062      	b.n	80022e2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800221c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d057      	beq.n	80022d6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	4611      	mov	r1, r2
 8002230:	4618      	mov	r0, r3
 8002232:	f003 fb29 	bl	8005888 <USB_ReadDevOutEPInterrupt>
 8002236:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00c      	beq.n	800225c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	015a      	lsls	r2, r3, #5
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	4413      	add	r3, r2
 800224a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800224e:	461a      	mov	r2, r3
 8002250:	2301      	movs	r3, #1
 8002252:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002254:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 fdb0 	bl	8002dbc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00c      	beq.n	8002280 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	015a      	lsls	r2, r3, #5
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	4413      	add	r3, r2
 800226e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002272:	461a      	mov	r2, r3
 8002274:	2308      	movs	r3, #8
 8002276:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002278:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 feaa 	bl	8002fd4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	f003 0310 	and.w	r3, r3, #16
 8002286:	2b00      	cmp	r3, #0
 8002288:	d008      	beq.n	800229c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	015a      	lsls	r2, r3, #5
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	4413      	add	r3, r2
 8002292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002296:	461a      	mov	r2, r3
 8002298:	2310      	movs	r3, #16
 800229a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	f003 0320 	and.w	r3, r3, #32
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d008      	beq.n	80022b8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	015a      	lsls	r2, r3, #5
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	4413      	add	r3, r2
 80022ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022b2:	461a      	mov	r2, r3
 80022b4:	2320      	movs	r3, #32
 80022b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d009      	beq.n	80022d6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	015a      	lsls	r2, r3, #5
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	4413      	add	r3, r2
 80022ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ce:	461a      	mov	r2, r3
 80022d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022d4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	3301      	adds	r3, #1
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80022dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022de:	085b      	lsrs	r3, r3, #1
 80022e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80022e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d199      	bne.n	800221c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f003 fa84 	bl	80057fa <USB_ReadInterrupts>
 80022f2:	4603      	mov	r3, r0
 80022f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80022fc:	f040 80c0 	bne.w	8002480 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f003 faa5 	bl	8005854 <USB_ReadDevAllInEpInterrupt>
 800230a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002310:	e0b2      	b.n	8002478 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 80a7 	beq.w	800246c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	4611      	mov	r1, r2
 8002328:	4618      	mov	r0, r3
 800232a:	f003 facb 	bl	80058c4 <USB_ReadDevInEPInterrupt>
 800232e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d057      	beq.n	80023ea <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	f003 030f 	and.w	r3, r3, #15
 8002340:	2201      	movs	r2, #1
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800234e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	43db      	mvns	r3, r3
 8002354:	69f9      	ldr	r1, [r7, #28]
 8002356:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800235a:	4013      	ands	r3, r2
 800235c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	015a      	lsls	r2, r3, #5
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	4413      	add	r3, r2
 8002366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800236a:	461a      	mov	r2, r3
 800236c:	2301      	movs	r3, #1
 800236e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d132      	bne.n	80023de <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800237c:	4613      	mov	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	1a9b      	subs	r3, r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	3348      	adds	r3, #72	; 0x48
 8002388:	6819      	ldr	r1, [r3, #0]
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800238e:	4613      	mov	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	1a9b      	subs	r3, r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4403      	add	r3, r0
 8002398:	3344      	adds	r3, #68	; 0x44
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4419      	add	r1, r3
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a2:	4613      	mov	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	1a9b      	subs	r3, r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4403      	add	r3, r0
 80023ac:	3348      	adds	r3, #72	; 0x48
 80023ae:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d113      	bne.n	80023de <HAL_PCD_IRQHandler+0x31c>
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ba:	4613      	mov	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	1a9b      	subs	r3, r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	440b      	add	r3, r1
 80023c4:	3350      	adds	r3, #80	; 0x50
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d108      	bne.n	80023de <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6818      	ldr	r0, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023d6:	461a      	mov	r2, r3
 80023d8:	2101      	movs	r1, #1
 80023da:	f003 fad3 	bl	8005984 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	4619      	mov	r1, r3
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f005 fa76 	bl	80078d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d008      	beq.n	8002406 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	015a      	lsls	r2, r3, #5
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	4413      	add	r3, r2
 80023fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002400:	461a      	mov	r2, r3
 8002402:	2308      	movs	r3, #8
 8002404:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	f003 0310 	and.w	r3, r3, #16
 800240c:	2b00      	cmp	r3, #0
 800240e:	d008      	beq.n	8002422 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	015a      	lsls	r2, r3, #5
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	4413      	add	r3, r2
 8002418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800241c:	461a      	mov	r2, r3
 800241e:	2310      	movs	r3, #16
 8002420:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002428:	2b00      	cmp	r3, #0
 800242a:	d008      	beq.n	800243e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	015a      	lsls	r2, r3, #5
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	4413      	add	r3, r2
 8002434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002438:	461a      	mov	r2, r3
 800243a:	2340      	movs	r3, #64	; 0x40
 800243c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	015a      	lsls	r2, r3, #5
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	4413      	add	r3, r2
 8002450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002454:	461a      	mov	r2, r3
 8002456:	2302      	movs	r3, #2
 8002458:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002464:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 fc1b 	bl	8002ca2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	3301      	adds	r3, #1
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002474:	085b      	lsrs	r3, r3, #1
 8002476:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247a:	2b00      	cmp	r3, #0
 800247c:	f47f af49 	bne.w	8002312 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f003 f9b8 	bl	80057fa <USB_ReadInterrupts>
 800248a:	4603      	mov	r3, r0
 800248c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002490:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002494:	d122      	bne.n	80024dc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	69fa      	ldr	r2, [r7, #28]
 80024a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024a4:	f023 0301 	bic.w	r3, r3, #1
 80024a8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d108      	bne.n	80024c6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80024bc:	2100      	movs	r1, #0
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 fe26 	bl	8003110 <HAL_PCDEx_LPM_Callback>
 80024c4:	e002      	b.n	80024cc <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f005 fa7c 	bl	80079c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695a      	ldr	r2, [r3, #20]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80024da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f003 f98a 	bl	80057fa <USB_ReadInterrupts>
 80024e6:	4603      	mov	r3, r0
 80024e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024f0:	d112      	bne.n	8002518 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d102      	bne.n	8002508 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f005 fa38 	bl	8007978 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695a      	ldr	r2, [r3, #20]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002516:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f003 f96c 	bl	80057fa <USB_ReadInterrupts>
 8002522:	4603      	mov	r3, r0
 8002524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800252c:	f040 80c7 	bne.w	80026be <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	69fa      	ldr	r2, [r7, #28]
 800253a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800253e:	f023 0301 	bic.w	r3, r3, #1
 8002542:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2110      	movs	r1, #16
 800254a:	4618      	mov	r0, r3
 800254c:	f002 fa3a 	bl	80049c4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002550:	2300      	movs	r3, #0
 8002552:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002554:	e056      	b.n	8002604 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002558:	015a      	lsls	r2, r3, #5
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	4413      	add	r3, r2
 800255e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002562:	461a      	mov	r2, r3
 8002564:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002568:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800256a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	4413      	add	r3, r2
 8002572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800257a:	0151      	lsls	r1, r2, #5
 800257c:	69fa      	ldr	r2, [r7, #28]
 800257e:	440a      	add	r2, r1
 8002580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002584:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002588:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800258a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	4413      	add	r3, r2
 8002592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800259a:	0151      	lsls	r1, r2, #5
 800259c:	69fa      	ldr	r2, [r7, #28]
 800259e:	440a      	add	r2, r1
 80025a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80025a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80025a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80025aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ac:	015a      	lsls	r2, r3, #5
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	4413      	add	r3, r2
 80025b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025b6:	461a      	mov	r2, r3
 80025b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80025bc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80025be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c0:	015a      	lsls	r2, r3, #5
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	4413      	add	r3, r2
 80025c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025ce:	0151      	lsls	r1, r2, #5
 80025d0:	69fa      	ldr	r2, [r7, #28]
 80025d2:	440a      	add	r2, r1
 80025d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80025d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80025dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80025de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e0:	015a      	lsls	r2, r3, #5
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025ee:	0151      	lsls	r1, r2, #5
 80025f0:	69fa      	ldr	r2, [r7, #28]
 80025f2:	440a      	add	r2, r1
 80025f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80025f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80025fc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002600:	3301      	adds	r3, #1
 8002602:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800260a:	429a      	cmp	r2, r3
 800260c:	d3a3      	bcc.n	8002556 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	69fa      	ldr	r2, [r7, #28]
 8002618:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800261c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002620:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	2b00      	cmp	r3, #0
 8002628:	d016      	beq.n	8002658 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002634:	69fa      	ldr	r2, [r7, #28]
 8002636:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800263a:	f043 030b 	orr.w	r3, r3, #11
 800263e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	69fa      	ldr	r2, [r7, #28]
 800264c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002650:	f043 030b 	orr.w	r3, r3, #11
 8002654:	6453      	str	r3, [r2, #68]	; 0x44
 8002656:	e015      	b.n	8002684 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	69fa      	ldr	r2, [r7, #28]
 8002662:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002666:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800266a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800266e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	69fa      	ldr	r2, [r7, #28]
 800267a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800267e:	f043 030b 	orr.w	r3, r3, #11
 8002682:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	69fa      	ldr	r2, [r7, #28]
 800268e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002692:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002696:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6818      	ldr	r0, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80026a8:	461a      	mov	r2, r3
 80026aa:	f003 f96b 	bl	8005984 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	695a      	ldr	r2, [r3, #20]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80026bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f003 f899 	bl	80057fa <USB_ReadInterrupts>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026d2:	d124      	bne.n	800271e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f003 f92f 	bl	800593c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f002 f9cf 	bl	8004a86 <USB_GetDevSpeed>
 80026e8:	4603      	mov	r3, r0
 80026ea:	461a      	mov	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681c      	ldr	r4, [r3, #0]
 80026f4:	f001 f958 	bl	80039a8 <HAL_RCC_GetHCLKFreq>
 80026f8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	4620      	mov	r0, r4
 8002704:	f001 ff0c 	bl	8004520 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f005 f90c 	bl	8007926 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695a      	ldr	r2, [r3, #20]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800271c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f003 f869 	bl	80057fa <USB_ReadInterrupts>
 8002728:	4603      	mov	r3, r0
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	2b08      	cmp	r3, #8
 8002730:	d10a      	bne.n	8002748 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f005 f8e9 	bl	800790a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695a      	ldr	r2, [r3, #20]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f002 0208 	and.w	r2, r2, #8
 8002746:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f003 f854 	bl	80057fa <USB_ReadInterrupts>
 8002752:	4603      	mov	r3, r0
 8002754:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002758:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800275c:	d10f      	bne.n	800277e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	b2db      	uxtb	r3, r3
 8002766:	4619      	mov	r1, r3
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f005 f94b 	bl	8007a04 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	695a      	ldr	r2, [r3, #20]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800277c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f003 f839 	bl	80057fa <USB_ReadInterrupts>
 8002788:	4603      	mov	r3, r0
 800278a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800278e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002792:	d10f      	bne.n	80027b4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	b2db      	uxtb	r3, r3
 800279c:	4619      	mov	r1, r3
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f005 f91e 	bl	80079e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	695a      	ldr	r2, [r3, #20]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80027b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f003 f81e 	bl	80057fa <USB_ReadInterrupts>
 80027be:	4603      	mov	r3, r0
 80027c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80027c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c8:	d10a      	bne.n	80027e0 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f005 f92c 	bl	8007a28 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	695a      	ldr	r2, [r3, #20]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80027de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f003 f808 	bl	80057fa <USB_ReadInterrupts>
 80027ea:	4603      	mov	r3, r0
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b04      	cmp	r3, #4
 80027f2:	d115      	bne.n	8002820 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	2b00      	cmp	r3, #0
 8002804:	d002      	beq.n	800280c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f005 f91c 	bl	8007a44 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6859      	ldr	r1, [r3, #4]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	430a      	orrs	r2, r1
 800281a:	605a      	str	r2, [r3, #4]
 800281c:	e000      	b.n	8002820 <HAL_PCD_IRQHandler+0x75e>
      return;
 800281e:	bf00      	nop
    }
  }
}
 8002820:	3734      	adds	r7, #52	; 0x34
 8002822:	46bd      	mov	sp, r7
 8002824:	bd90      	pop	{r4, r7, pc}

08002826 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
 800282e:	460b      	mov	r3, r1
 8002830:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_PCD_SetAddress+0x1a>
 800283c:	2302      	movs	r3, #2
 800283e:	e013      	b.n	8002868 <HAL_PCD_SetAddress+0x42>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	78fa      	ldrb	r2, [r7, #3]
 800284c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	78fa      	ldrb	r2, [r7, #3]
 8002856:	4611      	mov	r1, r2
 8002858:	4618      	mov	r0, r3
 800285a:	f002 ff66 	bl	800572a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	4608      	mov	r0, r1
 800287a:	4611      	mov	r1, r2
 800287c:	461a      	mov	r2, r3
 800287e:	4603      	mov	r3, r0
 8002880:	70fb      	strb	r3, [r7, #3]
 8002882:	460b      	mov	r3, r1
 8002884:	803b      	strh	r3, [r7, #0]
 8002886:	4613      	mov	r3, r2
 8002888:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800288a:	2300      	movs	r3, #0
 800288c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800288e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002892:	2b00      	cmp	r3, #0
 8002894:	da0f      	bge.n	80028b6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002896:	78fb      	ldrb	r3, [r7, #3]
 8002898:	f003 020f 	and.w	r2, r3, #15
 800289c:	4613      	mov	r3, r2
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	1a9b      	subs	r3, r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	3338      	adds	r3, #56	; 0x38
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	4413      	add	r3, r2
 80028aa:	3304      	adds	r3, #4
 80028ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2201      	movs	r2, #1
 80028b2:	705a      	strb	r2, [r3, #1]
 80028b4:	e00f      	b.n	80028d6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028b6:	78fb      	ldrb	r3, [r7, #3]
 80028b8:	f003 020f 	and.w	r2, r3, #15
 80028bc:	4613      	mov	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	1a9b      	subs	r3, r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	4413      	add	r3, r2
 80028cc:	3304      	adds	r3, #4
 80028ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80028d6:	78fb      	ldrb	r3, [r7, #3]
 80028d8:	f003 030f 	and.w	r3, r3, #15
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80028e2:	883a      	ldrh	r2, [r7, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	78ba      	ldrb	r2, [r7, #2]
 80028ec:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	785b      	ldrb	r3, [r3, #1]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d004      	beq.n	8002900 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002900:	78bb      	ldrb	r3, [r7, #2]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d102      	bne.n	800290c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002912:	2b01      	cmp	r3, #1
 8002914:	d101      	bne.n	800291a <HAL_PCD_EP_Open+0xaa>
 8002916:	2302      	movs	r3, #2
 8002918:	e00e      	b.n	8002938 <HAL_PCD_EP_Open+0xc8>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68f9      	ldr	r1, [r7, #12]
 8002928:	4618      	mov	r0, r3
 800292a:	f002 f8d1 	bl	8004ad0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002936:	7afb      	ldrb	r3, [r7, #11]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	460b      	mov	r3, r1
 800294a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800294c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002950:	2b00      	cmp	r3, #0
 8002952:	da0f      	bge.n	8002974 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002954:	78fb      	ldrb	r3, [r7, #3]
 8002956:	f003 020f 	and.w	r2, r3, #15
 800295a:	4613      	mov	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	1a9b      	subs	r3, r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	3338      	adds	r3, #56	; 0x38
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	4413      	add	r3, r2
 8002968:	3304      	adds	r3, #4
 800296a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2201      	movs	r2, #1
 8002970:	705a      	strb	r2, [r3, #1]
 8002972:	e00f      	b.n	8002994 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002974:	78fb      	ldrb	r3, [r7, #3]
 8002976:	f003 020f 	and.w	r2, r3, #15
 800297a:	4613      	mov	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	1a9b      	subs	r3, r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	4413      	add	r3, r2
 800298a:	3304      	adds	r3, #4
 800298c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002994:	78fb      	ldrb	r3, [r7, #3]
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	b2da      	uxtb	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d101      	bne.n	80029ae <HAL_PCD_EP_Close+0x6e>
 80029aa:	2302      	movs	r3, #2
 80029ac:	e00e      	b.n	80029cc <HAL_PCD_EP_Close+0x8c>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68f9      	ldr	r1, [r7, #12]
 80029bc:	4618      	mov	r0, r3
 80029be:	f002 f90f 	bl	8004be0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	607a      	str	r2, [r7, #4]
 80029de:	603b      	str	r3, [r7, #0]
 80029e0:	460b      	mov	r3, r1
 80029e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029e4:	7afb      	ldrb	r3, [r7, #11]
 80029e6:	f003 020f 	and.w	r2, r3, #15
 80029ea:	4613      	mov	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	1a9b      	subs	r3, r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	4413      	add	r3, r2
 80029fa:	3304      	adds	r3, #4
 80029fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	2200      	movs	r2, #0
 8002a14:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a16:	7afb      	ldrb	r3, [r7, #11]
 8002a18:	f003 030f 	and.w	r3, r3, #15
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d102      	bne.n	8002a30 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a30:	7afb      	ldrb	r3, [r7, #11]
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d109      	bne.n	8002a4e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6818      	ldr	r0, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	461a      	mov	r2, r3
 8002a46:	6979      	ldr	r1, [r7, #20]
 8002a48:	f002 fbea 	bl	8005220 <USB_EP0StartXfer>
 8002a4c:	e008      	b.n	8002a60 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6818      	ldr	r0, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	461a      	mov	r2, r3
 8002a5a:	6979      	ldr	r1, [r7, #20]
 8002a5c:	f002 f99c 	bl	8004d98 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	460b      	mov	r3, r1
 8002a74:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a76:	78fb      	ldrb	r3, [r7, #3]
 8002a78:	f003 020f 	and.w	r2, r3, #15
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	1a9b      	subs	r3, r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	440b      	add	r3, r1
 8002a88:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002a8c:	681b      	ldr	r3, [r3, #0]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b086      	sub	sp, #24
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	60f8      	str	r0, [r7, #12]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	603b      	str	r3, [r7, #0]
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aaa:	7afb      	ldrb	r3, [r7, #11]
 8002aac:	f003 020f 	and.w	r2, r3, #15
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	1a9b      	subs	r3, r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	3338      	adds	r3, #56	; 0x38
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4413      	add	r3, r2
 8002abe:	3304      	adds	r3, #4
 8002ac0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ada:	7afb      	ldrb	r3, [r7, #11]
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d102      	bne.n	8002af4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002af4:	7afb      	ldrb	r3, [r7, #11]
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d109      	bne.n	8002b12 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6818      	ldr	r0, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	461a      	mov	r2, r3
 8002b0a:	6979      	ldr	r1, [r7, #20]
 8002b0c:	f002 fb88 	bl	8005220 <USB_EP0StartXfer>
 8002b10:	e008      	b.n	8002b24 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6818      	ldr	r0, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	6979      	ldr	r1, [r7, #20]
 8002b20:	f002 f93a 	bl	8004d98 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b084      	sub	sp, #16
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	460b      	mov	r3, r1
 8002b38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b3a:	78fb      	ldrb	r3, [r7, #3]
 8002b3c:	f003 020f 	and.w	r2, r3, #15
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d901      	bls.n	8002b4c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e050      	b.n	8002bee <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	da0f      	bge.n	8002b74 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b54:	78fb      	ldrb	r3, [r7, #3]
 8002b56:	f003 020f 	and.w	r2, r3, #15
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	1a9b      	subs	r3, r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	3338      	adds	r3, #56	; 0x38
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	4413      	add	r3, r2
 8002b68:	3304      	adds	r3, #4
 8002b6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	705a      	strb	r2, [r3, #1]
 8002b72:	e00d      	b.n	8002b90 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b74:	78fa      	ldrb	r2, [r7, #3]
 8002b76:	4613      	mov	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	1a9b      	subs	r3, r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	4413      	add	r3, r2
 8002b86:	3304      	adds	r3, #4
 8002b88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2201      	movs	r2, #1
 8002b94:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b96:	78fb      	ldrb	r3, [r7, #3]
 8002b98:	f003 030f 	and.w	r3, r3, #15
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d101      	bne.n	8002bb0 <HAL_PCD_EP_SetStall+0x82>
 8002bac:	2302      	movs	r3, #2
 8002bae:	e01e      	b.n	8002bee <HAL_PCD_EP_SetStall+0xc0>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68f9      	ldr	r1, [r7, #12]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f002 fcdf 	bl	8005582 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bc4:	78fb      	ldrb	r3, [r7, #3]
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10a      	bne.n	8002be4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	b2d9      	uxtb	r1, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002bde:	461a      	mov	r2, r3
 8002be0:	f002 fed0 	bl	8005984 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b084      	sub	sp, #16
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c02:	78fb      	ldrb	r3, [r7, #3]
 8002c04:	f003 020f 	and.w	r2, r3, #15
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d901      	bls.n	8002c14 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e042      	b.n	8002c9a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	da0f      	bge.n	8002c3c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c1c:	78fb      	ldrb	r3, [r7, #3]
 8002c1e:	f003 020f 	and.w	r2, r3, #15
 8002c22:	4613      	mov	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	3338      	adds	r3, #56	; 0x38
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	4413      	add	r3, r2
 8002c30:	3304      	adds	r3, #4
 8002c32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2201      	movs	r2, #1
 8002c38:	705a      	strb	r2, [r3, #1]
 8002c3a:	e00f      	b.n	8002c5c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c3c:	78fb      	ldrb	r3, [r7, #3]
 8002c3e:	f003 020f 	and.w	r2, r3, #15
 8002c42:	4613      	mov	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	1a9b      	subs	r3, r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	4413      	add	r3, r2
 8002c52:	3304      	adds	r3, #4
 8002c54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c62:	78fb      	ldrb	r3, [r7, #3]
 8002c64:	f003 030f 	and.w	r3, r3, #15
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d101      	bne.n	8002c7c <HAL_PCD_EP_ClrStall+0x86>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e00e      	b.n	8002c9a <HAL_PCD_EP_ClrStall+0xa4>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68f9      	ldr	r1, [r7, #12]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f002 fce7 	bl	800565e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b08a      	sub	sp, #40	; 0x28
 8002ca6:	af02      	add	r7, sp, #8
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	1a9b      	subs	r3, r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	3338      	adds	r3, #56	; 0x38
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	699a      	ldr	r2, [r3, #24]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d901      	bls.n	8002cda <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e06c      	b.n	8002db4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	695a      	ldr	r2, [r3, #20]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	69fa      	ldr	r2, [r7, #28]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d902      	bls.n	8002cf6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	3303      	adds	r3, #3
 8002cfa:	089b      	lsrs	r3, r3, #2
 8002cfc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cfe:	e02b      	b.n	8002d58 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	695a      	ldr	r2, [r3, #20]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	69fa      	ldr	r2, [r7, #28]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d902      	bls.n	8002d1c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	3303      	adds	r3, #3
 8002d20:	089b      	lsrs	r3, r3, #2
 8002d22:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	68d9      	ldr	r1, [r3, #12]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	4603      	mov	r3, r0
 8002d3a:	6978      	ldr	r0, [r7, #20]
 8002d3c:	f002 fbc3 	bl	80054c6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	441a      	add	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	699a      	ldr	r2, [r3, #24]
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	441a      	add	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	015a      	lsls	r2, r3, #5
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	4413      	add	r3, r2
 8002d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d809      	bhi.n	8002d82 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	699a      	ldr	r2, [r3, #24]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d203      	bcs.n	8002d82 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1be      	bne.n	8002d00 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	695a      	ldr	r2, [r3, #20]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d811      	bhi.n	8002db2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	f003 030f 	and.w	r3, r3, #15
 8002d94:	2201      	movs	r2, #1
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002da2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	43db      	mvns	r3, r3
 8002da8:	6939      	ldr	r1, [r7, #16]
 8002daa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002dae:	4013      	ands	r3, r2
 8002db0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3720      	adds	r7, #32
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	333c      	adds	r3, #60	; 0x3c
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	015a      	lsls	r2, r3, #5
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	f040 80a0 	bne.w	8002f34 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d015      	beq.n	8002e2a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	4a72      	ldr	r2, [pc, #456]	; (8002fcc <PCD_EP_OutXfrComplete_int+0x210>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	f240 80dd 	bls.w	8002fc2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 80d7 	beq.w	8002fc2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	015a      	lsls	r2, r3, #5
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e20:	461a      	mov	r2, r3
 8002e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e26:	6093      	str	r3, [r2, #8]
 8002e28:	e0cb      	b.n	8002fc2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	f003 0320 	and.w	r3, r3, #32
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d009      	beq.n	8002e48 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e40:	461a      	mov	r2, r3
 8002e42:	2320      	movs	r3, #32
 8002e44:	6093      	str	r3, [r2, #8]
 8002e46:	e0bc      	b.n	8002fc2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f040 80b7 	bne.w	8002fc2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4a5d      	ldr	r2, [pc, #372]	; (8002fcc <PCD_EP_OutXfrComplete_int+0x210>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d90f      	bls.n	8002e7c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	015a      	lsls	r2, r3, #5
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e72:	461a      	mov	r2, r3
 8002e74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e78:	6093      	str	r3, [r2, #8]
 8002e7a:	e0a2      	b.n	8002fc2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	4613      	mov	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	1a9b      	subs	r3, r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002e8e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	0159      	lsls	r1, r3, #5
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	440b      	add	r3, r1
 8002e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002ea2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4403      	add	r3, r0
 8002eb2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002eb6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	1a9b      	subs	r3, r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002eca:	6819      	ldr	r1, [r3, #0]
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	1a9b      	subs	r3, r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4403      	add	r3, r0
 8002eda:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4419      	add	r1, r3
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	1a9b      	subs	r3, r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4403      	add	r3, r0
 8002ef0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ef4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d114      	bne.n	8002f26 <PCD_EP_OutXfrComplete_int+0x16a>
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	4613      	mov	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	1a9b      	subs	r3, r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d108      	bne.n	8002f26 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6818      	ldr	r0, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f1e:	461a      	mov	r2, r3
 8002f20:	2101      	movs	r1, #1
 8002f22:	f002 fd2f 	bl	8005984 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f004 fcb7 	bl	80078a0 <HAL_PCD_DataOutStageCallback>
 8002f32:	e046      	b.n	8002fc2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4a26      	ldr	r2, [pc, #152]	; (8002fd0 <PCD_EP_OutXfrComplete_int+0x214>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d124      	bne.n	8002f86 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00a      	beq.n	8002f5c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	015a      	lsls	r2, r3, #5
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f52:	461a      	mov	r2, r3
 8002f54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f58:	6093      	str	r3, [r2, #8]
 8002f5a:	e032      	b.n	8002fc2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f003 0320 	and.w	r3, r3, #32
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d008      	beq.n	8002f78 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	015a      	lsls	r2, r3, #5
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f72:	461a      	mov	r2, r3
 8002f74:	2320      	movs	r3, #32
 8002f76:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f004 fc8e 	bl	80078a0 <HAL_PCD_DataOutStageCallback>
 8002f84:	e01d      	b.n	8002fc2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d114      	bne.n	8002fb6 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	4613      	mov	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	1a9b      	subs	r3, r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d108      	bne.n	8002fb6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6818      	ldr	r0, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fae:	461a      	mov	r2, r3
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	f002 fce7 	bl	8005984 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	4619      	mov	r1, r3
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f004 fc6f 	bl	80078a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	4f54300a 	.word	0x4f54300a
 8002fd0:	4f54310a 	.word	0x4f54310a

08002fd4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	333c      	adds	r3, #60	; 0x3c
 8002fec:	3304      	adds	r3, #4
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	015a      	lsls	r2, r3, #5
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4a15      	ldr	r2, [pc, #84]	; (800305c <PCD_EP_OutSetupPacket_int+0x88>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d90e      	bls.n	8003028 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003010:	2b00      	cmp	r3, #0
 8003012:	d009      	beq.n	8003028 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4413      	add	r3, r2
 800301c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003020:	461a      	mov	r2, r3
 8003022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003026:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f004 fc27 	bl	800787c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	4a0a      	ldr	r2, [pc, #40]	; (800305c <PCD_EP_OutSetupPacket_int+0x88>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d90c      	bls.n	8003050 <PCD_EP_OutSetupPacket_int+0x7c>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d108      	bne.n	8003050 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003048:	461a      	mov	r2, r3
 800304a:	2101      	movs	r1, #1
 800304c:	f002 fc9a 	bl	8005984 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	4f54300a 	.word	0x4f54300a

08003060 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	70fb      	strb	r3, [r7, #3]
 800306c:	4613      	mov	r3, r2
 800306e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003078:	78fb      	ldrb	r3, [r7, #3]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d107      	bne.n	800308e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800307e:	883b      	ldrh	r3, [r7, #0]
 8003080:	0419      	lsls	r1, r3, #16
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	430a      	orrs	r2, r1
 800308a:	629a      	str	r2, [r3, #40]	; 0x28
 800308c:	e028      	b.n	80030e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003094:	0c1b      	lsrs	r3, r3, #16
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	4413      	add	r3, r2
 800309a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800309c:	2300      	movs	r3, #0
 800309e:	73fb      	strb	r3, [r7, #15]
 80030a0:	e00d      	b.n	80030be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	3340      	adds	r3, #64	; 0x40
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	0c1b      	lsrs	r3, r3, #16
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	4413      	add	r3, r2
 80030b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
 80030ba:	3301      	adds	r3, #1
 80030bc:	73fb      	strb	r3, [r7, #15]
 80030be:	7bfa      	ldrb	r2, [r7, #15]
 80030c0:	78fb      	ldrb	r3, [r7, #3]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d3ec      	bcc.n	80030a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80030c8:	883b      	ldrh	r3, [r7, #0]
 80030ca:	0418      	lsls	r0, r3, #16
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6819      	ldr	r1, [r3, #0]
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	4302      	orrs	r2, r0
 80030d8:	3340      	adds	r3, #64	; 0x40
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
 80030f6:	460b      	mov	r3, r1
 80030f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	887a      	ldrh	r2, [r7, #2]
 8003100:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e264      	b.n	8003604 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d075      	beq.n	8003232 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003146:	4ba3      	ldr	r3, [pc, #652]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	2b04      	cmp	r3, #4
 8003150:	d00c      	beq.n	800316c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003152:	4ba0      	ldr	r3, [pc, #640]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800315a:	2b08      	cmp	r3, #8
 800315c:	d112      	bne.n	8003184 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800315e:	4b9d      	ldr	r3, [pc, #628]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003166:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800316a:	d10b      	bne.n	8003184 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800316c:	4b99      	ldr	r3, [pc, #612]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d05b      	beq.n	8003230 <HAL_RCC_OscConfig+0x108>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d157      	bne.n	8003230 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e23f      	b.n	8003604 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800318c:	d106      	bne.n	800319c <HAL_RCC_OscConfig+0x74>
 800318e:	4b91      	ldr	r3, [pc, #580]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a90      	ldr	r2, [pc, #576]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 8003194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	e01d      	b.n	80031d8 <HAL_RCC_OscConfig+0xb0>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031a4:	d10c      	bne.n	80031c0 <HAL_RCC_OscConfig+0x98>
 80031a6:	4b8b      	ldr	r3, [pc, #556]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a8a      	ldr	r2, [pc, #552]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80031ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	4b88      	ldr	r3, [pc, #544]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a87      	ldr	r2, [pc, #540]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80031b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	e00b      	b.n	80031d8 <HAL_RCC_OscConfig+0xb0>
 80031c0:	4b84      	ldr	r3, [pc, #528]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a83      	ldr	r2, [pc, #524]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80031c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	4b81      	ldr	r3, [pc, #516]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a80      	ldr	r2, [pc, #512]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80031d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d013      	beq.n	8003208 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e0:	f7fe fb10 	bl	8001804 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031e8:	f7fe fb0c 	bl	8001804 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b64      	cmp	r3, #100	; 0x64
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e204      	b.n	8003604 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fa:	4b76      	ldr	r3, [pc, #472]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f0      	beq.n	80031e8 <HAL_RCC_OscConfig+0xc0>
 8003206:	e014      	b.n	8003232 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003208:	f7fe fafc 	bl	8001804 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003210:	f7fe faf8 	bl	8001804 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b64      	cmp	r3, #100	; 0x64
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e1f0      	b.n	8003604 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003222:	4b6c      	ldr	r3, [pc, #432]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0xe8>
 800322e:	e000      	b.n	8003232 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d063      	beq.n	8003306 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800323e:	4b65      	ldr	r3, [pc, #404]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 030c 	and.w	r3, r3, #12
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00b      	beq.n	8003262 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800324a:	4b62      	ldr	r3, [pc, #392]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003252:	2b08      	cmp	r3, #8
 8003254:	d11c      	bne.n	8003290 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003256:	4b5f      	ldr	r3, [pc, #380]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d116      	bne.n	8003290 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003262:	4b5c      	ldr	r3, [pc, #368]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d005      	beq.n	800327a <HAL_RCC_OscConfig+0x152>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d001      	beq.n	800327a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e1c4      	b.n	8003604 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800327a:	4b56      	ldr	r3, [pc, #344]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	4952      	ldr	r1, [pc, #328]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 800328a:	4313      	orrs	r3, r2
 800328c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800328e:	e03a      	b.n	8003306 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d020      	beq.n	80032da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003298:	4b4f      	ldr	r3, [pc, #316]	; (80033d8 <HAL_RCC_OscConfig+0x2b0>)
 800329a:	2201      	movs	r2, #1
 800329c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329e:	f7fe fab1 	bl	8001804 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a4:	e008      	b.n	80032b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032a6:	f7fe faad 	bl	8001804 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e1a5      	b.n	8003604 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b8:	4b46      	ldr	r3, [pc, #280]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0f0      	beq.n	80032a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c4:	4b43      	ldr	r3, [pc, #268]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	4940      	ldr	r1, [pc, #256]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	600b      	str	r3, [r1, #0]
 80032d8:	e015      	b.n	8003306 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032da:	4b3f      	ldr	r3, [pc, #252]	; (80033d8 <HAL_RCC_OscConfig+0x2b0>)
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e0:	f7fe fa90 	bl	8001804 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032e8:	f7fe fa8c 	bl	8001804 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e184      	b.n	8003604 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032fa:	4b36      	ldr	r3, [pc, #216]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b00      	cmp	r3, #0
 8003310:	d030      	beq.n	8003374 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d016      	beq.n	8003348 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800331a:	4b30      	ldr	r3, [pc, #192]	; (80033dc <HAL_RCC_OscConfig+0x2b4>)
 800331c:	2201      	movs	r2, #1
 800331e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003320:	f7fe fa70 	bl	8001804 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003328:	f7fe fa6c 	bl	8001804 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e164      	b.n	8003604 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800333a:	4b26      	ldr	r3, [pc, #152]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 800333c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0f0      	beq.n	8003328 <HAL_RCC_OscConfig+0x200>
 8003346:	e015      	b.n	8003374 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003348:	4b24      	ldr	r3, [pc, #144]	; (80033dc <HAL_RCC_OscConfig+0x2b4>)
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800334e:	f7fe fa59 	bl	8001804 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003356:	f7fe fa55 	bl	8001804 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e14d      	b.n	8003604 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003368:	4b1a      	ldr	r3, [pc, #104]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 800336a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1f0      	bne.n	8003356 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 80a0 	beq.w	80034c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003382:	2300      	movs	r3, #0
 8003384:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003386:	4b13      	ldr	r3, [pc, #76]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10f      	bne.n	80033b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003392:	2300      	movs	r3, #0
 8003394:	60bb      	str	r3, [r7, #8]
 8003396:	4b0f      	ldr	r3, [pc, #60]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	4a0e      	ldr	r2, [pc, #56]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 800339c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a0:	6413      	str	r3, [r2, #64]	; 0x40
 80033a2:	4b0c      	ldr	r3, [pc, #48]	; (80033d4 <HAL_RCC_OscConfig+0x2ac>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033aa:	60bb      	str	r3, [r7, #8]
 80033ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ae:	2301      	movs	r3, #1
 80033b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b2:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <HAL_RCC_OscConfig+0x2b8>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d121      	bne.n	8003402 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033be:	4b08      	ldr	r3, [pc, #32]	; (80033e0 <HAL_RCC_OscConfig+0x2b8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a07      	ldr	r2, [pc, #28]	; (80033e0 <HAL_RCC_OscConfig+0x2b8>)
 80033c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ca:	f7fe fa1b 	bl	8001804 <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d0:	e011      	b.n	80033f6 <HAL_RCC_OscConfig+0x2ce>
 80033d2:	bf00      	nop
 80033d4:	40023800 	.word	0x40023800
 80033d8:	42470000 	.word	0x42470000
 80033dc:	42470e80 	.word	0x42470e80
 80033e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033e4:	f7fe fa0e 	bl	8001804 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e106      	b.n	8003604 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f6:	4b85      	ldr	r3, [pc, #532]	; (800360c <HAL_RCC_OscConfig+0x4e4>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0f0      	beq.n	80033e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d106      	bne.n	8003418 <HAL_RCC_OscConfig+0x2f0>
 800340a:	4b81      	ldr	r3, [pc, #516]	; (8003610 <HAL_RCC_OscConfig+0x4e8>)
 800340c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340e:	4a80      	ldr	r2, [pc, #512]	; (8003610 <HAL_RCC_OscConfig+0x4e8>)
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	6713      	str	r3, [r2, #112]	; 0x70
 8003416:	e01c      	b.n	8003452 <HAL_RCC_OscConfig+0x32a>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2b05      	cmp	r3, #5
 800341e:	d10c      	bne.n	800343a <HAL_RCC_OscConfig+0x312>
 8003420:	4b7b      	ldr	r3, [pc, #492]	; (8003610 <HAL_RCC_OscConfig+0x4e8>)
 8003422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003424:	4a7a      	ldr	r2, [pc, #488]	; (8003610 <HAL_RCC_OscConfig+0x4e8>)
 8003426:	f043 0304 	orr.w	r3, r3, #4
 800342a:	6713      	str	r3, [r2, #112]	; 0x70
 800342c:	4b78      	ldr	r3, [pc, #480]	; (8003610 <HAL_RCC_OscConfig+0x4e8>)
 800342e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003430:	4a77      	ldr	r2, [pc, #476]	; (8003610 <HAL_RCC_OscConfig+0x4e8>)
 8003432:	f043 0301 	orr.w	r3, r3, #1
 8003436:	6713      	str	r3, [r2, #112]	; 0x70
 8003438:	e00b      	b.n	8003452 <HAL_RCC_OscConfig+0x32a>
 800343a:	4b75      	ldr	r3, [pc, #468]	; (8003610 <HAL_RCC_OscConfig+0x4e8>)
 800343c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343e:	4a74      	ldr	r2, [pc, #464]	; (8003610 <HAL_RCC_OscConfig+0x4e8>)
 8003440:	f023 0301 	bic.w	r3, r3, #1
 8003444:	6713      	str	r3, [r2, #112]	; 0x70
 8003446:	4b72      	ldr	r3, [pc, #456]	; (8003610 <HAL_RCC_OscConfig+0x4e8>)
 8003448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344a:	4a71      	ldr	r2, [pc, #452]	; (8003610 <HAL_RCC_OscConfig+0x4e8>)
 800344c:	f023 0304 	bic.w	r3, r3, #4
 8003450:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d015      	beq.n	8003486 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800345a:	f7fe f9d3 	bl	8001804 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003460:	e00a      	b.n	8003478 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003462:	f7fe f9cf 	bl	8001804 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003470:	4293      	cmp	r3, r2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e0c5      	b.n	8003604 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003478:	4b65      	ldr	r3, [pc, #404]	; (8003610 <HAL_RCC_OscConfig+0x4e8>)
 800347a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0ee      	beq.n	8003462 <HAL_RCC_OscConfig+0x33a>
 8003484:	e014      	b.n	80034b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003486:	f7fe f9bd 	bl	8001804 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800348c:	e00a      	b.n	80034a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800348e:	f7fe f9b9 	bl	8001804 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	f241 3288 	movw	r2, #5000	; 0x1388
 800349c:	4293      	cmp	r3, r2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e0af      	b.n	8003604 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a4:	4b5a      	ldr	r3, [pc, #360]	; (8003610 <HAL_RCC_OscConfig+0x4e8>)
 80034a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1ee      	bne.n	800348e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034b0:	7dfb      	ldrb	r3, [r7, #23]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d105      	bne.n	80034c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b6:	4b56      	ldr	r3, [pc, #344]	; (8003610 <HAL_RCC_OscConfig+0x4e8>)
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	4a55      	ldr	r2, [pc, #340]	; (8003610 <HAL_RCC_OscConfig+0x4e8>)
 80034bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 809b 	beq.w	8003602 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034cc:	4b50      	ldr	r3, [pc, #320]	; (8003610 <HAL_RCC_OscConfig+0x4e8>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 030c 	and.w	r3, r3, #12
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d05c      	beq.n	8003592 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d141      	bne.n	8003564 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e0:	4b4c      	ldr	r3, [pc, #304]	; (8003614 <HAL_RCC_OscConfig+0x4ec>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e6:	f7fe f98d 	bl	8001804 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ee:	f7fe f989 	bl	8001804 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e081      	b.n	8003604 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003500:	4b43      	ldr	r3, [pc, #268]	; (8003610 <HAL_RCC_OscConfig+0x4e8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1f0      	bne.n	80034ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	69da      	ldr	r2, [r3, #28]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	431a      	orrs	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	019b      	lsls	r3, r3, #6
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003522:	085b      	lsrs	r3, r3, #1
 8003524:	3b01      	subs	r3, #1
 8003526:	041b      	lsls	r3, r3, #16
 8003528:	431a      	orrs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352e:	061b      	lsls	r3, r3, #24
 8003530:	4937      	ldr	r1, [pc, #220]	; (8003610 <HAL_RCC_OscConfig+0x4e8>)
 8003532:	4313      	orrs	r3, r2
 8003534:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003536:	4b37      	ldr	r3, [pc, #220]	; (8003614 <HAL_RCC_OscConfig+0x4ec>)
 8003538:	2201      	movs	r2, #1
 800353a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353c:	f7fe f962 	bl	8001804 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003544:	f7fe f95e 	bl	8001804 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e056      	b.n	8003604 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003556:	4b2e      	ldr	r3, [pc, #184]	; (8003610 <HAL_RCC_OscConfig+0x4e8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f0      	beq.n	8003544 <HAL_RCC_OscConfig+0x41c>
 8003562:	e04e      	b.n	8003602 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003564:	4b2b      	ldr	r3, [pc, #172]	; (8003614 <HAL_RCC_OscConfig+0x4ec>)
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356a:	f7fe f94b 	bl	8001804 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003572:	f7fe f947 	bl	8001804 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e03f      	b.n	8003604 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003584:	4b22      	ldr	r3, [pc, #136]	; (8003610 <HAL_RCC_OscConfig+0x4e8>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1f0      	bne.n	8003572 <HAL_RCC_OscConfig+0x44a>
 8003590:	e037      	b.n	8003602 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e032      	b.n	8003604 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800359e:	4b1c      	ldr	r3, [pc, #112]	; (8003610 <HAL_RCC_OscConfig+0x4e8>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d028      	beq.n	80035fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d121      	bne.n	80035fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d11a      	bne.n	80035fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035ce:	4013      	ands	r3, r2
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035d4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d111      	bne.n	80035fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e4:	085b      	lsrs	r3, r3, #1
 80035e6:	3b01      	subs	r3, #1
 80035e8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d107      	bne.n	80035fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d001      	beq.n	8003602 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e000      	b.n	8003604 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40007000 	.word	0x40007000
 8003610:	40023800 	.word	0x40023800
 8003614:	42470060 	.word	0x42470060

08003618 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e0cc      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800362c:	4b68      	ldr	r3, [pc, #416]	; (80037d0 <HAL_RCC_ClockConfig+0x1b8>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0307 	and.w	r3, r3, #7
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d90c      	bls.n	8003654 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363a:	4b65      	ldr	r3, [pc, #404]	; (80037d0 <HAL_RCC_ClockConfig+0x1b8>)
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003642:	4b63      	ldr	r3, [pc, #396]	; (80037d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d001      	beq.n	8003654 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0b8      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d020      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800366c:	4b59      	ldr	r3, [pc, #356]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	4a58      	ldr	r2, [pc, #352]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003676:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003684:	4b53      	ldr	r3, [pc, #332]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	4a52      	ldr	r2, [pc, #328]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800368e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003690:	4b50      	ldr	r3, [pc, #320]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	494d      	ldr	r1, [pc, #308]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d044      	beq.n	8003738 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d107      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b6:	4b47      	ldr	r3, [pc, #284]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d119      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e07f      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d003      	beq.n	80036d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036d2:	2b03      	cmp	r3, #3
 80036d4:	d107      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d6:	4b3f      	ldr	r3, [pc, #252]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d109      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e06f      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e6:	4b3b      	ldr	r3, [pc, #236]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e067      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036f6:	4b37      	ldr	r3, [pc, #220]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f023 0203 	bic.w	r2, r3, #3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	4934      	ldr	r1, [pc, #208]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003704:	4313      	orrs	r3, r2
 8003706:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003708:	f7fe f87c 	bl	8001804 <HAL_GetTick>
 800370c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800370e:	e00a      	b.n	8003726 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003710:	f7fe f878 	bl	8001804 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	f241 3288 	movw	r2, #5000	; 0x1388
 800371e:	4293      	cmp	r3, r2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e04f      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003726:	4b2b      	ldr	r3, [pc, #172]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 020c 	and.w	r2, r3, #12
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	429a      	cmp	r2, r3
 8003736:	d1eb      	bne.n	8003710 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003738:	4b25      	ldr	r3, [pc, #148]	; (80037d0 <HAL_RCC_ClockConfig+0x1b8>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	429a      	cmp	r2, r3
 8003744:	d20c      	bcs.n	8003760 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003746:	4b22      	ldr	r3, [pc, #136]	; (80037d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800374e:	4b20      	ldr	r3, [pc, #128]	; (80037d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	429a      	cmp	r2, r3
 800375a:	d001      	beq.n	8003760 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e032      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d008      	beq.n	800377e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800376c:	4b19      	ldr	r3, [pc, #100]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	4916      	ldr	r1, [pc, #88]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	4313      	orrs	r3, r2
 800377c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d009      	beq.n	800379e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800378a:	4b12      	ldr	r3, [pc, #72]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	490e      	ldr	r1, [pc, #56]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	4313      	orrs	r3, r2
 800379c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800379e:	f000 f821 	bl	80037e4 <HAL_RCC_GetSysClockFreq>
 80037a2:	4602      	mov	r2, r0
 80037a4:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	091b      	lsrs	r3, r3, #4
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	490a      	ldr	r1, [pc, #40]	; (80037d8 <HAL_RCC_ClockConfig+0x1c0>)
 80037b0:	5ccb      	ldrb	r3, [r1, r3]
 80037b2:	fa22 f303 	lsr.w	r3, r2, r3
 80037b6:	4a09      	ldr	r2, [pc, #36]	; (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 80037b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037ba:	4b09      	ldr	r3, [pc, #36]	; (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fd ffdc 	bl	800177c <HAL_InitTick>

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40023c00 	.word	0x40023c00
 80037d4:	40023800 	.word	0x40023800
 80037d8:	08008748 	.word	0x08008748
 80037dc:	20000000 	.word	0x20000000
 80037e0:	20000004 	.word	0x20000004

080037e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037e8:	b084      	sub	sp, #16
 80037ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	607b      	str	r3, [r7, #4]
 80037f0:	2300      	movs	r3, #0
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	2300      	movs	r3, #0
 80037f6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037fc:	4b67      	ldr	r3, [pc, #412]	; (800399c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f003 030c 	and.w	r3, r3, #12
 8003804:	2b08      	cmp	r3, #8
 8003806:	d00d      	beq.n	8003824 <HAL_RCC_GetSysClockFreq+0x40>
 8003808:	2b08      	cmp	r3, #8
 800380a:	f200 80bd 	bhi.w	8003988 <HAL_RCC_GetSysClockFreq+0x1a4>
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <HAL_RCC_GetSysClockFreq+0x34>
 8003812:	2b04      	cmp	r3, #4
 8003814:	d003      	beq.n	800381e <HAL_RCC_GetSysClockFreq+0x3a>
 8003816:	e0b7      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003818:	4b61      	ldr	r3, [pc, #388]	; (80039a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800381a:	60bb      	str	r3, [r7, #8]
       break;
 800381c:	e0b7      	b.n	800398e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800381e:	4b61      	ldr	r3, [pc, #388]	; (80039a4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003820:	60bb      	str	r3, [r7, #8]
      break;
 8003822:	e0b4      	b.n	800398e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003824:	4b5d      	ldr	r3, [pc, #372]	; (800399c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800382c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800382e:	4b5b      	ldr	r3, [pc, #364]	; (800399c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d04d      	beq.n	80038d6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800383a:	4b58      	ldr	r3, [pc, #352]	; (800399c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	099b      	lsrs	r3, r3, #6
 8003840:	461a      	mov	r2, r3
 8003842:	f04f 0300 	mov.w	r3, #0
 8003846:	f240 10ff 	movw	r0, #511	; 0x1ff
 800384a:	f04f 0100 	mov.w	r1, #0
 800384e:	ea02 0800 	and.w	r8, r2, r0
 8003852:	ea03 0901 	and.w	r9, r3, r1
 8003856:	4640      	mov	r0, r8
 8003858:	4649      	mov	r1, r9
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	014b      	lsls	r3, r1, #5
 8003864:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003868:	0142      	lsls	r2, r0, #5
 800386a:	4610      	mov	r0, r2
 800386c:	4619      	mov	r1, r3
 800386e:	ebb0 0008 	subs.w	r0, r0, r8
 8003872:	eb61 0109 	sbc.w	r1, r1, r9
 8003876:	f04f 0200 	mov.w	r2, #0
 800387a:	f04f 0300 	mov.w	r3, #0
 800387e:	018b      	lsls	r3, r1, #6
 8003880:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003884:	0182      	lsls	r2, r0, #6
 8003886:	1a12      	subs	r2, r2, r0
 8003888:	eb63 0301 	sbc.w	r3, r3, r1
 800388c:	f04f 0000 	mov.w	r0, #0
 8003890:	f04f 0100 	mov.w	r1, #0
 8003894:	00d9      	lsls	r1, r3, #3
 8003896:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800389a:	00d0      	lsls	r0, r2, #3
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	eb12 0208 	adds.w	r2, r2, r8
 80038a4:	eb43 0309 	adc.w	r3, r3, r9
 80038a8:	f04f 0000 	mov.w	r0, #0
 80038ac:	f04f 0100 	mov.w	r1, #0
 80038b0:	0259      	lsls	r1, r3, #9
 80038b2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80038b6:	0250      	lsls	r0, r2, #9
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	4610      	mov	r0, r2
 80038be:	4619      	mov	r1, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	461a      	mov	r2, r3
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	f7fd f810 	bl	80008ec <__aeabi_uldivmod>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4613      	mov	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	e04a      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038d6:	4b31      	ldr	r3, [pc, #196]	; (800399c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	099b      	lsrs	r3, r3, #6
 80038dc:	461a      	mov	r2, r3
 80038de:	f04f 0300 	mov.w	r3, #0
 80038e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80038e6:	f04f 0100 	mov.w	r1, #0
 80038ea:	ea02 0400 	and.w	r4, r2, r0
 80038ee:	ea03 0501 	and.w	r5, r3, r1
 80038f2:	4620      	mov	r0, r4
 80038f4:	4629      	mov	r1, r5
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	f04f 0300 	mov.w	r3, #0
 80038fe:	014b      	lsls	r3, r1, #5
 8003900:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003904:	0142      	lsls	r2, r0, #5
 8003906:	4610      	mov	r0, r2
 8003908:	4619      	mov	r1, r3
 800390a:	1b00      	subs	r0, r0, r4
 800390c:	eb61 0105 	sbc.w	r1, r1, r5
 8003910:	f04f 0200 	mov.w	r2, #0
 8003914:	f04f 0300 	mov.w	r3, #0
 8003918:	018b      	lsls	r3, r1, #6
 800391a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800391e:	0182      	lsls	r2, r0, #6
 8003920:	1a12      	subs	r2, r2, r0
 8003922:	eb63 0301 	sbc.w	r3, r3, r1
 8003926:	f04f 0000 	mov.w	r0, #0
 800392a:	f04f 0100 	mov.w	r1, #0
 800392e:	00d9      	lsls	r1, r3, #3
 8003930:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003934:	00d0      	lsls	r0, r2, #3
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	1912      	adds	r2, r2, r4
 800393c:	eb45 0303 	adc.w	r3, r5, r3
 8003940:	f04f 0000 	mov.w	r0, #0
 8003944:	f04f 0100 	mov.w	r1, #0
 8003948:	0299      	lsls	r1, r3, #10
 800394a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800394e:	0290      	lsls	r0, r2, #10
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	4610      	mov	r0, r2
 8003956:	4619      	mov	r1, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	461a      	mov	r2, r3
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	f7fc ffc4 	bl	80008ec <__aeabi_uldivmod>
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	4613      	mov	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800396c:	4b0b      	ldr	r3, [pc, #44]	; (800399c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	0c1b      	lsrs	r3, r3, #16
 8003972:	f003 0303 	and.w	r3, r3, #3
 8003976:	3301      	adds	r3, #1
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	fbb2 f3f3 	udiv	r3, r2, r3
 8003984:	60bb      	str	r3, [r7, #8]
      break;
 8003986:	e002      	b.n	800398e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003988:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800398a:	60bb      	str	r3, [r7, #8]
      break;
 800398c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800398e:	68bb      	ldr	r3, [r7, #8]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800399a:	bf00      	nop
 800399c:	40023800 	.word	0x40023800
 80039a0:	00f42400 	.word	0x00f42400
 80039a4:	007a1200 	.word	0x007a1200

080039a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039ac:	4b03      	ldr	r3, [pc, #12]	; (80039bc <HAL_RCC_GetHCLKFreq+0x14>)
 80039ae:	681b      	ldr	r3, [r3, #0]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	20000000 	.word	0x20000000

080039c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e041      	b.n	8003a56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7fd fd6e 	bl	80014c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3304      	adds	r3, #4
 80039fc:	4619      	mov	r1, r3
 80039fe:	4610      	mov	r0, r2
 8003a00:	f000 fad4 	bl	8003fac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d001      	beq.n	8003a78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e04e      	b.n	8003b16 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0201 	orr.w	r2, r2, #1
 8003a8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a23      	ldr	r2, [pc, #140]	; (8003b24 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d022      	beq.n	8003ae0 <HAL_TIM_Base_Start_IT+0x80>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa2:	d01d      	beq.n	8003ae0 <HAL_TIM_Base_Start_IT+0x80>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a1f      	ldr	r2, [pc, #124]	; (8003b28 <HAL_TIM_Base_Start_IT+0xc8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d018      	beq.n	8003ae0 <HAL_TIM_Base_Start_IT+0x80>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a1e      	ldr	r2, [pc, #120]	; (8003b2c <HAL_TIM_Base_Start_IT+0xcc>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d013      	beq.n	8003ae0 <HAL_TIM_Base_Start_IT+0x80>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a1c      	ldr	r2, [pc, #112]	; (8003b30 <HAL_TIM_Base_Start_IT+0xd0>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d00e      	beq.n	8003ae0 <HAL_TIM_Base_Start_IT+0x80>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a1b      	ldr	r2, [pc, #108]	; (8003b34 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d009      	beq.n	8003ae0 <HAL_TIM_Base_Start_IT+0x80>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a19      	ldr	r2, [pc, #100]	; (8003b38 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d004      	beq.n	8003ae0 <HAL_TIM_Base_Start_IT+0x80>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a18      	ldr	r2, [pc, #96]	; (8003b3c <HAL_TIM_Base_Start_IT+0xdc>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d111      	bne.n	8003b04 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b06      	cmp	r3, #6
 8003af0:	d010      	beq.n	8003b14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f042 0201 	orr.w	r2, r2, #1
 8003b00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b02:	e007      	b.n	8003b14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0201 	orr.w	r2, r2, #1
 8003b12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	40010000 	.word	0x40010000
 8003b28:	40000400 	.word	0x40000400
 8003b2c:	40000800 	.word	0x40000800
 8003b30:	40000c00 	.word	0x40000c00
 8003b34:	40010400 	.word	0x40010400
 8003b38:	40014000 	.word	0x40014000
 8003b3c:	40001800 	.word	0x40001800

08003b40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d122      	bne.n	8003b9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d11b      	bne.n	8003b9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f06f 0202 	mvn.w	r2, #2
 8003b6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f9f4 	bl	8003f70 <HAL_TIM_IC_CaptureCallback>
 8003b88:	e005      	b.n	8003b96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f9e6 	bl	8003f5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f9f7 	bl	8003f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d122      	bne.n	8003bf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	d11b      	bne.n	8003bf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f06f 0204 	mvn.w	r2, #4
 8003bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f9ca 	bl	8003f70 <HAL_TIM_IC_CaptureCallback>
 8003bdc:	e005      	b.n	8003bea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f9bc 	bl	8003f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f9cd 	bl	8003f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	f003 0308 	and.w	r3, r3, #8
 8003bfa:	2b08      	cmp	r3, #8
 8003bfc:	d122      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f003 0308 	and.w	r3, r3, #8
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d11b      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f06f 0208 	mvn.w	r2, #8
 8003c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2204      	movs	r2, #4
 8003c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f9a0 	bl	8003f70 <HAL_TIM_IC_CaptureCallback>
 8003c30:	e005      	b.n	8003c3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f992 	bl	8003f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 f9a3 	bl	8003f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f003 0310 	and.w	r3, r3, #16
 8003c4e:	2b10      	cmp	r3, #16
 8003c50:	d122      	bne.n	8003c98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f003 0310 	and.w	r3, r3, #16
 8003c5c:	2b10      	cmp	r3, #16
 8003c5e:	d11b      	bne.n	8003c98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f06f 0210 	mvn.w	r2, #16
 8003c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2208      	movs	r2, #8
 8003c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f976 	bl	8003f70 <HAL_TIM_IC_CaptureCallback>
 8003c84:	e005      	b.n	8003c92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f968 	bl	8003f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 f979 	bl	8003f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d10e      	bne.n	8003cc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d107      	bne.n	8003cc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f06f 0201 	mvn.w	r2, #1
 8003cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7fd f90a 	bl	8000ed8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cce:	2b80      	cmp	r3, #128	; 0x80
 8003cd0:	d10e      	bne.n	8003cf0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cdc:	2b80      	cmp	r3, #128	; 0x80
 8003cde:	d107      	bne.n	8003cf0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 fbac 	bl	8004448 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfa:	2b40      	cmp	r3, #64	; 0x40
 8003cfc:	d10e      	bne.n	8003d1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d08:	2b40      	cmp	r3, #64	; 0x40
 8003d0a:	d107      	bne.n	8003d1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f93e 	bl	8003f98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	f003 0320 	and.w	r3, r3, #32
 8003d26:	2b20      	cmp	r3, #32
 8003d28:	d10e      	bne.n	8003d48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f003 0320 	and.w	r3, r3, #32
 8003d34:	2b20      	cmp	r3, #32
 8003d36:	d107      	bne.n	8003d48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f06f 0220 	mvn.w	r2, #32
 8003d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 fb76 	bl	8004434 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d48:	bf00      	nop
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_TIM_ConfigClockSource+0x18>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e0b3      	b.n	8003ed0 <HAL_TIM_ConfigClockSource+0x180>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d8e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da0:	d03e      	beq.n	8003e20 <HAL_TIM_ConfigClockSource+0xd0>
 8003da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da6:	f200 8087 	bhi.w	8003eb8 <HAL_TIM_ConfigClockSource+0x168>
 8003daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dae:	f000 8085 	beq.w	8003ebc <HAL_TIM_ConfigClockSource+0x16c>
 8003db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db6:	d87f      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x168>
 8003db8:	2b70      	cmp	r3, #112	; 0x70
 8003dba:	d01a      	beq.n	8003df2 <HAL_TIM_ConfigClockSource+0xa2>
 8003dbc:	2b70      	cmp	r3, #112	; 0x70
 8003dbe:	d87b      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x168>
 8003dc0:	2b60      	cmp	r3, #96	; 0x60
 8003dc2:	d050      	beq.n	8003e66 <HAL_TIM_ConfigClockSource+0x116>
 8003dc4:	2b60      	cmp	r3, #96	; 0x60
 8003dc6:	d877      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x168>
 8003dc8:	2b50      	cmp	r3, #80	; 0x50
 8003dca:	d03c      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0xf6>
 8003dcc:	2b50      	cmp	r3, #80	; 0x50
 8003dce:	d873      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x168>
 8003dd0:	2b40      	cmp	r3, #64	; 0x40
 8003dd2:	d058      	beq.n	8003e86 <HAL_TIM_ConfigClockSource+0x136>
 8003dd4:	2b40      	cmp	r3, #64	; 0x40
 8003dd6:	d86f      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x168>
 8003dd8:	2b30      	cmp	r3, #48	; 0x30
 8003dda:	d064      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x156>
 8003ddc:	2b30      	cmp	r3, #48	; 0x30
 8003dde:	d86b      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x168>
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	d060      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x156>
 8003de4:	2b20      	cmp	r3, #32
 8003de6:	d867      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x168>
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d05c      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x156>
 8003dec:	2b10      	cmp	r3, #16
 8003dee:	d05a      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003df0:	e062      	b.n	8003eb8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	6899      	ldr	r1, [r3, #8]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f000 fa7b 	bl	80042fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e14:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	609a      	str	r2, [r3, #8]
      break;
 8003e1e:	e04e      	b.n	8003ebe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	6899      	ldr	r1, [r3, #8]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f000 fa64 	bl	80042fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e42:	609a      	str	r2, [r3, #8]
      break;
 8003e44:	e03b      	b.n	8003ebe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6818      	ldr	r0, [r3, #0]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	6859      	ldr	r1, [r3, #4]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	461a      	mov	r2, r3
 8003e54:	f000 f9d8 	bl	8004208 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2150      	movs	r1, #80	; 0x50
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fa31 	bl	80042c6 <TIM_ITRx_SetConfig>
      break;
 8003e64:	e02b      	b.n	8003ebe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6818      	ldr	r0, [r3, #0]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	6859      	ldr	r1, [r3, #4]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	461a      	mov	r2, r3
 8003e74:	f000 f9f7 	bl	8004266 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2160      	movs	r1, #96	; 0x60
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 fa21 	bl	80042c6 <TIM_ITRx_SetConfig>
      break;
 8003e84:	e01b      	b.n	8003ebe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6818      	ldr	r0, [r3, #0]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	6859      	ldr	r1, [r3, #4]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	461a      	mov	r2, r3
 8003e94:	f000 f9b8 	bl	8004208 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2140      	movs	r1, #64	; 0x40
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fa11 	bl	80042c6 <TIM_ITRx_SetConfig>
      break;
 8003ea4:	e00b      	b.n	8003ebe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	f000 fa08 	bl	80042c6 <TIM_ITRx_SetConfig>
        break;
 8003eb6:	e002      	b.n	8003ebe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003eb8:	bf00      	nop
 8003eba:	e000      	b.n	8003ebe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ebc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d101      	bne.n	8003ef0 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003eec:	2302      	movs	r3, #2
 8003eee:	e031      	b.n	8003f54 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003f00:	6839      	ldr	r1, [r7, #0]
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f8f2 	bl	80040ec <TIM_SlaveTimer_SetConfig>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d009      	beq.n	8003f22 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e018      	b.n	8003f54 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f30:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f40:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a40      	ldr	r2, [pc, #256]	; (80040c0 <TIM_Base_SetConfig+0x114>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d013      	beq.n	8003fec <TIM_Base_SetConfig+0x40>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fca:	d00f      	beq.n	8003fec <TIM_Base_SetConfig+0x40>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a3d      	ldr	r2, [pc, #244]	; (80040c4 <TIM_Base_SetConfig+0x118>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d00b      	beq.n	8003fec <TIM_Base_SetConfig+0x40>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a3c      	ldr	r2, [pc, #240]	; (80040c8 <TIM_Base_SetConfig+0x11c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d007      	beq.n	8003fec <TIM_Base_SetConfig+0x40>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a3b      	ldr	r2, [pc, #236]	; (80040cc <TIM_Base_SetConfig+0x120>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d003      	beq.n	8003fec <TIM_Base_SetConfig+0x40>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a3a      	ldr	r2, [pc, #232]	; (80040d0 <TIM_Base_SetConfig+0x124>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d108      	bne.n	8003ffe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a2f      	ldr	r2, [pc, #188]	; (80040c0 <TIM_Base_SetConfig+0x114>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d02b      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400c:	d027      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a2c      	ldr	r2, [pc, #176]	; (80040c4 <TIM_Base_SetConfig+0x118>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d023      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a2b      	ldr	r2, [pc, #172]	; (80040c8 <TIM_Base_SetConfig+0x11c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d01f      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a2a      	ldr	r2, [pc, #168]	; (80040cc <TIM_Base_SetConfig+0x120>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d01b      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a29      	ldr	r2, [pc, #164]	; (80040d0 <TIM_Base_SetConfig+0x124>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d017      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a28      	ldr	r2, [pc, #160]	; (80040d4 <TIM_Base_SetConfig+0x128>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d013      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a27      	ldr	r2, [pc, #156]	; (80040d8 <TIM_Base_SetConfig+0x12c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d00f      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a26      	ldr	r2, [pc, #152]	; (80040dc <TIM_Base_SetConfig+0x130>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d00b      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a25      	ldr	r2, [pc, #148]	; (80040e0 <TIM_Base_SetConfig+0x134>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d007      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a24      	ldr	r2, [pc, #144]	; (80040e4 <TIM_Base_SetConfig+0x138>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d003      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a23      	ldr	r2, [pc, #140]	; (80040e8 <TIM_Base_SetConfig+0x13c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d108      	bne.n	8004070 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	4313      	orrs	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	4313      	orrs	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a0a      	ldr	r2, [pc, #40]	; (80040c0 <TIM_Base_SetConfig+0x114>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d003      	beq.n	80040a4 <TIM_Base_SetConfig+0xf8>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a0c      	ldr	r2, [pc, #48]	; (80040d0 <TIM_Base_SetConfig+0x124>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d103      	bne.n	80040ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	691a      	ldr	r2, [r3, #16]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	615a      	str	r2, [r3, #20]
}
 80040b2:	bf00      	nop
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	40010000 	.word	0x40010000
 80040c4:	40000400 	.word	0x40000400
 80040c8:	40000800 	.word	0x40000800
 80040cc:	40000c00 	.word	0x40000c00
 80040d0:	40010400 	.word	0x40010400
 80040d4:	40014000 	.word	0x40014000
 80040d8:	40014400 	.word	0x40014400
 80040dc:	40014800 	.word	0x40014800
 80040e0:	40001800 	.word	0x40001800
 80040e4:	40001c00 	.word	0x40001c00
 80040e8:	40002000 	.word	0x40002000

080040ec <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004104:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	4313      	orrs	r3, r2
 800410e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f023 0307 	bic.w	r3, r3, #7
 8004116:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	4313      	orrs	r3, r2
 8004120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b70      	cmp	r3, #112	; 0x70
 8004130:	d01a      	beq.n	8004168 <TIM_SlaveTimer_SetConfig+0x7c>
 8004132:	2b70      	cmp	r3, #112	; 0x70
 8004134:	d860      	bhi.n	80041f8 <TIM_SlaveTimer_SetConfig+0x10c>
 8004136:	2b60      	cmp	r3, #96	; 0x60
 8004138:	d054      	beq.n	80041e4 <TIM_SlaveTimer_SetConfig+0xf8>
 800413a:	2b60      	cmp	r3, #96	; 0x60
 800413c:	d85c      	bhi.n	80041f8 <TIM_SlaveTimer_SetConfig+0x10c>
 800413e:	2b50      	cmp	r3, #80	; 0x50
 8004140:	d046      	beq.n	80041d0 <TIM_SlaveTimer_SetConfig+0xe4>
 8004142:	2b50      	cmp	r3, #80	; 0x50
 8004144:	d858      	bhi.n	80041f8 <TIM_SlaveTimer_SetConfig+0x10c>
 8004146:	2b40      	cmp	r3, #64	; 0x40
 8004148:	d019      	beq.n	800417e <TIM_SlaveTimer_SetConfig+0x92>
 800414a:	2b40      	cmp	r3, #64	; 0x40
 800414c:	d854      	bhi.n	80041f8 <TIM_SlaveTimer_SetConfig+0x10c>
 800414e:	2b30      	cmp	r3, #48	; 0x30
 8004150:	d054      	beq.n	80041fc <TIM_SlaveTimer_SetConfig+0x110>
 8004152:	2b30      	cmp	r3, #48	; 0x30
 8004154:	d850      	bhi.n	80041f8 <TIM_SlaveTimer_SetConfig+0x10c>
 8004156:	2b20      	cmp	r3, #32
 8004158:	d050      	beq.n	80041fc <TIM_SlaveTimer_SetConfig+0x110>
 800415a:	2b20      	cmp	r3, #32
 800415c:	d84c      	bhi.n	80041f8 <TIM_SlaveTimer_SetConfig+0x10c>
 800415e:	2b00      	cmp	r3, #0
 8004160:	d04c      	beq.n	80041fc <TIM_SlaveTimer_SetConfig+0x110>
 8004162:	2b10      	cmp	r3, #16
 8004164:	d04a      	beq.n	80041fc <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8004166:	e047      	b.n	80041f8 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6818      	ldr	r0, [r3, #0]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	68d9      	ldr	r1, [r3, #12]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	f000 f8c0 	bl	80042fc <TIM_ETR_SetConfig>
      break;
 800417c:	e03f      	b.n	80041fe <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b05      	cmp	r3, #5
 8004184:	d101      	bne.n	800418a <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e03a      	b.n	8004200 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6a1a      	ldr	r2, [r3, #32]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0201 	bic.w	r2, r2, #1
 80041a0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041b0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	621a      	str	r2, [r3, #32]
      break;
 80041ce:	e016      	b.n	80041fe <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6818      	ldr	r0, [r3, #0]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	6899      	ldr	r1, [r3, #8]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	461a      	mov	r2, r3
 80041de:	f000 f813 	bl	8004208 <TIM_TI1_ConfigInputStage>
      break;
 80041e2:	e00c      	b.n	80041fe <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6818      	ldr	r0, [r3, #0]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	6899      	ldr	r1, [r3, #8]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	461a      	mov	r2, r3
 80041f2:	f000 f838 	bl	8004266 <TIM_TI2_ConfigInputStage>
      break;
 80041f6:	e002      	b.n	80041fe <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80041f8:	bf00      	nop
 80041fa:	e000      	b.n	80041fe <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80041fc:	bf00      	nop
  }
  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	f023 0201 	bic.w	r2, r3, #1
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004232:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4313      	orrs	r3, r2
 800423c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f023 030a 	bic.w	r3, r3, #10
 8004244:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	621a      	str	r2, [r3, #32]
}
 800425a:	bf00      	nop
 800425c:	371c      	adds	r7, #28
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004266:	b480      	push	{r7}
 8004268:	b087      	sub	sp, #28
 800426a:	af00      	add	r7, sp, #0
 800426c:	60f8      	str	r0, [r7, #12]
 800426e:	60b9      	str	r1, [r7, #8]
 8004270:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	f023 0210 	bic.w	r2, r3, #16
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004290:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	031b      	lsls	r3, r3, #12
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	4313      	orrs	r3, r2
 800429a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	621a      	str	r2, [r3, #32]
}
 80042ba:	bf00      	nop
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b085      	sub	sp, #20
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
 80042ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	f043 0307 	orr.w	r3, r3, #7
 80042e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	609a      	str	r2, [r3, #8]
}
 80042f0:	bf00      	nop
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
 8004308:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004316:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	021a      	lsls	r2, r3, #8
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	431a      	orrs	r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	4313      	orrs	r3, r2
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	4313      	orrs	r3, r2
 8004328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	609a      	str	r2, [r3, #8]
}
 8004330:	bf00      	nop
 8004332:	371c      	adds	r7, #28
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800434c:	2b01      	cmp	r3, #1
 800434e:	d101      	bne.n	8004354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004350:	2302      	movs	r3, #2
 8004352:	e05a      	b.n	800440a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	4313      	orrs	r3, r2
 8004384:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a21      	ldr	r2, [pc, #132]	; (8004418 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d022      	beq.n	80043de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a0:	d01d      	beq.n	80043de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a1d      	ldr	r2, [pc, #116]	; (800441c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d018      	beq.n	80043de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a1b      	ldr	r2, [pc, #108]	; (8004420 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d013      	beq.n	80043de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a1a      	ldr	r2, [pc, #104]	; (8004424 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d00e      	beq.n	80043de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a18      	ldr	r2, [pc, #96]	; (8004428 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d009      	beq.n	80043de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a17      	ldr	r2, [pc, #92]	; (800442c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d004      	beq.n	80043de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a15      	ldr	r2, [pc, #84]	; (8004430 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d10c      	bne.n	80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	40010000 	.word	0x40010000
 800441c:	40000400 	.word	0x40000400
 8004420:	40000800 	.word	0x40000800
 8004424:	40000c00 	.word	0x40000c00
 8004428:	40010400 	.word	0x40010400
 800442c:	40014000 	.word	0x40014000
 8004430:	40001800 	.word	0x40001800

08004434 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800445c:	b084      	sub	sp, #16
 800445e:	b580      	push	{r7, lr}
 8004460:	b084      	sub	sp, #16
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
 8004466:	f107 001c 	add.w	r0, r7, #28
 800446a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	2b01      	cmp	r3, #1
 8004472:	d122      	bne.n	80044ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004478:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004488:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800449c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d105      	bne.n	80044ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f001 fac6 	bl	8005a40 <USB_CoreReset>
 80044b4:	4603      	mov	r3, r0
 80044b6:	73fb      	strb	r3, [r7, #15]
 80044b8:	e01a      	b.n	80044f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f001 faba 	bl	8005a40 <USB_CoreReset>
 80044cc:	4603      	mov	r3, r0
 80044ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80044d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d106      	bne.n	80044e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	639a      	str	r2, [r3, #56]	; 0x38
 80044e2:	e005      	b.n	80044f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80044f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d10b      	bne.n	800450e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f043 0206 	orr.w	r2, r3, #6
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f043 0220 	orr.w	r2, r3, #32
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800450e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800451a:	b004      	add	sp, #16
 800451c:	4770      	bx	lr
	...

08004520 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	4613      	mov	r3, r2
 800452c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800452e:	79fb      	ldrb	r3, [r7, #7]
 8004530:	2b02      	cmp	r3, #2
 8004532:	d165      	bne.n	8004600 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	4a41      	ldr	r2, [pc, #260]	; (800463c <USB_SetTurnaroundTime+0x11c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d906      	bls.n	800454a <USB_SetTurnaroundTime+0x2a>
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	4a40      	ldr	r2, [pc, #256]	; (8004640 <USB_SetTurnaroundTime+0x120>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d202      	bcs.n	800454a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004544:	230f      	movs	r3, #15
 8004546:	617b      	str	r3, [r7, #20]
 8004548:	e062      	b.n	8004610 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	4a3c      	ldr	r2, [pc, #240]	; (8004640 <USB_SetTurnaroundTime+0x120>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d306      	bcc.n	8004560 <USB_SetTurnaroundTime+0x40>
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	4a3b      	ldr	r2, [pc, #236]	; (8004644 <USB_SetTurnaroundTime+0x124>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d202      	bcs.n	8004560 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800455a:	230e      	movs	r3, #14
 800455c:	617b      	str	r3, [r7, #20]
 800455e:	e057      	b.n	8004610 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	4a38      	ldr	r2, [pc, #224]	; (8004644 <USB_SetTurnaroundTime+0x124>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d306      	bcc.n	8004576 <USB_SetTurnaroundTime+0x56>
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4a37      	ldr	r2, [pc, #220]	; (8004648 <USB_SetTurnaroundTime+0x128>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d202      	bcs.n	8004576 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004570:	230d      	movs	r3, #13
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	e04c      	b.n	8004610 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	4a33      	ldr	r2, [pc, #204]	; (8004648 <USB_SetTurnaroundTime+0x128>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d306      	bcc.n	800458c <USB_SetTurnaroundTime+0x6c>
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	4a32      	ldr	r2, [pc, #200]	; (800464c <USB_SetTurnaroundTime+0x12c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d802      	bhi.n	800458c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004586:	230c      	movs	r3, #12
 8004588:	617b      	str	r3, [r7, #20]
 800458a:	e041      	b.n	8004610 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	4a2f      	ldr	r2, [pc, #188]	; (800464c <USB_SetTurnaroundTime+0x12c>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d906      	bls.n	80045a2 <USB_SetTurnaroundTime+0x82>
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	4a2e      	ldr	r2, [pc, #184]	; (8004650 <USB_SetTurnaroundTime+0x130>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d802      	bhi.n	80045a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800459c:	230b      	movs	r3, #11
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	e036      	b.n	8004610 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	4a2a      	ldr	r2, [pc, #168]	; (8004650 <USB_SetTurnaroundTime+0x130>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d906      	bls.n	80045b8 <USB_SetTurnaroundTime+0x98>
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	4a29      	ldr	r2, [pc, #164]	; (8004654 <USB_SetTurnaroundTime+0x134>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d802      	bhi.n	80045b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80045b2:	230a      	movs	r3, #10
 80045b4:	617b      	str	r3, [r7, #20]
 80045b6:	e02b      	b.n	8004610 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4a26      	ldr	r2, [pc, #152]	; (8004654 <USB_SetTurnaroundTime+0x134>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d906      	bls.n	80045ce <USB_SetTurnaroundTime+0xae>
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	4a25      	ldr	r2, [pc, #148]	; (8004658 <USB_SetTurnaroundTime+0x138>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d202      	bcs.n	80045ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80045c8:	2309      	movs	r3, #9
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	e020      	b.n	8004610 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	4a21      	ldr	r2, [pc, #132]	; (8004658 <USB_SetTurnaroundTime+0x138>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d306      	bcc.n	80045e4 <USB_SetTurnaroundTime+0xc4>
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	4a20      	ldr	r2, [pc, #128]	; (800465c <USB_SetTurnaroundTime+0x13c>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d802      	bhi.n	80045e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80045de:	2308      	movs	r3, #8
 80045e0:	617b      	str	r3, [r7, #20]
 80045e2:	e015      	b.n	8004610 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4a1d      	ldr	r2, [pc, #116]	; (800465c <USB_SetTurnaroundTime+0x13c>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d906      	bls.n	80045fa <USB_SetTurnaroundTime+0xda>
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	4a1c      	ldr	r2, [pc, #112]	; (8004660 <USB_SetTurnaroundTime+0x140>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d202      	bcs.n	80045fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80045f4:	2307      	movs	r3, #7
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	e00a      	b.n	8004610 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80045fa:	2306      	movs	r3, #6
 80045fc:	617b      	str	r3, [r7, #20]
 80045fe:	e007      	b.n	8004610 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004600:	79fb      	ldrb	r3, [r7, #7]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d102      	bne.n	800460c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004606:	2309      	movs	r3, #9
 8004608:	617b      	str	r3, [r7, #20]
 800460a:	e001      	b.n	8004610 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800460c:	2309      	movs	r3, #9
 800460e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	029b      	lsls	r3, r3, #10
 8004624:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004628:	431a      	orrs	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	371c      	adds	r7, #28
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	00d8acbf 	.word	0x00d8acbf
 8004640:	00e4e1c0 	.word	0x00e4e1c0
 8004644:	00f42400 	.word	0x00f42400
 8004648:	01067380 	.word	0x01067380
 800464c:	011a499f 	.word	0x011a499f
 8004650:	01312cff 	.word	0x01312cff
 8004654:	014ca43f 	.word	0x014ca43f
 8004658:	016e3600 	.word	0x016e3600
 800465c:	01a6ab1f 	.word	0x01a6ab1f
 8004660:	01e84800 	.word	0x01e84800

08004664 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f043 0201 	orr.w	r2, r3, #1
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f023 0201 	bic.w	r2, r3, #1
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	460b      	mov	r3, r1
 80046b2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80046c0:	78fb      	ldrb	r3, [r7, #3]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d106      	bne.n	80046d4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	60da      	str	r2, [r3, #12]
 80046d2:	e00b      	b.n	80046ec <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80046d4:	78fb      	ldrb	r3, [r7, #3]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d106      	bne.n	80046e8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	60da      	str	r2, [r3, #12]
 80046e6:	e001      	b.n	80046ec <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e003      	b.n	80046f4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80046ec:	2032      	movs	r0, #50	; 0x32
 80046ee:	f7fd f895 	bl	800181c <HAL_Delay>

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046fc:	b084      	sub	sp, #16
 80046fe:	b580      	push	{r7, lr}
 8004700:	b086      	sub	sp, #24
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
 8004706:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800470a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004716:	2300      	movs	r3, #0
 8004718:	613b      	str	r3, [r7, #16]
 800471a:	e009      	b.n	8004730 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	3340      	adds	r3, #64	; 0x40
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	2200      	movs	r2, #0
 8004728:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	3301      	adds	r3, #1
 800472e:	613b      	str	r3, [r7, #16]
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	2b0e      	cmp	r3, #14
 8004734:	d9f2      	bls.n	800471c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004738:	2b00      	cmp	r3, #0
 800473a:	d11c      	bne.n	8004776 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800474a:	f043 0302 	orr.w	r3, r3, #2
 800474e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004754:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004760:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	639a      	str	r2, [r3, #56]	; 0x38
 8004774:	e00b      	b.n	800478e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004786:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004794:	461a      	mov	r2, r3
 8004796:	2300      	movs	r3, #0
 8004798:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a0:	4619      	mov	r1, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a8:	461a      	mov	r2, r3
 80047aa:	680b      	ldr	r3, [r1, #0]
 80047ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d10c      	bne.n	80047ce <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80047b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d104      	bne.n	80047c4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80047ba:	2100      	movs	r1, #0
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 f949 	bl	8004a54 <USB_SetDevSpeed>
 80047c2:	e008      	b.n	80047d6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80047c4:	2101      	movs	r1, #1
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f944 	bl	8004a54 <USB_SetDevSpeed>
 80047cc:	e003      	b.n	80047d6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80047ce:	2103      	movs	r1, #3
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 f93f 	bl	8004a54 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80047d6:	2110      	movs	r1, #16
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 f8f3 	bl	80049c4 <USB_FlushTxFifo>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 f911 	bl	8004a10 <USB_FlushRxFifo>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047fe:	461a      	mov	r2, r3
 8004800:	2300      	movs	r3, #0
 8004802:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800480a:	461a      	mov	r2, r3
 800480c:	2300      	movs	r3, #0
 800480e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004816:	461a      	mov	r2, r3
 8004818:	2300      	movs	r3, #0
 800481a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800481c:	2300      	movs	r3, #0
 800481e:	613b      	str	r3, [r7, #16]
 8004820:	e043      	b.n	80048aa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	015a      	lsls	r2, r3, #5
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	4413      	add	r3, r2
 800482a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004834:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004838:	d118      	bne.n	800486c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10a      	bne.n	8004856 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484c:	461a      	mov	r2, r3
 800484e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	e013      	b.n	800487e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	015a      	lsls	r2, r3, #5
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	4413      	add	r3, r2
 800485e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004862:	461a      	mov	r2, r3
 8004864:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004868:	6013      	str	r3, [r2, #0]
 800486a:	e008      	b.n	800487e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	015a      	lsls	r2, r3, #5
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4413      	add	r3, r2
 8004874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004878:	461a      	mov	r2, r3
 800487a:	2300      	movs	r3, #0
 800487c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4413      	add	r3, r2
 8004886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800488a:	461a      	mov	r2, r3
 800488c:	2300      	movs	r3, #0
 800488e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4413      	add	r3, r2
 8004898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800489c:	461a      	mov	r2, r3
 800489e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	3301      	adds	r3, #1
 80048a8:	613b      	str	r3, [r7, #16]
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d3b7      	bcc.n	8004822 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048b2:	2300      	movs	r3, #0
 80048b4:	613b      	str	r3, [r7, #16]
 80048b6:	e043      	b.n	8004940 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048ce:	d118      	bne.n	8004902 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10a      	bne.n	80048ec <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	015a      	lsls	r2, r3, #5
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4413      	add	r3, r2
 80048de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e2:	461a      	mov	r2, r3
 80048e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048e8:	6013      	str	r3, [r2, #0]
 80048ea:	e013      	b.n	8004914 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	015a      	lsls	r2, r3, #5
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4413      	add	r3, r2
 80048f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f8:	461a      	mov	r2, r3
 80048fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048fe:	6013      	str	r3, [r2, #0]
 8004900:	e008      	b.n	8004914 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	015a      	lsls	r2, r3, #5
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4413      	add	r3, r2
 800490a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490e:	461a      	mov	r2, r3
 8004910:	2300      	movs	r3, #0
 8004912:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4413      	add	r3, r2
 800491c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004920:	461a      	mov	r2, r3
 8004922:	2300      	movs	r3, #0
 8004924:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	015a      	lsls	r2, r3, #5
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	4413      	add	r3, r2
 800492e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004932:	461a      	mov	r2, r3
 8004934:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004938:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	3301      	adds	r3, #1
 800493e:	613b      	str	r3, [r7, #16]
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	429a      	cmp	r2, r3
 8004946:	d3b7      	bcc.n	80048b8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004956:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800495a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004968:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800496a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496c:	2b00      	cmp	r3, #0
 800496e:	d105      	bne.n	800497c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	f043 0210 	orr.w	r2, r3, #16
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	699a      	ldr	r2, [r3, #24]
 8004980:	4b0f      	ldr	r3, [pc, #60]	; (80049c0 <USB_DevInit+0x2c4>)
 8004982:	4313      	orrs	r3, r2
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800498a:	2b00      	cmp	r3, #0
 800498c:	d005      	beq.n	800499a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	f043 0208 	orr.w	r2, r3, #8
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800499a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800499c:	2b01      	cmp	r3, #1
 800499e:	d107      	bne.n	80049b0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049a8:	f043 0304 	orr.w	r3, r3, #4
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80049b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3718      	adds	r7, #24
 80049b6:	46bd      	mov	sp, r7
 80049b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049bc:	b004      	add	sp, #16
 80049be:	4770      	bx	lr
 80049c0:	803c3800 	.word	0x803c3800

080049c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	019b      	lsls	r3, r3, #6
 80049d6:	f043 0220 	orr.w	r2, r3, #32
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	3301      	adds	r3, #1
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4a09      	ldr	r2, [pc, #36]	; (8004a0c <USB_FlushTxFifo+0x48>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d901      	bls.n	80049f0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e006      	b.n	80049fe <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	f003 0320 	and.w	r3, r3, #32
 80049f8:	2b20      	cmp	r3, #32
 80049fa:	d0f0      	beq.n	80049de <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	00030d40 	.word	0x00030d40

08004a10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2210      	movs	r2, #16
 8004a20:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	3301      	adds	r3, #1
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4a09      	ldr	r2, [pc, #36]	; (8004a50 <USB_FlushRxFifo+0x40>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d901      	bls.n	8004a34 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e006      	b.n	8004a42 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	f003 0310 	and.w	r3, r3, #16
 8004a3c:	2b10      	cmp	r3, #16
 8004a3e:	d0f0      	beq.n	8004a22 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	00030d40 	.word	0x00030d40

08004a54 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	78fb      	ldrb	r3, [r7, #3]
 8004a6e:	68f9      	ldr	r1, [r7, #12]
 8004a70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a74:	4313      	orrs	r3, r2
 8004a76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b087      	sub	sp, #28
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 0306 	and.w	r3, r3, #6
 8004a9e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d102      	bne.n	8004aac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	75fb      	strb	r3, [r7, #23]
 8004aaa:	e00a      	b.n	8004ac2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d002      	beq.n	8004ab8 <USB_GetDevSpeed+0x32>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2b06      	cmp	r3, #6
 8004ab6:	d102      	bne.n	8004abe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004ab8:	2302      	movs	r3, #2
 8004aba:	75fb      	strb	r3, [r7, #23]
 8004abc:	e001      	b.n	8004ac2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004abe:	230f      	movs	r3, #15
 8004ac0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	371c      	adds	r7, #28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	785b      	ldrb	r3, [r3, #1]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d13a      	bne.n	8004b62 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af2:	69da      	ldr	r2, [r3, #28]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	f003 030f 	and.w	r3, r3, #15
 8004afc:	2101      	movs	r1, #1
 8004afe:	fa01 f303 	lsl.w	r3, r1, r3
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	68f9      	ldr	r1, [r7, #12]
 8004b06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	015a      	lsls	r2, r3, #5
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d155      	bne.n	8004bd0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	78db      	ldrb	r3, [r3, #3]
 8004b3e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b40:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	059b      	lsls	r3, r3, #22
 8004b46:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	0151      	lsls	r1, r2, #5
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	440a      	add	r2, r1
 8004b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	e036      	b.n	8004bd0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b68:	69da      	ldr	r2, [r3, #28]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	f003 030f 	and.w	r3, r3, #15
 8004b72:	2101      	movs	r1, #1
 8004b74:	fa01 f303 	lsl.w	r3, r1, r3
 8004b78:	041b      	lsls	r3, r3, #16
 8004b7a:	68f9      	ldr	r1, [r7, #12]
 8004b7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b80:	4313      	orrs	r3, r2
 8004b82:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d11a      	bne.n	8004bd0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	78db      	ldrb	r3, [r3, #3]
 8004bb4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004bb6:	430b      	orrs	r3, r1
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	0151      	lsls	r1, r2, #5
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	440a      	add	r2, r1
 8004bc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
	...

08004be0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	785b      	ldrb	r3, [r3, #1]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d161      	bne.n	8004cc0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c12:	d11f      	bne.n	8004c54 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	0151      	lsls	r1, r2, #5
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	440a      	add	r2, r1
 8004c2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c32:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	0151      	lsls	r1, r2, #5
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	440a      	add	r2, r1
 8004c4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	f003 030f 	and.w	r3, r3, #15
 8004c64:	2101      	movs	r1, #1
 8004c66:	fa01 f303 	lsl.w	r3, r1, r3
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	43db      	mvns	r3, r3
 8004c6e:	68f9      	ldr	r1, [r7, #12]
 8004c70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c74:	4013      	ands	r3, r2
 8004c76:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c7e:	69da      	ldr	r2, [r3, #28]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	f003 030f 	and.w	r3, r3, #15
 8004c88:	2101      	movs	r1, #1
 8004c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	43db      	mvns	r3, r3
 8004c92:	68f9      	ldr	r1, [r7, #12]
 8004c94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c98:	4013      	ands	r3, r2
 8004c9a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	0159      	lsls	r1, r3, #5
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	440b      	add	r3, r1
 8004cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	4b35      	ldr	r3, [pc, #212]	; (8004d90 <USB_DeactivateEndpoint+0x1b0>)
 8004cba:	4013      	ands	r3, r2
 8004cbc:	600b      	str	r3, [r1, #0]
 8004cbe:	e060      	b.n	8004d82 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cd6:	d11f      	bne.n	8004d18 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	0151      	lsls	r1, r2, #5
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	440a      	add	r2, r1
 8004cee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cf2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004cf6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	0151      	lsls	r1, r2, #5
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	440a      	add	r2, r1
 8004d0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	f003 030f 	and.w	r3, r3, #15
 8004d28:	2101      	movs	r1, #1
 8004d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d2e:	041b      	lsls	r3, r3, #16
 8004d30:	43db      	mvns	r3, r3
 8004d32:	68f9      	ldr	r1, [r7, #12]
 8004d34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d38:	4013      	ands	r3, r2
 8004d3a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d42:	69da      	ldr	r2, [r3, #28]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	f003 030f 	and.w	r3, r3, #15
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d52:	041b      	lsls	r3, r3, #16
 8004d54:	43db      	mvns	r3, r3
 8004d56:	68f9      	ldr	r1, [r7, #12]
 8004d58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	0159      	lsls	r1, r3, #5
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	440b      	add	r3, r1
 8004d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	4b05      	ldr	r3, [pc, #20]	; (8004d94 <USB_DeactivateEndpoint+0x1b4>)
 8004d7e:	4013      	ands	r3, r2
 8004d80:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr
 8004d90:	ec337800 	.word	0xec337800
 8004d94:	eff37800 	.word	0xeff37800

08004d98 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b08a      	sub	sp, #40	; 0x28
 8004d9c:	af02      	add	r7, sp, #8
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	4613      	mov	r3, r2
 8004da4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	785b      	ldrb	r3, [r3, #1]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	f040 815c 	bne.w	8005072 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d132      	bne.n	8004e28 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	0151      	lsls	r1, r2, #5
 8004dd4:	69fa      	ldr	r2, [r7, #28]
 8004dd6:	440a      	add	r2, r1
 8004dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ddc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004de0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004de4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	0151      	lsls	r1, r2, #5
 8004df8:	69fa      	ldr	r2, [r7, #28]
 8004dfa:	440a      	add	r2, r1
 8004dfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	015a      	lsls	r2, r3, #5
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	0151      	lsls	r1, r2, #5
 8004e18:	69fa      	ldr	r2, [r7, #28]
 8004e1a:	440a      	add	r2, r1
 8004e1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e20:	0cdb      	lsrs	r3, r3, #19
 8004e22:	04db      	lsls	r3, r3, #19
 8004e24:	6113      	str	r3, [r2, #16]
 8004e26:	e074      	b.n	8004f12 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	015a      	lsls	r2, r3, #5
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	4413      	add	r3, r2
 8004e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	0151      	lsls	r1, r2, #5
 8004e3a:	69fa      	ldr	r2, [r7, #28]
 8004e3c:	440a      	add	r2, r1
 8004e3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e42:	0cdb      	lsrs	r3, r3, #19
 8004e44:	04db      	lsls	r3, r3, #19
 8004e46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	0151      	lsls	r1, r2, #5
 8004e5a:	69fa      	ldr	r2, [r7, #28]
 8004e5c:	440a      	add	r2, r1
 8004e5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e78:	691a      	ldr	r2, [r3, #16]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	6959      	ldr	r1, [r3, #20]
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	440b      	add	r3, r1
 8004e84:	1e59      	subs	r1, r3, #1
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e8e:	04d9      	lsls	r1, r3, #19
 8004e90:	4b9d      	ldr	r3, [pc, #628]	; (8005108 <USB_EPStartXfer+0x370>)
 8004e92:	400b      	ands	r3, r1
 8004e94:	69b9      	ldr	r1, [r7, #24]
 8004e96:	0148      	lsls	r0, r1, #5
 8004e98:	69f9      	ldr	r1, [r7, #28]
 8004e9a:	4401      	add	r1, r0
 8004e9c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb0:	691a      	ldr	r2, [r3, #16]
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eba:	69b9      	ldr	r1, [r7, #24]
 8004ebc:	0148      	lsls	r0, r1, #5
 8004ebe:	69f9      	ldr	r1, [r7, #28]
 8004ec0:	4401      	add	r1, r0
 8004ec2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	78db      	ldrb	r3, [r3, #3]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d11f      	bne.n	8004f12 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	0151      	lsls	r1, r2, #5
 8004ee4:	69fa      	ldr	r2, [r7, #28]
 8004ee6:	440a      	add	r2, r1
 8004ee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004ef0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	015a      	lsls	r2, r3, #5
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	0151      	lsls	r1, r2, #5
 8004f04:	69fa      	ldr	r2, [r7, #28]
 8004f06:	440a      	add	r2, r1
 8004f08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f10:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004f12:	79fb      	ldrb	r3, [r7, #7]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d14b      	bne.n	8004fb0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d009      	beq.n	8004f34 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	78db      	ldrb	r3, [r3, #3]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d128      	bne.n	8004f8e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d110      	bne.n	8004f6e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	0151      	lsls	r1, r2, #5
 8004f5e:	69fa      	ldr	r2, [r7, #28]
 8004f60:	440a      	add	r2, r1
 8004f62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f6a:	6013      	str	r3, [r2, #0]
 8004f6c:	e00f      	b.n	8004f8e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	015a      	lsls	r2, r3, #5
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	4413      	add	r3, r2
 8004f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	0151      	lsls	r1, r2, #5
 8004f80:	69fa      	ldr	r2, [r7, #28]
 8004f82:	440a      	add	r2, r1
 8004f84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f8c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	015a      	lsls	r2, r3, #5
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	0151      	lsls	r1, r2, #5
 8004fa0:	69fa      	ldr	r2, [r7, #28]
 8004fa2:	440a      	add	r2, r1
 8004fa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fa8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fac:	6013      	str	r3, [r2, #0]
 8004fae:	e12f      	b.n	8005210 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	0151      	lsls	r1, r2, #5
 8004fc2:	69fa      	ldr	r2, [r7, #28]
 8004fc4:	440a      	add	r2, r1
 8004fc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fce:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	78db      	ldrb	r3, [r3, #3]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d015      	beq.n	8005004 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 8117 	beq.w	8005210 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	f003 030f 	and.w	r3, r3, #15
 8004ff2:	2101      	movs	r1, #1
 8004ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff8:	69f9      	ldr	r1, [r7, #28]
 8004ffa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ffe:	4313      	orrs	r3, r2
 8005000:	634b      	str	r3, [r1, #52]	; 0x34
 8005002:	e105      	b.n	8005210 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005010:	2b00      	cmp	r3, #0
 8005012:	d110      	bne.n	8005036 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	015a      	lsls	r2, r3, #5
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	4413      	add	r3, r2
 800501c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	69ba      	ldr	r2, [r7, #24]
 8005024:	0151      	lsls	r1, r2, #5
 8005026:	69fa      	ldr	r2, [r7, #28]
 8005028:	440a      	add	r2, r1
 800502a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800502e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005032:	6013      	str	r3, [r2, #0]
 8005034:	e00f      	b.n	8005056 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	4413      	add	r3, r2
 800503e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	0151      	lsls	r1, r2, #5
 8005048:	69fa      	ldr	r2, [r7, #28]
 800504a:	440a      	add	r2, r1
 800504c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005054:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	68d9      	ldr	r1, [r3, #12]
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	781a      	ldrb	r2, [r3, #0]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	b298      	uxth	r0, r3
 8005064:	79fb      	ldrb	r3, [r7, #7]
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	4603      	mov	r3, r0
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 fa2b 	bl	80054c6 <USB_WritePacket>
 8005070:	e0ce      	b.n	8005210 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	4413      	add	r3, r2
 800507a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	0151      	lsls	r1, r2, #5
 8005084:	69fa      	ldr	r2, [r7, #28]
 8005086:	440a      	add	r2, r1
 8005088:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800508c:	0cdb      	lsrs	r3, r3, #19
 800508e:	04db      	lsls	r3, r3, #19
 8005090:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	015a      	lsls	r2, r3, #5
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	4413      	add	r3, r2
 800509a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	0151      	lsls	r1, r2, #5
 80050a4:	69fa      	ldr	r2, [r7, #28]
 80050a6:	440a      	add	r2, r1
 80050a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050b4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d126      	bne.n	800510c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ca:	691a      	ldr	r2, [r3, #16]
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050d4:	69b9      	ldr	r1, [r7, #24]
 80050d6:	0148      	lsls	r0, r1, #5
 80050d8:	69f9      	ldr	r1, [r7, #28]
 80050da:	4401      	add	r1, r0
 80050dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050e0:	4313      	orrs	r3, r2
 80050e2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	0151      	lsls	r1, r2, #5
 80050f6:	69fa      	ldr	r2, [r7, #28]
 80050f8:	440a      	add	r2, r1
 80050fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005102:	6113      	str	r3, [r2, #16]
 8005104:	e036      	b.n	8005174 <USB_EPStartXfer+0x3dc>
 8005106:	bf00      	nop
 8005108:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	695a      	ldr	r2, [r3, #20]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	4413      	add	r3, r2
 8005116:	1e5a      	subs	r2, r3, #1
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005120:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512e:	691a      	ldr	r2, [r3, #16]
 8005130:	8afb      	ldrh	r3, [r7, #22]
 8005132:	04d9      	lsls	r1, r3, #19
 8005134:	4b39      	ldr	r3, [pc, #228]	; (800521c <USB_EPStartXfer+0x484>)
 8005136:	400b      	ands	r3, r1
 8005138:	69b9      	ldr	r1, [r7, #24]
 800513a:	0148      	lsls	r0, r1, #5
 800513c:	69f9      	ldr	r1, [r7, #28]
 800513e:	4401      	add	r1, r0
 8005140:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005144:	4313      	orrs	r3, r2
 8005146:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005154:	691a      	ldr	r2, [r3, #16]
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	8af9      	ldrh	r1, [r7, #22]
 800515c:	fb01 f303 	mul.w	r3, r1, r3
 8005160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005164:	69b9      	ldr	r1, [r7, #24]
 8005166:	0148      	lsls	r0, r1, #5
 8005168:	69f9      	ldr	r1, [r7, #28]
 800516a:	4401      	add	r1, r0
 800516c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005170:	4313      	orrs	r3, r2
 8005172:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005174:	79fb      	ldrb	r3, [r7, #7]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d10d      	bne.n	8005196 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d009      	beq.n	8005196 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	68d9      	ldr	r1, [r3, #12]
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005192:	460a      	mov	r2, r1
 8005194:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	78db      	ldrb	r3, [r3, #3]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d128      	bne.n	80051f0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d110      	bne.n	80051d0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	0151      	lsls	r1, r2, #5
 80051c0:	69fa      	ldr	r2, [r7, #28]
 80051c2:	440a      	add	r2, r1
 80051c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051cc:	6013      	str	r3, [r2, #0]
 80051ce:	e00f      	b.n	80051f0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	0151      	lsls	r1, r2, #5
 80051e2:	69fa      	ldr	r2, [r7, #28]
 80051e4:	440a      	add	r2, r1
 80051e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	0151      	lsls	r1, r2, #5
 8005202:	69fa      	ldr	r2, [r7, #28]
 8005204:	440a      	add	r2, r1
 8005206:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800520a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800520e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3720      	adds	r7, #32
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	1ff80000 	.word	0x1ff80000

08005220 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005220:	b480      	push	{r7}
 8005222:	b087      	sub	sp, #28
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	4613      	mov	r3, r2
 800522c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	785b      	ldrb	r3, [r3, #1]
 800523c:	2b01      	cmp	r3, #1
 800523e:	f040 80cd 	bne.w	80053dc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d132      	bne.n	80052b0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	015a      	lsls	r2, r3, #5
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	4413      	add	r3, r2
 8005252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	0151      	lsls	r1, r2, #5
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	440a      	add	r2, r1
 8005260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005264:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005268:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800526c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	4413      	add	r3, r2
 8005276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	0151      	lsls	r1, r2, #5
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	440a      	add	r2, r1
 8005284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005288:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800528c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	0151      	lsls	r1, r2, #5
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	440a      	add	r2, r1
 80052a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a8:	0cdb      	lsrs	r3, r3, #19
 80052aa:	04db      	lsls	r3, r3, #19
 80052ac:	6113      	str	r3, [r2, #16]
 80052ae:	e04e      	b.n	800534e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	0151      	lsls	r1, r2, #5
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	440a      	add	r2, r1
 80052c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ca:	0cdb      	lsrs	r3, r3, #19
 80052cc:	04db      	lsls	r3, r3, #19
 80052ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	0151      	lsls	r1, r2, #5
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	440a      	add	r2, r1
 80052e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052f2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	695a      	ldr	r2, [r3, #20]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d903      	bls.n	8005308 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	0151      	lsls	r1, r2, #5
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	440a      	add	r2, r1
 800531e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005322:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005326:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005334:	691a      	ldr	r2, [r3, #16]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800533e:	6939      	ldr	r1, [r7, #16]
 8005340:	0148      	lsls	r0, r1, #5
 8005342:	6979      	ldr	r1, [r7, #20]
 8005344:	4401      	add	r1, r0
 8005346:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800534a:	4313      	orrs	r3, r2
 800534c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800534e:	79fb      	ldrb	r3, [r7, #7]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d11e      	bne.n	8005392 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d009      	beq.n	8005370 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005368:	461a      	mov	r2, r3
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	4413      	add	r3, r2
 8005378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	0151      	lsls	r1, r2, #5
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	440a      	add	r2, r1
 8005386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800538a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800538e:	6013      	str	r3, [r2, #0]
 8005390:	e092      	b.n	80054b8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	4413      	add	r3, r2
 800539a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	0151      	lsls	r1, r2, #5
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	440a      	add	r2, r1
 80053a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053b0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d07e      	beq.n	80054b8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	f003 030f 	and.w	r3, r3, #15
 80053ca:	2101      	movs	r1, #1
 80053cc:	fa01 f303 	lsl.w	r3, r1, r3
 80053d0:	6979      	ldr	r1, [r7, #20]
 80053d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053d6:	4313      	orrs	r3, r2
 80053d8:	634b      	str	r3, [r1, #52]	; 0x34
 80053da:	e06d      	b.n	80054b8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	0151      	lsls	r1, r2, #5
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	440a      	add	r2, r1
 80053f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053f6:	0cdb      	lsrs	r3, r3, #19
 80053f8:	04db      	lsls	r3, r3, #19
 80053fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	4413      	add	r3, r2
 8005404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	0151      	lsls	r1, r2, #5
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	440a      	add	r2, r1
 8005412:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005416:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800541a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800541e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d003      	beq.n	8005430 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	689a      	ldr	r2, [r3, #8]
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	0151      	lsls	r1, r2, #5
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	440a      	add	r2, r1
 8005446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800544a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800544e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	4413      	add	r3, r2
 8005458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545c:	691a      	ldr	r2, [r3, #16]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005466:	6939      	ldr	r1, [r7, #16]
 8005468:	0148      	lsls	r0, r1, #5
 800546a:	6979      	ldr	r1, [r7, #20]
 800546c:	4401      	add	r1, r0
 800546e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005472:	4313      	orrs	r3, r2
 8005474:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005476:	79fb      	ldrb	r3, [r7, #7]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d10d      	bne.n	8005498 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d009      	beq.n	8005498 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	68d9      	ldr	r1, [r3, #12]
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	4413      	add	r3, r2
 8005490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005494:	460a      	mov	r2, r1
 8005496:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	0151      	lsls	r1, r2, #5
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	440a      	add	r2, r1
 80054ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	371c      	adds	r7, #28
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b089      	sub	sp, #36	; 0x24
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	60f8      	str	r0, [r7, #12]
 80054ce:	60b9      	str	r1, [r7, #8]
 80054d0:	4611      	mov	r1, r2
 80054d2:	461a      	mov	r2, r3
 80054d4:	460b      	mov	r3, r1
 80054d6:	71fb      	strb	r3, [r7, #7]
 80054d8:	4613      	mov	r3, r2
 80054da:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80054e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d11a      	bne.n	8005522 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80054ec:	88bb      	ldrh	r3, [r7, #4]
 80054ee:	3303      	adds	r3, #3
 80054f0:	089b      	lsrs	r3, r3, #2
 80054f2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80054f4:	2300      	movs	r3, #0
 80054f6:	61bb      	str	r3, [r7, #24]
 80054f8:	e00f      	b.n	800551a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80054fa:	79fb      	ldrb	r3, [r7, #7]
 80054fc:	031a      	lsls	r2, r3, #12
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	4413      	add	r3, r2
 8005502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005506:	461a      	mov	r2, r3
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	3304      	adds	r3, #4
 8005512:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	3301      	adds	r3, #1
 8005518:	61bb      	str	r3, [r7, #24]
 800551a:	69ba      	ldr	r2, [r7, #24]
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	429a      	cmp	r2, r3
 8005520:	d3eb      	bcc.n	80054fa <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3724      	adds	r7, #36	; 0x24
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005530:	b480      	push	{r7}
 8005532:	b089      	sub	sp, #36	; 0x24
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	4613      	mov	r3, r2
 800553c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005546:	88fb      	ldrh	r3, [r7, #6]
 8005548:	3303      	adds	r3, #3
 800554a:	089b      	lsrs	r3, r3, #2
 800554c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800554e:	2300      	movs	r3, #0
 8005550:	61bb      	str	r3, [r7, #24]
 8005552:	e00b      	b.n	800556c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	3304      	adds	r3, #4
 8005564:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	3301      	adds	r3, #1
 800556a:	61bb      	str	r3, [r7, #24]
 800556c:	69ba      	ldr	r2, [r7, #24]
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	429a      	cmp	r2, r3
 8005572:	d3ef      	bcc.n	8005554 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005574:	69fb      	ldr	r3, [r7, #28]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3724      	adds	r7, #36	; 0x24
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005582:	b480      	push	{r7}
 8005584:	b085      	sub	sp, #20
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	785b      	ldrb	r3, [r3, #1]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d12c      	bne.n	80055f8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	db12      	blt.n	80055d6 <USB_EPSetStall+0x54>
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00f      	beq.n	80055d6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	0151      	lsls	r1, r2, #5
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	440a      	add	r2, r1
 80055cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055d4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	015a      	lsls	r2, r3, #5
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	4413      	add	r3, r2
 80055de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	0151      	lsls	r1, r2, #5
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	440a      	add	r2, r1
 80055ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055f4:	6013      	str	r3, [r2, #0]
 80055f6:	e02b      	b.n	8005650 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	db12      	blt.n	8005630 <USB_EPSetStall+0xae>
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00f      	beq.n	8005630 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	015a      	lsls	r2, r3, #5
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	4413      	add	r3, r2
 8005618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	0151      	lsls	r1, r2, #5
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	440a      	add	r2, r1
 8005626:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800562a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800562e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	0151      	lsls	r1, r2, #5
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	440a      	add	r2, r1
 8005646:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800564a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800564e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800565e:	b480      	push	{r7}
 8005660:	b085      	sub	sp, #20
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	785b      	ldrb	r3, [r3, #1]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d128      	bne.n	80056cc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4413      	add	r3, r2
 8005682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	0151      	lsls	r1, r2, #5
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	440a      	add	r2, r1
 8005690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005694:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005698:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	78db      	ldrb	r3, [r3, #3]
 800569e:	2b03      	cmp	r3, #3
 80056a0:	d003      	beq.n	80056aa <USB_EPClearStall+0x4c>
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	78db      	ldrb	r3, [r3, #3]
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d138      	bne.n	800571c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	0151      	lsls	r1, r2, #5
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	440a      	add	r2, r1
 80056c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056c8:	6013      	str	r3, [r2, #0]
 80056ca:	e027      	b.n	800571c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	0151      	lsls	r1, r2, #5
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	440a      	add	r2, r1
 80056e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	78db      	ldrb	r3, [r3, #3]
 80056f0:	2b03      	cmp	r3, #3
 80056f2:	d003      	beq.n	80056fc <USB_EPClearStall+0x9e>
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	78db      	ldrb	r3, [r3, #3]
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d10f      	bne.n	800571c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	0151      	lsls	r1, r2, #5
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	440a      	add	r2, r1
 8005712:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800571a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800572a:	b480      	push	{r7}
 800572c:	b085      	sub	sp, #20
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	460b      	mov	r3, r1
 8005734:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005748:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800574c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	78fb      	ldrb	r3, [r7, #3]
 8005758:	011b      	lsls	r3, r3, #4
 800575a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800575e:	68f9      	ldr	r1, [r7, #12]
 8005760:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005764:	4313      	orrs	r3, r2
 8005766:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005776:	b480      	push	{r7}
 8005778:	b085      	sub	sp, #20
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005790:	f023 0303 	bic.w	r3, r3, #3
 8005794:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057a4:	f023 0302 	bic.w	r3, r3, #2
 80057a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80057d2:	f023 0303 	bic.w	r3, r3, #3
 80057d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057e6:	f043 0302 	orr.w	r3, r3, #2
 80057ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b085      	sub	sp, #20
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	4013      	ands	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005812:	68fb      	ldr	r3, [r7, #12]
}
 8005814:	4618      	mov	r0, r3
 8005816:	3714      	adds	r7, #20
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	4013      	ands	r3, r2
 8005842:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	0c1b      	lsrs	r3, r3, #16
}
 8005848:	4618      	mov	r0, r3
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	4013      	ands	r3, r2
 8005876:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	b29b      	uxth	r3, r3
}
 800587c:	4618      	mov	r0, r3
 800587e:	3714      	adds	r7, #20
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	460b      	mov	r3, r1
 8005892:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005898:	78fb      	ldrb	r3, [r7, #3]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	4013      	ands	r3, r2
 80058b4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80058b6:	68bb      	ldr	r3, [r7, #8]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3714      	adds	r7, #20
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b087      	sub	sp, #28
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	460b      	mov	r3, r1
 80058ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80058e8:	78fb      	ldrb	r3, [r7, #3]
 80058ea:	f003 030f 	and.w	r3, r3, #15
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	fa22 f303 	lsr.w	r3, r2, r3
 80058f4:	01db      	lsls	r3, r3, #7
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80058fe:	78fb      	ldrb	r3, [r7, #3]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	4413      	add	r3, r2
 8005906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	4013      	ands	r3, r2
 8005910:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005912:	68bb      	ldr	r3, [r7, #8]
}
 8005914:	4618      	mov	r0, r3
 8005916:	371c      	adds	r7, #28
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	f003 0301 	and.w	r3, r3, #1
}
 8005930:	4618      	mov	r0, r3
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005956:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800595a:	f023 0307 	bic.w	r3, r3, #7
 800595e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800596e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005972:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
	...

08005984 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005984:	b480      	push	{r7}
 8005986:	b087      	sub	sp, #28
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	460b      	mov	r3, r1
 800598e:	607a      	str	r2, [r7, #4]
 8005990:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	333c      	adds	r3, #60	; 0x3c
 800599a:	3304      	adds	r3, #4
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	4a26      	ldr	r2, [pc, #152]	; (8005a3c <USB_EP0_OutStart+0xb8>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d90a      	bls.n	80059be <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059b8:	d101      	bne.n	80059be <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80059ba:	2300      	movs	r3, #0
 80059bc:	e037      	b.n	8005a2e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c4:	461a      	mov	r2, r3
 80059c6:	2300      	movs	r3, #0
 80059c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ec:	f043 0318 	orr.w	r3, r3, #24
 80059f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a00:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005a04:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005a06:	7afb      	ldrb	r3, [r7, #11]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d10f      	bne.n	8005a2c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a12:	461a      	mov	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a26:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005a2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	371c      	adds	r7, #28
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	4f54300a 	.word	0x4f54300a

08005a40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	60fb      	str	r3, [r7, #12]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	4a13      	ldr	r2, [pc, #76]	; (8005aa4 <USB_CoreReset+0x64>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d901      	bls.n	8005a5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e01b      	b.n	8005a96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	daf2      	bge.n	8005a4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f043 0201 	orr.w	r2, r3, #1
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	60fb      	str	r3, [r7, #12]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4a09      	ldr	r2, [pc, #36]	; (8005aa4 <USB_CoreReset+0x64>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d901      	bls.n	8005a88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e006      	b.n	8005a96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d0f0      	beq.n	8005a76 <USB_CoreReset+0x36>

  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	00030d40 	.word	0x00030d40

08005aa8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005ab4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005ab8:	f002 f95c 	bl	8007d74 <USBD_static_malloc>
 8005abc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d105      	bne.n	8005ad0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005acc:	2302      	movs	r3, #2
 8005ace:	e066      	b.n	8005b9e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	7c1b      	ldrb	r3, [r3, #16]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d119      	bne.n	8005b14 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ae4:	2202      	movs	r2, #2
 8005ae6:	2181      	movs	r1, #129	; 0x81
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f002 f820 	bl	8007b2e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005af4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005af8:	2202      	movs	r2, #2
 8005afa:	2101      	movs	r1, #1
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f002 f816 	bl	8007b2e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2210      	movs	r2, #16
 8005b0e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005b12:	e016      	b.n	8005b42 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005b14:	2340      	movs	r3, #64	; 0x40
 8005b16:	2202      	movs	r2, #2
 8005b18:	2181      	movs	r1, #129	; 0x81
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f002 f807 	bl	8007b2e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005b26:	2340      	movs	r3, #64	; 0x40
 8005b28:	2202      	movs	r2, #2
 8005b2a:	2101      	movs	r1, #1
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f001 fffe 	bl	8007b2e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2210      	movs	r2, #16
 8005b3e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005b42:	2308      	movs	r3, #8
 8005b44:	2203      	movs	r2, #3
 8005b46:	2182      	movs	r1, #130	; 0x82
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f001 fff0 	bl	8007b2e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	7c1b      	ldrb	r3, [r3, #16]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d109      	bne.n	8005b8c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b82:	2101      	movs	r1, #1
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f002 f8c1 	bl	8007d0c <USBD_LL_PrepareReceive>
 8005b8a:	e007      	b.n	8005b9c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b92:	2340      	movs	r3, #64	; 0x40
 8005b94:	2101      	movs	r1, #1
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f002 f8b8 	bl	8007d0c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b082      	sub	sp, #8
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
 8005bae:	460b      	mov	r3, r1
 8005bb0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005bb2:	2181      	movs	r1, #129	; 0x81
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f001 ffe0 	bl	8007b7a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005bc0:	2101      	movs	r1, #1
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f001 ffd9 	bl	8007b7a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005bd0:	2182      	movs	r1, #130	; 0x82
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f001 ffd1 	bl	8007b7a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00e      	beq.n	8005c10 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c02:	4618      	mov	r0, r3
 8005c04:	f002 f8c4 	bl	8007d90 <USBD_static_free>
    pdev->pClassData = NULL;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
	...

08005c1c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c2c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005c32:	2300      	movs	r3, #0
 8005c34:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c36:	2300      	movs	r3, #0
 8005c38:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d101      	bne.n	8005c44 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e0af      	b.n	8005da4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d03f      	beq.n	8005cd0 <USBD_CDC_Setup+0xb4>
 8005c50:	2b20      	cmp	r3, #32
 8005c52:	f040 809f 	bne.w	8005d94 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	88db      	ldrh	r3, [r3, #6]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d02e      	beq.n	8005cbc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	b25b      	sxtb	r3, r3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	da16      	bge.n	8005c96 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005c74:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	88d2      	ldrh	r2, [r2, #6]
 8005c7a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	88db      	ldrh	r3, [r3, #6]
 8005c80:	2b07      	cmp	r3, #7
 8005c82:	bf28      	it	cs
 8005c84:	2307      	movcs	r3, #7
 8005c86:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	89fa      	ldrh	r2, [r7, #14]
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f001 fb19 	bl	80072c6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005c94:	e085      	b.n	8005da2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	785a      	ldrb	r2, [r3, #1]
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	88db      	ldrh	r3, [r3, #6]
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005cac:	6939      	ldr	r1, [r7, #16]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	88db      	ldrh	r3, [r3, #6]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f001 fb32 	bl	800731e <USBD_CtlPrepareRx>
      break;
 8005cba:	e072      	b.n	8005da2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	683a      	ldr	r2, [r7, #0]
 8005cc6:	7850      	ldrb	r0, [r2, #1]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	6839      	ldr	r1, [r7, #0]
 8005ccc:	4798      	blx	r3
      break;
 8005cce:	e068      	b.n	8005da2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	785b      	ldrb	r3, [r3, #1]
 8005cd4:	2b0b      	cmp	r3, #11
 8005cd6:	d852      	bhi.n	8005d7e <USBD_CDC_Setup+0x162>
 8005cd8:	a201      	add	r2, pc, #4	; (adr r2, 8005ce0 <USBD_CDC_Setup+0xc4>)
 8005cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cde:	bf00      	nop
 8005ce0:	08005d11 	.word	0x08005d11
 8005ce4:	08005d8d 	.word	0x08005d8d
 8005ce8:	08005d7f 	.word	0x08005d7f
 8005cec:	08005d7f 	.word	0x08005d7f
 8005cf0:	08005d7f 	.word	0x08005d7f
 8005cf4:	08005d7f 	.word	0x08005d7f
 8005cf8:	08005d7f 	.word	0x08005d7f
 8005cfc:	08005d7f 	.word	0x08005d7f
 8005d00:	08005d7f 	.word	0x08005d7f
 8005d04:	08005d7f 	.word	0x08005d7f
 8005d08:	08005d3b 	.word	0x08005d3b
 8005d0c:	08005d65 	.word	0x08005d65
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b03      	cmp	r3, #3
 8005d1a:	d107      	bne.n	8005d2c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005d1c:	f107 030a 	add.w	r3, r7, #10
 8005d20:	2202      	movs	r2, #2
 8005d22:	4619      	mov	r1, r3
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f001 face 	bl	80072c6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d2a:	e032      	b.n	8005d92 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005d2c:	6839      	ldr	r1, [r7, #0]
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f001 fa58 	bl	80071e4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d34:	2303      	movs	r3, #3
 8005d36:	75fb      	strb	r3, [r7, #23]
          break;
 8005d38:	e02b      	b.n	8005d92 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b03      	cmp	r3, #3
 8005d44:	d107      	bne.n	8005d56 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005d46:	f107 030d 	add.w	r3, r7, #13
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f001 fab9 	bl	80072c6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d54:	e01d      	b.n	8005d92 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005d56:	6839      	ldr	r1, [r7, #0]
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f001 fa43 	bl	80071e4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	75fb      	strb	r3, [r7, #23]
          break;
 8005d62:	e016      	b.n	8005d92 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b03      	cmp	r3, #3
 8005d6e:	d00f      	beq.n	8005d90 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005d70:	6839      	ldr	r1, [r7, #0]
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f001 fa36 	bl	80071e4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005d7c:	e008      	b.n	8005d90 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005d7e:	6839      	ldr	r1, [r7, #0]
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f001 fa2f 	bl	80071e4 <USBD_CtlError>
          ret = USBD_FAIL;
 8005d86:	2303      	movs	r3, #3
 8005d88:	75fb      	strb	r3, [r7, #23]
          break;
 8005d8a:	e002      	b.n	8005d92 <USBD_CDC_Setup+0x176>
          break;
 8005d8c:	bf00      	nop
 8005d8e:	e008      	b.n	8005da2 <USBD_CDC_Setup+0x186>
          break;
 8005d90:	bf00      	nop
      }
      break;
 8005d92:	e006      	b.n	8005da2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005d94:	6839      	ldr	r1, [r7, #0]
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f001 fa24 	bl	80071e4 <USBD_CtlError>
      ret = USBD_FAIL;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8005da0:	bf00      	nop
  }

  return (uint8_t)ret;
 8005da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3718      	adds	r7, #24
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	460b      	mov	r3, r1
 8005db6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005dbe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e04f      	b.n	8005e6e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dd4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005dd6:	78fa      	ldrb	r2, [r7, #3]
 8005dd8:	6879      	ldr	r1, [r7, #4]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4413      	add	r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	440b      	add	r3, r1
 8005de4:	3318      	adds	r3, #24
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d029      	beq.n	8005e40 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005dec:	78fa      	ldrb	r2, [r7, #3]
 8005dee:	6879      	ldr	r1, [r7, #4]
 8005df0:	4613      	mov	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4413      	add	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	440b      	add	r3, r1
 8005dfa:	3318      	adds	r3, #24
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	78f9      	ldrb	r1, [r7, #3]
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	460b      	mov	r3, r1
 8005e04:	00db      	lsls	r3, r3, #3
 8005e06:	1a5b      	subs	r3, r3, r1
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4403      	add	r3, r0
 8005e0c:	3344      	adds	r3, #68	; 0x44
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	fbb2 f1f3 	udiv	r1, r2, r3
 8005e14:	fb03 f301 	mul.w	r3, r3, r1
 8005e18:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d110      	bne.n	8005e40 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005e1e:	78fa      	ldrb	r2, [r7, #3]
 8005e20:	6879      	ldr	r1, [r7, #4]
 8005e22:	4613      	mov	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	440b      	add	r3, r1
 8005e2c:	3318      	adds	r3, #24
 8005e2e:	2200      	movs	r2, #0
 8005e30:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005e32:	78f9      	ldrb	r1, [r7, #3]
 8005e34:	2300      	movs	r3, #0
 8005e36:	2200      	movs	r2, #0
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f001 ff46 	bl	8007cca <USBD_LL_Transmit>
 8005e3e:	e015      	b.n	8005e6c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00b      	beq.n	8005e6c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005e68:	78fa      	ldrb	r2, [r7, #3]
 8005e6a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b084      	sub	sp, #16
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
 8005e7e:	460b      	mov	r3, r1
 8005e80:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e88:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e015      	b.n	8005ec4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005e98:	78fb      	ldrb	r3, [r7, #3]
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f001 ff56 	bl	8007d4e <USBD_LL_GetRxDataSize>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005ebe:	4611      	mov	r1, r2
 8005ec0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005eda:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e01b      	b.n	8005f1e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d015      	beq.n	8005f1c <USBD_CDC_EP0_RxReady+0x50>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005ef6:	2bff      	cmp	r3, #255	; 0xff
 8005ef8:	d010      	beq.n	8005f1c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005f08:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005f10:	b292      	uxth	r2, r2
 8005f12:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	22ff      	movs	r2, #255	; 0xff
 8005f18:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
	...

08005f28 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2243      	movs	r2, #67	; 0x43
 8005f34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005f36:	4b03      	ldr	r3, [pc, #12]	; (8005f44 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	20000094 	.word	0x20000094

08005f48 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2243      	movs	r2, #67	; 0x43
 8005f54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005f56:	4b03      	ldr	r3, [pc, #12]	; (8005f64 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	20000050 	.word	0x20000050

08005f68 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2243      	movs	r2, #67	; 0x43
 8005f74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005f76:	4b03      	ldr	r3, [pc, #12]	; (8005f84 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	200000d8 	.word	0x200000d8

08005f88 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	220a      	movs	r2, #10
 8005f94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005f96:	4b03      	ldr	r3, [pc, #12]	; (8005fa4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr
 8005fa4:	2000000c 	.word	0x2000000c

08005fa8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d101      	bne.n	8005fbc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e004      	b.n	8005fc6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b087      	sub	sp, #28
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	60f8      	str	r0, [r7, #12]
 8005fda:	60b9      	str	r1, [r7, #8]
 8005fdc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fe4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e008      	b.n	8006002 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	371c      	adds	r7, #28
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800600e:	b480      	push	{r7}
 8006010:	b085      	sub	sp, #20
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800601e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006026:	2303      	movs	r3, #3
 8006028:	e004      	b.n	8006034 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	683a      	ldr	r2, [r7, #0]
 800602e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800604e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006050:	2301      	movs	r3, #1
 8006052:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800605e:	2303      	movs	r3, #3
 8006060:	e01a      	b.n	8006098 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006068:	2b00      	cmp	r3, #0
 800606a:	d114      	bne.n	8006096 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	2201      	movs	r2, #1
 8006070:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800608a:	2181      	movs	r1, #129	; 0x81
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f001 fe1c 	bl	8007cca <USBD_LL_Transmit>

    ret = USBD_OK;
 8006092:	2300      	movs	r3, #0
 8006094:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006096:	7bfb      	ldrb	r3, [r7, #15]
}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e016      	b.n	80060ec <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	7c1b      	ldrb	r3, [r3, #16]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d109      	bne.n	80060da <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060d0:	2101      	movs	r1, #1
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f001 fe1a 	bl	8007d0c <USBD_LL_PrepareReceive>
 80060d8:	e007      	b.n	80060ea <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060e0:	2340      	movs	r3, #64	; 0x40
 80060e2:	2101      	movs	r1, #1
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f001 fe11 	bl	8007d0c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3710      	adds	r7, #16
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	4613      	mov	r3, r2
 8006100:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006108:	2303      	movs	r3, #3
 800610a:	e01f      	b.n	800614c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d003      	beq.n	8006132 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	79fa      	ldrb	r2, [r7, #7]
 800613e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f001 fc8d 	bl	8007a60 <USBD_LL_Init>
 8006146:	4603      	mov	r3, r0
 8006148:	75fb      	strb	r3, [r7, #23]

  return ret;
 800614a:	7dfb      	ldrb	r3, [r7, #23]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3718      	adds	r7, #24
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800615e:	2300      	movs	r3, #0
 8006160:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d101      	bne.n	800616c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006168:	2303      	movs	r3, #3
 800616a:	e016      	b.n	800619a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800617a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00b      	beq.n	8006198 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006188:	f107 020e 	add.w	r2, r7, #14
 800618c:	4610      	mov	r0, r2
 800618e:	4798      	blx	r3
 8006190:	4602      	mov	r2, r0
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b082      	sub	sp, #8
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f001 fca4 	bl	8007af8 <USBD_LL_Start>
 80061b0:	4603      	mov	r3, r0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b083      	sub	sp, #12
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	460b      	mov	r3, r1
 80061da:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80061dc:	2303      	movs	r3, #3
 80061de:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d009      	beq.n	80061fe <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	78fa      	ldrb	r2, [r7, #3]
 80061f4:	4611      	mov	r1, r2
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	4798      	blx	r3
 80061fa:	4603      	mov	r3, r0
 80061fc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80061fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	460b      	mov	r3, r1
 8006212:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800621a:	2b00      	cmp	r3, #0
 800621c:	d007      	beq.n	800622e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	78fa      	ldrb	r2, [r7, #3]
 8006228:	4611      	mov	r1, r2
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	4798      	blx	r3
  }

  return USBD_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3708      	adds	r7, #8
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006248:	6839      	ldr	r1, [r7, #0]
 800624a:	4618      	mov	r0, r3
 800624c:	f000 ff90 	bl	8007170 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800625e:	461a      	mov	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800626c:	f003 031f 	and.w	r3, r3, #31
 8006270:	2b02      	cmp	r3, #2
 8006272:	d01a      	beq.n	80062aa <USBD_LL_SetupStage+0x72>
 8006274:	2b02      	cmp	r3, #2
 8006276:	d822      	bhi.n	80062be <USBD_LL_SetupStage+0x86>
 8006278:	2b00      	cmp	r3, #0
 800627a:	d002      	beq.n	8006282 <USBD_LL_SetupStage+0x4a>
 800627c:	2b01      	cmp	r3, #1
 800627e:	d00a      	beq.n	8006296 <USBD_LL_SetupStage+0x5e>
 8006280:	e01d      	b.n	80062be <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006288:	4619      	mov	r1, r3
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fa62 	bl	8006754 <USBD_StdDevReq>
 8006290:	4603      	mov	r3, r0
 8006292:	73fb      	strb	r3, [r7, #15]
      break;
 8006294:	e020      	b.n	80062d8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800629c:	4619      	mov	r1, r3
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 fac6 	bl	8006830 <USBD_StdItfReq>
 80062a4:	4603      	mov	r3, r0
 80062a6:	73fb      	strb	r3, [r7, #15]
      break;
 80062a8:	e016      	b.n	80062d8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062b0:	4619      	mov	r1, r3
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fb05 	bl	80068c2 <USBD_StdEPReq>
 80062b8:	4603      	mov	r3, r0
 80062ba:	73fb      	strb	r3, [r7, #15]
      break;
 80062bc:	e00c      	b.n	80062d8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80062c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	4619      	mov	r1, r3
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f001 fc73 	bl	8007bb8 <USBD_LL_StallEP>
 80062d2:	4603      	mov	r3, r0
 80062d4:	73fb      	strb	r3, [r7, #15]
      break;
 80062d6:	bf00      	nop
  }

  return ret;
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b086      	sub	sp, #24
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	60f8      	str	r0, [r7, #12]
 80062ea:	460b      	mov	r3, r1
 80062ec:	607a      	str	r2, [r7, #4]
 80062ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80062f0:	7afb      	ldrb	r3, [r7, #11]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d138      	bne.n	8006368 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80062fc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006304:	2b03      	cmp	r3, #3
 8006306:	d14a      	bne.n	800639e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	689a      	ldr	r2, [r3, #8]
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	429a      	cmp	r2, r3
 8006312:	d913      	bls.n	800633c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	689a      	ldr	r2, [r3, #8]
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	1ad2      	subs	r2, r2, r3
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	68da      	ldr	r2, [r3, #12]
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	4293      	cmp	r3, r2
 800632c:	bf28      	it	cs
 800632e:	4613      	movcs	r3, r2
 8006330:	461a      	mov	r2, r3
 8006332:	6879      	ldr	r1, [r7, #4]
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f001 f80f 	bl	8007358 <USBD_CtlContinueRx>
 800633a:	e030      	b.n	800639e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b03      	cmp	r3, #3
 8006346:	d10b      	bne.n	8006360 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d005      	beq.n	8006360 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f001 f80a 	bl	800737a <USBD_CtlSendStatus>
 8006366:	e01a      	b.n	800639e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b03      	cmp	r3, #3
 8006372:	d114      	bne.n	800639e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00e      	beq.n	800639e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	7afa      	ldrb	r2, [r7, #11]
 800638a:	4611      	mov	r1, r2
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	4798      	blx	r3
 8006390:	4603      	mov	r3, r0
 8006392:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006394:	7dfb      	ldrb	r3, [r7, #23]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800639a:	7dfb      	ldrb	r3, [r7, #23]
 800639c:	e000      	b.n	80063a0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3718      	adds	r7, #24
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	460b      	mov	r3, r1
 80063b2:	607a      	str	r2, [r7, #4]
 80063b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80063b6:	7afb      	ldrb	r3, [r7, #11]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d16b      	bne.n	8006494 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	3314      	adds	r3, #20
 80063c0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d156      	bne.n	800647a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	689a      	ldr	r2, [r3, #8]
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d914      	bls.n	8006402 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	1ad2      	subs	r2, r2, r3
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	461a      	mov	r2, r3
 80063ec:	6879      	ldr	r1, [r7, #4]
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f000 ff84 	bl	80072fc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063f4:	2300      	movs	r3, #0
 80063f6:	2200      	movs	r2, #0
 80063f8:	2100      	movs	r1, #0
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f001 fc86 	bl	8007d0c <USBD_LL_PrepareReceive>
 8006400:	e03b      	b.n	800647a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	68da      	ldr	r2, [r3, #12]
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	429a      	cmp	r2, r3
 800640c:	d11c      	bne.n	8006448 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006416:	429a      	cmp	r2, r3
 8006418:	d316      	bcc.n	8006448 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006424:	429a      	cmp	r2, r3
 8006426:	d20f      	bcs.n	8006448 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006428:	2200      	movs	r2, #0
 800642a:	2100      	movs	r1, #0
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f000 ff65 	bl	80072fc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800643a:	2300      	movs	r3, #0
 800643c:	2200      	movs	r2, #0
 800643e:	2100      	movs	r1, #0
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f001 fc63 	bl	8007d0c <USBD_LL_PrepareReceive>
 8006446:	e018      	b.n	800647a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800644e:	b2db      	uxtb	r3, r3
 8006450:	2b03      	cmp	r3, #3
 8006452:	d10b      	bne.n	800646c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d005      	beq.n	800646c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800646c:	2180      	movs	r1, #128	; 0x80
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f001 fba2 	bl	8007bb8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f000 ff93 	bl	80073a0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006480:	2b01      	cmp	r3, #1
 8006482:	d122      	bne.n	80064ca <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f7ff fe98 	bl	80061ba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006492:	e01a      	b.n	80064ca <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b03      	cmp	r3, #3
 800649e:	d114      	bne.n	80064ca <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00e      	beq.n	80064ca <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064b2:	695b      	ldr	r3, [r3, #20]
 80064b4:	7afa      	ldrb	r2, [r7, #11]
 80064b6:	4611      	mov	r1, r2
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	4798      	blx	r3
 80064bc:	4603      	mov	r3, r0
 80064be:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80064c0:	7dfb      	ldrb	r3, [r7, #23]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d001      	beq.n	80064ca <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80064c6:	7dfb      	ldrb	r3, [r7, #23]
 80064c8:	e000      	b.n	80064cc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3718      	adds	r7, #24
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006504:	2303      	movs	r3, #3
 8006506:	e02f      	b.n	8006568 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00f      	beq.n	8006532 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d009      	beq.n	8006532 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	6852      	ldr	r2, [r2, #4]
 800652a:	b2d2      	uxtb	r2, r2
 800652c:	4611      	mov	r1, r2
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006532:	2340      	movs	r3, #64	; 0x40
 8006534:	2200      	movs	r2, #0
 8006536:	2100      	movs	r1, #0
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f001 faf8 	bl	8007b2e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2201      	movs	r2, #1
 8006542:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2240      	movs	r2, #64	; 0x40
 800654a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800654e:	2340      	movs	r3, #64	; 0x40
 8006550:	2200      	movs	r2, #0
 8006552:	2180      	movs	r1, #128	; 0x80
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f001 faea 	bl	8007b2e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2201      	movs	r2, #1
 800655e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2240      	movs	r2, #64	; 0x40
 8006564:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3708      	adds	r7, #8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	460b      	mov	r3, r1
 800657a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	78fa      	ldrb	r2, [r7, #3]
 8006580:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2204      	movs	r2, #4
 80065aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b04      	cmp	r3, #4
 80065ce:	d106      	bne.n	80065de <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80065fe:	2303      	movs	r3, #3
 8006600:	e012      	b.n	8006628 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b03      	cmp	r3, #3
 800660c:	d10b      	bne.n	8006626 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006614:	69db      	ldr	r3, [r3, #28]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d005      	beq.n	8006626 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	460b      	mov	r3, r1
 800663a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006642:	2b00      	cmp	r3, #0
 8006644:	d101      	bne.n	800664a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006646:	2303      	movs	r3, #3
 8006648:	e014      	b.n	8006674 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b03      	cmp	r3, #3
 8006654:	d10d      	bne.n	8006672 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d007      	beq.n	8006672 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	78fa      	ldrb	r2, [r7, #3]
 800666c:	4611      	mov	r1, r2
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3708      	adds	r7, #8
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	460b      	mov	r3, r1
 8006686:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006692:	2303      	movs	r3, #3
 8006694:	e014      	b.n	80066c0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b03      	cmp	r3, #3
 80066a0:	d10d      	bne.n	80066be <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d007      	beq.n	80066be <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b6:	78fa      	ldrb	r2, [r7, #3]
 80066b8:	4611      	mov	r1, r2
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3708      	adds	r7, #8
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b082      	sub	sp, #8
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d009      	beq.n	800670c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	6852      	ldr	r2, [r2, #4]
 8006704:	b2d2      	uxtb	r2, r2
 8006706:	4611      	mov	r1, r2
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	4798      	blx	r3
  }

  return USBD_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006716:	b480      	push	{r7}
 8006718:	b087      	sub	sp, #28
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	3301      	adds	r3, #1
 800672c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006734:	8a3b      	ldrh	r3, [r7, #16]
 8006736:	021b      	lsls	r3, r3, #8
 8006738:	b21a      	sxth	r2, r3
 800673a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800673e:	4313      	orrs	r3, r2
 8006740:	b21b      	sxth	r3, r3
 8006742:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006744:	89fb      	ldrh	r3, [r7, #14]
}
 8006746:	4618      	mov	r0, r3
 8006748:	371c      	adds	r7, #28
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
	...

08006754 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800676a:	2b40      	cmp	r3, #64	; 0x40
 800676c:	d005      	beq.n	800677a <USBD_StdDevReq+0x26>
 800676e:	2b40      	cmp	r3, #64	; 0x40
 8006770:	d853      	bhi.n	800681a <USBD_StdDevReq+0xc6>
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00b      	beq.n	800678e <USBD_StdDevReq+0x3a>
 8006776:	2b20      	cmp	r3, #32
 8006778:	d14f      	bne.n	800681a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	4798      	blx	r3
 8006788:	4603      	mov	r3, r0
 800678a:	73fb      	strb	r3, [r7, #15]
      break;
 800678c:	e04a      	b.n	8006824 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	785b      	ldrb	r3, [r3, #1]
 8006792:	2b09      	cmp	r3, #9
 8006794:	d83b      	bhi.n	800680e <USBD_StdDevReq+0xba>
 8006796:	a201      	add	r2, pc, #4	; (adr r2, 800679c <USBD_StdDevReq+0x48>)
 8006798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679c:	080067f1 	.word	0x080067f1
 80067a0:	08006805 	.word	0x08006805
 80067a4:	0800680f 	.word	0x0800680f
 80067a8:	080067fb 	.word	0x080067fb
 80067ac:	0800680f 	.word	0x0800680f
 80067b0:	080067cf 	.word	0x080067cf
 80067b4:	080067c5 	.word	0x080067c5
 80067b8:	0800680f 	.word	0x0800680f
 80067bc:	080067e7 	.word	0x080067e7
 80067c0:	080067d9 	.word	0x080067d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80067c4:	6839      	ldr	r1, [r7, #0]
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 f9de 	bl	8006b88 <USBD_GetDescriptor>
          break;
 80067cc:	e024      	b.n	8006818 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80067ce:	6839      	ldr	r1, [r7, #0]
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 fb43 	bl	8006e5c <USBD_SetAddress>
          break;
 80067d6:	e01f      	b.n	8006818 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80067d8:	6839      	ldr	r1, [r7, #0]
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 fb82 	bl	8006ee4 <USBD_SetConfig>
 80067e0:	4603      	mov	r3, r0
 80067e2:	73fb      	strb	r3, [r7, #15]
          break;
 80067e4:	e018      	b.n	8006818 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80067e6:	6839      	ldr	r1, [r7, #0]
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 fc21 	bl	8007030 <USBD_GetConfig>
          break;
 80067ee:	e013      	b.n	8006818 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80067f0:	6839      	ldr	r1, [r7, #0]
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 fc52 	bl	800709c <USBD_GetStatus>
          break;
 80067f8:	e00e      	b.n	8006818 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80067fa:	6839      	ldr	r1, [r7, #0]
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 fc81 	bl	8007104 <USBD_SetFeature>
          break;
 8006802:	e009      	b.n	8006818 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006804:	6839      	ldr	r1, [r7, #0]
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fc90 	bl	800712c <USBD_ClrFeature>
          break;
 800680c:	e004      	b.n	8006818 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fce7 	bl	80071e4 <USBD_CtlError>
          break;
 8006816:	bf00      	nop
      }
      break;
 8006818:	e004      	b.n	8006824 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800681a:	6839      	ldr	r1, [r7, #0]
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fce1 	bl	80071e4 <USBD_CtlError>
      break;
 8006822:	bf00      	nop
  }

  return ret;
 8006824:	7bfb      	ldrb	r3, [r7, #15]
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop

08006830 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800683a:	2300      	movs	r3, #0
 800683c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006846:	2b40      	cmp	r3, #64	; 0x40
 8006848:	d005      	beq.n	8006856 <USBD_StdItfReq+0x26>
 800684a:	2b40      	cmp	r3, #64	; 0x40
 800684c:	d82f      	bhi.n	80068ae <USBD_StdItfReq+0x7e>
 800684e:	2b00      	cmp	r3, #0
 8006850:	d001      	beq.n	8006856 <USBD_StdItfReq+0x26>
 8006852:	2b20      	cmp	r3, #32
 8006854:	d12b      	bne.n	80068ae <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800685c:	b2db      	uxtb	r3, r3
 800685e:	3b01      	subs	r3, #1
 8006860:	2b02      	cmp	r3, #2
 8006862:	d81d      	bhi.n	80068a0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	889b      	ldrh	r3, [r3, #4]
 8006868:	b2db      	uxtb	r3, r3
 800686a:	2b01      	cmp	r3, #1
 800686c:	d813      	bhi.n	8006896 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	6839      	ldr	r1, [r7, #0]
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	4798      	blx	r3
 800687c:	4603      	mov	r3, r0
 800687e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	88db      	ldrh	r3, [r3, #6]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d110      	bne.n	80068aa <USBD_StdItfReq+0x7a>
 8006888:	7bfb      	ldrb	r3, [r7, #15]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10d      	bne.n	80068aa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 fd73 	bl	800737a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006894:	e009      	b.n	80068aa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006896:	6839      	ldr	r1, [r7, #0]
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 fca3 	bl	80071e4 <USBD_CtlError>
          break;
 800689e:	e004      	b.n	80068aa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80068a0:	6839      	ldr	r1, [r7, #0]
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 fc9e 	bl	80071e4 <USBD_CtlError>
          break;
 80068a8:	e000      	b.n	80068ac <USBD_StdItfReq+0x7c>
          break;
 80068aa:	bf00      	nop
      }
      break;
 80068ac:	e004      	b.n	80068b8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80068ae:	6839      	ldr	r1, [r7, #0]
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fc97 	bl	80071e4 <USBD_CtlError>
      break;
 80068b6:	bf00      	nop
  }

  return ret;
 80068b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b084      	sub	sp, #16
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80068cc:	2300      	movs	r3, #0
 80068ce:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	889b      	ldrh	r3, [r3, #4]
 80068d4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068de:	2b40      	cmp	r3, #64	; 0x40
 80068e0:	d007      	beq.n	80068f2 <USBD_StdEPReq+0x30>
 80068e2:	2b40      	cmp	r3, #64	; 0x40
 80068e4:	f200 8145 	bhi.w	8006b72 <USBD_StdEPReq+0x2b0>
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00c      	beq.n	8006906 <USBD_StdEPReq+0x44>
 80068ec:	2b20      	cmp	r3, #32
 80068ee:	f040 8140 	bne.w	8006b72 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	6839      	ldr	r1, [r7, #0]
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	4798      	blx	r3
 8006900:	4603      	mov	r3, r0
 8006902:	73fb      	strb	r3, [r7, #15]
      break;
 8006904:	e13a      	b.n	8006b7c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	785b      	ldrb	r3, [r3, #1]
 800690a:	2b03      	cmp	r3, #3
 800690c:	d007      	beq.n	800691e <USBD_StdEPReq+0x5c>
 800690e:	2b03      	cmp	r3, #3
 8006910:	f300 8129 	bgt.w	8006b66 <USBD_StdEPReq+0x2a4>
 8006914:	2b00      	cmp	r3, #0
 8006916:	d07f      	beq.n	8006a18 <USBD_StdEPReq+0x156>
 8006918:	2b01      	cmp	r3, #1
 800691a:	d03c      	beq.n	8006996 <USBD_StdEPReq+0xd4>
 800691c:	e123      	b.n	8006b66 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b02      	cmp	r3, #2
 8006928:	d002      	beq.n	8006930 <USBD_StdEPReq+0x6e>
 800692a:	2b03      	cmp	r3, #3
 800692c:	d016      	beq.n	800695c <USBD_StdEPReq+0x9a>
 800692e:	e02c      	b.n	800698a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006930:	7bbb      	ldrb	r3, [r7, #14]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00d      	beq.n	8006952 <USBD_StdEPReq+0x90>
 8006936:	7bbb      	ldrb	r3, [r7, #14]
 8006938:	2b80      	cmp	r3, #128	; 0x80
 800693a:	d00a      	beq.n	8006952 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800693c:	7bbb      	ldrb	r3, [r7, #14]
 800693e:	4619      	mov	r1, r3
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f001 f939 	bl	8007bb8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006946:	2180      	movs	r1, #128	; 0x80
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f001 f935 	bl	8007bb8 <USBD_LL_StallEP>
 800694e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006950:	e020      	b.n	8006994 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006952:	6839      	ldr	r1, [r7, #0]
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fc45 	bl	80071e4 <USBD_CtlError>
              break;
 800695a:	e01b      	b.n	8006994 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	885b      	ldrh	r3, [r3, #2]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d10e      	bne.n	8006982 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006964:	7bbb      	ldrb	r3, [r7, #14]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00b      	beq.n	8006982 <USBD_StdEPReq+0xc0>
 800696a:	7bbb      	ldrb	r3, [r7, #14]
 800696c:	2b80      	cmp	r3, #128	; 0x80
 800696e:	d008      	beq.n	8006982 <USBD_StdEPReq+0xc0>
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	88db      	ldrh	r3, [r3, #6]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d104      	bne.n	8006982 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006978:	7bbb      	ldrb	r3, [r7, #14]
 800697a:	4619      	mov	r1, r3
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f001 f91b 	bl	8007bb8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fcf9 	bl	800737a <USBD_CtlSendStatus>

              break;
 8006988:	e004      	b.n	8006994 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800698a:	6839      	ldr	r1, [r7, #0]
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 fc29 	bl	80071e4 <USBD_CtlError>
              break;
 8006992:	bf00      	nop
          }
          break;
 8006994:	e0ec      	b.n	8006b70 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d002      	beq.n	80069a8 <USBD_StdEPReq+0xe6>
 80069a2:	2b03      	cmp	r3, #3
 80069a4:	d016      	beq.n	80069d4 <USBD_StdEPReq+0x112>
 80069a6:	e030      	b.n	8006a0a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069a8:	7bbb      	ldrb	r3, [r7, #14]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00d      	beq.n	80069ca <USBD_StdEPReq+0x108>
 80069ae:	7bbb      	ldrb	r3, [r7, #14]
 80069b0:	2b80      	cmp	r3, #128	; 0x80
 80069b2:	d00a      	beq.n	80069ca <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80069b4:	7bbb      	ldrb	r3, [r7, #14]
 80069b6:	4619      	mov	r1, r3
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f001 f8fd 	bl	8007bb8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80069be:	2180      	movs	r1, #128	; 0x80
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f001 f8f9 	bl	8007bb8 <USBD_LL_StallEP>
 80069c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80069c8:	e025      	b.n	8006a16 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80069ca:	6839      	ldr	r1, [r7, #0]
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 fc09 	bl	80071e4 <USBD_CtlError>
              break;
 80069d2:	e020      	b.n	8006a16 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	885b      	ldrh	r3, [r3, #2]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d11b      	bne.n	8006a14 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80069dc:	7bbb      	ldrb	r3, [r7, #14]
 80069de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d004      	beq.n	80069f0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80069e6:	7bbb      	ldrb	r3, [r7, #14]
 80069e8:	4619      	mov	r1, r3
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f001 f903 	bl	8007bf6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fcc2 	bl	800737a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	6839      	ldr	r1, [r7, #0]
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	4798      	blx	r3
 8006a04:	4603      	mov	r3, r0
 8006a06:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006a08:	e004      	b.n	8006a14 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006a0a:	6839      	ldr	r1, [r7, #0]
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fbe9 	bl	80071e4 <USBD_CtlError>
              break;
 8006a12:	e000      	b.n	8006a16 <USBD_StdEPReq+0x154>
              break;
 8006a14:	bf00      	nop
          }
          break;
 8006a16:	e0ab      	b.n	8006b70 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d002      	beq.n	8006a2a <USBD_StdEPReq+0x168>
 8006a24:	2b03      	cmp	r3, #3
 8006a26:	d032      	beq.n	8006a8e <USBD_StdEPReq+0x1cc>
 8006a28:	e097      	b.n	8006b5a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a2a:	7bbb      	ldrb	r3, [r7, #14]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d007      	beq.n	8006a40 <USBD_StdEPReq+0x17e>
 8006a30:	7bbb      	ldrb	r3, [r7, #14]
 8006a32:	2b80      	cmp	r3, #128	; 0x80
 8006a34:	d004      	beq.n	8006a40 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fbd3 	bl	80071e4 <USBD_CtlError>
                break;
 8006a3e:	e091      	b.n	8006b64 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	da0b      	bge.n	8006a60 <USBD_StdEPReq+0x19e>
 8006a48:	7bbb      	ldrb	r3, [r7, #14]
 8006a4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a4e:	4613      	mov	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	3310      	adds	r3, #16
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	3304      	adds	r3, #4
 8006a5e:	e00b      	b.n	8006a78 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a60:	7bbb      	ldrb	r3, [r7, #14]
 8006a62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a66:	4613      	mov	r3, r2
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4413      	add	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	4413      	add	r3, r2
 8006a76:	3304      	adds	r3, #4
 8006a78:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	2202      	movs	r2, #2
 8006a84:	4619      	mov	r1, r3
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 fc1d 	bl	80072c6 <USBD_CtlSendData>
              break;
 8006a8c:	e06a      	b.n	8006b64 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006a8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	da11      	bge.n	8006aba <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006a96:	7bbb      	ldrb	r3, [r7, #14]
 8006a98:	f003 020f 	and.w	r2, r3, #15
 8006a9c:	6879      	ldr	r1, [r7, #4]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	440b      	add	r3, r1
 8006aa8:	3324      	adds	r3, #36	; 0x24
 8006aaa:	881b      	ldrh	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d117      	bne.n	8006ae0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006ab0:	6839      	ldr	r1, [r7, #0]
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 fb96 	bl	80071e4 <USBD_CtlError>
                  break;
 8006ab8:	e054      	b.n	8006b64 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006aba:	7bbb      	ldrb	r3, [r7, #14]
 8006abc:	f003 020f 	and.w	r2, r3, #15
 8006ac0:	6879      	ldr	r1, [r7, #4]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4413      	add	r3, r2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	440b      	add	r3, r1
 8006acc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ad0:	881b      	ldrh	r3, [r3, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d104      	bne.n	8006ae0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006ad6:	6839      	ldr	r1, [r7, #0]
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 fb83 	bl	80071e4 <USBD_CtlError>
                  break;
 8006ade:	e041      	b.n	8006b64 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ae0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	da0b      	bge.n	8006b00 <USBD_StdEPReq+0x23e>
 8006ae8:	7bbb      	ldrb	r3, [r7, #14]
 8006aea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006aee:	4613      	mov	r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	3310      	adds	r3, #16
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	4413      	add	r3, r2
 8006afc:	3304      	adds	r3, #4
 8006afe:	e00b      	b.n	8006b18 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b00:	7bbb      	ldrb	r3, [r7, #14]
 8006b02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b06:	4613      	mov	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	4413      	add	r3, r2
 8006b16:	3304      	adds	r3, #4
 8006b18:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b1a:	7bbb      	ldrb	r3, [r7, #14]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <USBD_StdEPReq+0x264>
 8006b20:	7bbb      	ldrb	r3, [r7, #14]
 8006b22:	2b80      	cmp	r3, #128	; 0x80
 8006b24:	d103      	bne.n	8006b2e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	601a      	str	r2, [r3, #0]
 8006b2c:	e00e      	b.n	8006b4c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006b2e:	7bbb      	ldrb	r3, [r7, #14]
 8006b30:	4619      	mov	r1, r3
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f001 f87e 	bl	8007c34 <USBD_LL_IsStallEP>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d003      	beq.n	8006b46 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	2201      	movs	r2, #1
 8006b42:	601a      	str	r2, [r3, #0]
 8006b44:	e002      	b.n	8006b4c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	4619      	mov	r1, r3
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fbb7 	bl	80072c6 <USBD_CtlSendData>
              break;
 8006b58:	e004      	b.n	8006b64 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006b5a:	6839      	ldr	r1, [r7, #0]
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fb41 	bl	80071e4 <USBD_CtlError>
              break;
 8006b62:	bf00      	nop
          }
          break;
 8006b64:	e004      	b.n	8006b70 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006b66:	6839      	ldr	r1, [r7, #0]
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 fb3b 	bl	80071e4 <USBD_CtlError>
          break;
 8006b6e:	bf00      	nop
      }
      break;
 8006b70:	e004      	b.n	8006b7c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006b72:	6839      	ldr	r1, [r7, #0]
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 fb35 	bl	80071e4 <USBD_CtlError>
      break;
 8006b7a:	bf00      	nop
  }

  return ret;
 8006b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
	...

08006b88 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006b92:	2300      	movs	r3, #0
 8006b94:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006b96:	2300      	movs	r3, #0
 8006b98:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	885b      	ldrh	r3, [r3, #2]
 8006ba2:	0a1b      	lsrs	r3, r3, #8
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	2b06      	cmp	r3, #6
 8006baa:	f200 8128 	bhi.w	8006dfe <USBD_GetDescriptor+0x276>
 8006bae:	a201      	add	r2, pc, #4	; (adr r2, 8006bb4 <USBD_GetDescriptor+0x2c>)
 8006bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb4:	08006bd1 	.word	0x08006bd1
 8006bb8:	08006be9 	.word	0x08006be9
 8006bbc:	08006c29 	.word	0x08006c29
 8006bc0:	08006dff 	.word	0x08006dff
 8006bc4:	08006dff 	.word	0x08006dff
 8006bc8:	08006d9f 	.word	0x08006d9f
 8006bcc:	08006dcb 	.word	0x08006dcb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	7c12      	ldrb	r2, [r2, #16]
 8006bdc:	f107 0108 	add.w	r1, r7, #8
 8006be0:	4610      	mov	r0, r2
 8006be2:	4798      	blx	r3
 8006be4:	60f8      	str	r0, [r7, #12]
      break;
 8006be6:	e112      	b.n	8006e0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	7c1b      	ldrb	r3, [r3, #16]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10d      	bne.n	8006c0c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf8:	f107 0208 	add.w	r2, r7, #8
 8006bfc:	4610      	mov	r0, r2
 8006bfe:	4798      	blx	r3
 8006c00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	3301      	adds	r3, #1
 8006c06:	2202      	movs	r2, #2
 8006c08:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006c0a:	e100      	b.n	8006e0e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c14:	f107 0208 	add.w	r2, r7, #8
 8006c18:	4610      	mov	r0, r2
 8006c1a:	4798      	blx	r3
 8006c1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3301      	adds	r3, #1
 8006c22:	2202      	movs	r2, #2
 8006c24:	701a      	strb	r2, [r3, #0]
      break;
 8006c26:	e0f2      	b.n	8006e0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	885b      	ldrh	r3, [r3, #2]
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b05      	cmp	r3, #5
 8006c30:	f200 80ac 	bhi.w	8006d8c <USBD_GetDescriptor+0x204>
 8006c34:	a201      	add	r2, pc, #4	; (adr r2, 8006c3c <USBD_GetDescriptor+0xb4>)
 8006c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3a:	bf00      	nop
 8006c3c:	08006c55 	.word	0x08006c55
 8006c40:	08006c89 	.word	0x08006c89
 8006c44:	08006cbd 	.word	0x08006cbd
 8006c48:	08006cf1 	.word	0x08006cf1
 8006c4c:	08006d25 	.word	0x08006d25
 8006c50:	08006d59 	.word	0x08006d59
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00b      	beq.n	8006c78 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	7c12      	ldrb	r2, [r2, #16]
 8006c6c:	f107 0108 	add.w	r1, r7, #8
 8006c70:	4610      	mov	r0, r2
 8006c72:	4798      	blx	r3
 8006c74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c76:	e091      	b.n	8006d9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c78:	6839      	ldr	r1, [r7, #0]
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 fab2 	bl	80071e4 <USBD_CtlError>
            err++;
 8006c80:	7afb      	ldrb	r3, [r7, #11]
 8006c82:	3301      	adds	r3, #1
 8006c84:	72fb      	strb	r3, [r7, #11]
          break;
 8006c86:	e089      	b.n	8006d9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00b      	beq.n	8006cac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	7c12      	ldrb	r2, [r2, #16]
 8006ca0:	f107 0108 	add.w	r1, r7, #8
 8006ca4:	4610      	mov	r0, r2
 8006ca6:	4798      	blx	r3
 8006ca8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006caa:	e077      	b.n	8006d9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cac:	6839      	ldr	r1, [r7, #0]
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fa98 	bl	80071e4 <USBD_CtlError>
            err++;
 8006cb4:	7afb      	ldrb	r3, [r7, #11]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	72fb      	strb	r3, [r7, #11]
          break;
 8006cba:	e06f      	b.n	8006d9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00b      	beq.n	8006ce0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	7c12      	ldrb	r2, [r2, #16]
 8006cd4:	f107 0108 	add.w	r1, r7, #8
 8006cd8:	4610      	mov	r0, r2
 8006cda:	4798      	blx	r3
 8006cdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cde:	e05d      	b.n	8006d9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ce0:	6839      	ldr	r1, [r7, #0]
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 fa7e 	bl	80071e4 <USBD_CtlError>
            err++;
 8006ce8:	7afb      	ldrb	r3, [r7, #11]
 8006cea:	3301      	adds	r3, #1
 8006cec:	72fb      	strb	r3, [r7, #11]
          break;
 8006cee:	e055      	b.n	8006d9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00b      	beq.n	8006d14 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	7c12      	ldrb	r2, [r2, #16]
 8006d08:	f107 0108 	add.w	r1, r7, #8
 8006d0c:	4610      	mov	r0, r2
 8006d0e:	4798      	blx	r3
 8006d10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d12:	e043      	b.n	8006d9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d14:	6839      	ldr	r1, [r7, #0]
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fa64 	bl	80071e4 <USBD_CtlError>
            err++;
 8006d1c:	7afb      	ldrb	r3, [r7, #11]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	72fb      	strb	r3, [r7, #11]
          break;
 8006d22:	e03b      	b.n	8006d9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d2a:	695b      	ldr	r3, [r3, #20]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00b      	beq.n	8006d48 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	7c12      	ldrb	r2, [r2, #16]
 8006d3c:	f107 0108 	add.w	r1, r7, #8
 8006d40:	4610      	mov	r0, r2
 8006d42:	4798      	blx	r3
 8006d44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d46:	e029      	b.n	8006d9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d48:	6839      	ldr	r1, [r7, #0]
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fa4a 	bl	80071e4 <USBD_CtlError>
            err++;
 8006d50:	7afb      	ldrb	r3, [r7, #11]
 8006d52:	3301      	adds	r3, #1
 8006d54:	72fb      	strb	r3, [r7, #11]
          break;
 8006d56:	e021      	b.n	8006d9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00b      	beq.n	8006d7c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	7c12      	ldrb	r2, [r2, #16]
 8006d70:	f107 0108 	add.w	r1, r7, #8
 8006d74:	4610      	mov	r0, r2
 8006d76:	4798      	blx	r3
 8006d78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d7a:	e00f      	b.n	8006d9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d7c:	6839      	ldr	r1, [r7, #0]
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 fa30 	bl	80071e4 <USBD_CtlError>
            err++;
 8006d84:	7afb      	ldrb	r3, [r7, #11]
 8006d86:	3301      	adds	r3, #1
 8006d88:	72fb      	strb	r3, [r7, #11]
          break;
 8006d8a:	e007      	b.n	8006d9c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006d8c:	6839      	ldr	r1, [r7, #0]
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fa28 	bl	80071e4 <USBD_CtlError>
          err++;
 8006d94:	7afb      	ldrb	r3, [r7, #11]
 8006d96:	3301      	adds	r3, #1
 8006d98:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006d9a:	bf00      	nop
      }
      break;
 8006d9c:	e037      	b.n	8006e0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	7c1b      	ldrb	r3, [r3, #16]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d109      	bne.n	8006dba <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dae:	f107 0208 	add.w	r2, r7, #8
 8006db2:	4610      	mov	r0, r2
 8006db4:	4798      	blx	r3
 8006db6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006db8:	e029      	b.n	8006e0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006dba:	6839      	ldr	r1, [r7, #0]
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 fa11 	bl	80071e4 <USBD_CtlError>
        err++;
 8006dc2:	7afb      	ldrb	r3, [r7, #11]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	72fb      	strb	r3, [r7, #11]
      break;
 8006dc8:	e021      	b.n	8006e0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	7c1b      	ldrb	r3, [r3, #16]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10d      	bne.n	8006dee <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dda:	f107 0208 	add.w	r2, r7, #8
 8006dde:	4610      	mov	r0, r2
 8006de0:	4798      	blx	r3
 8006de2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	3301      	adds	r3, #1
 8006de8:	2207      	movs	r2, #7
 8006dea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006dec:	e00f      	b.n	8006e0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006dee:	6839      	ldr	r1, [r7, #0]
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 f9f7 	bl	80071e4 <USBD_CtlError>
        err++;
 8006df6:	7afb      	ldrb	r3, [r7, #11]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	72fb      	strb	r3, [r7, #11]
      break;
 8006dfc:	e007      	b.n	8006e0e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006dfe:	6839      	ldr	r1, [r7, #0]
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 f9ef 	bl	80071e4 <USBD_CtlError>
      err++;
 8006e06:	7afb      	ldrb	r3, [r7, #11]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	72fb      	strb	r3, [r7, #11]
      break;
 8006e0c:	bf00      	nop
  }

  if (err != 0U)
 8006e0e:	7afb      	ldrb	r3, [r7, #11]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d11e      	bne.n	8006e52 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	88db      	ldrh	r3, [r3, #6]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d016      	beq.n	8006e4a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006e1c:	893b      	ldrh	r3, [r7, #8]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00e      	beq.n	8006e40 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	88da      	ldrh	r2, [r3, #6]
 8006e26:	893b      	ldrh	r3, [r7, #8]
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	bf28      	it	cs
 8006e2c:	4613      	movcs	r3, r2
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e32:	893b      	ldrh	r3, [r7, #8]
 8006e34:	461a      	mov	r2, r3
 8006e36:	68f9      	ldr	r1, [r7, #12]
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 fa44 	bl	80072c6 <USBD_CtlSendData>
 8006e3e:	e009      	b.n	8006e54 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006e40:	6839      	ldr	r1, [r7, #0]
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 f9ce 	bl	80071e4 <USBD_CtlError>
 8006e48:	e004      	b.n	8006e54 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 fa95 	bl	800737a <USBD_CtlSendStatus>
 8006e50:	e000      	b.n	8006e54 <USBD_GetDescriptor+0x2cc>
    return;
 8006e52:	bf00      	nop
  }
}
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop

08006e5c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	889b      	ldrh	r3, [r3, #4]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d131      	bne.n	8006ed2 <USBD_SetAddress+0x76>
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	88db      	ldrh	r3, [r3, #6]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d12d      	bne.n	8006ed2 <USBD_SetAddress+0x76>
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	885b      	ldrh	r3, [r3, #2]
 8006e7a:	2b7f      	cmp	r3, #127	; 0x7f
 8006e7c:	d829      	bhi.n	8006ed2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	885b      	ldrh	r3, [r3, #2]
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	2b03      	cmp	r3, #3
 8006e94:	d104      	bne.n	8006ea0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006e96:	6839      	ldr	r1, [r7, #0]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 f9a3 	bl	80071e4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e9e:	e01d      	b.n	8006edc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	7bfa      	ldrb	r2, [r7, #15]
 8006ea4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
 8006eaa:	4619      	mov	r1, r3
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 feed 	bl	8007c8c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fa61 	bl	800737a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d004      	beq.n	8006ec8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2202      	movs	r2, #2
 8006ec2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ec6:	e009      	b.n	8006edc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ed0:	e004      	b.n	8006edc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f985 	bl	80071e4 <USBD_CtlError>
  }
}
 8006eda:	bf00      	nop
 8006edc:	bf00      	nop
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	885b      	ldrh	r3, [r3, #2]
 8006ef6:	b2da      	uxtb	r2, r3
 8006ef8:	4b4c      	ldr	r3, [pc, #304]	; (800702c <USBD_SetConfig+0x148>)
 8006efa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006efc:	4b4b      	ldr	r3, [pc, #300]	; (800702c <USBD_SetConfig+0x148>)
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d905      	bls.n	8006f10 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006f04:	6839      	ldr	r1, [r7, #0]
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f96c 	bl	80071e4 <USBD_CtlError>
    return USBD_FAIL;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e088      	b.n	8007022 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d002      	beq.n	8006f22 <USBD_SetConfig+0x3e>
 8006f1c:	2b03      	cmp	r3, #3
 8006f1e:	d025      	beq.n	8006f6c <USBD_SetConfig+0x88>
 8006f20:	e071      	b.n	8007006 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006f22:	4b42      	ldr	r3, [pc, #264]	; (800702c <USBD_SetConfig+0x148>)
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d01c      	beq.n	8006f64 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006f2a:	4b40      	ldr	r3, [pc, #256]	; (800702c <USBD_SetConfig+0x148>)
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f34:	4b3d      	ldr	r3, [pc, #244]	; (800702c <USBD_SetConfig+0x148>)
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	4619      	mov	r1, r3
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7ff f948 	bl	80061d0 <USBD_SetClassConfig>
 8006f40:	4603      	mov	r3, r0
 8006f42:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006f44:	7bfb      	ldrb	r3, [r7, #15]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d004      	beq.n	8006f54 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006f4a:	6839      	ldr	r1, [r7, #0]
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 f949 	bl	80071e4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006f52:	e065      	b.n	8007020 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fa10 	bl	800737a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2203      	movs	r2, #3
 8006f5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006f62:	e05d      	b.n	8007020 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 fa08 	bl	800737a <USBD_CtlSendStatus>
      break;
 8006f6a:	e059      	b.n	8007020 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006f6c:	4b2f      	ldr	r3, [pc, #188]	; (800702c <USBD_SetConfig+0x148>)
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d112      	bne.n	8006f9a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2202      	movs	r2, #2
 8006f78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006f7c:	4b2b      	ldr	r3, [pc, #172]	; (800702c <USBD_SetConfig+0x148>)
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	461a      	mov	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f86:	4b29      	ldr	r3, [pc, #164]	; (800702c <USBD_SetConfig+0x148>)
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f7ff f93b 	bl	8006208 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f9f1 	bl	800737a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006f98:	e042      	b.n	8007020 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006f9a:	4b24      	ldr	r3, [pc, #144]	; (800702c <USBD_SetConfig+0x148>)
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d02a      	beq.n	8006ffe <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	4619      	mov	r1, r3
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f7ff f929 	bl	8006208 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006fb6:	4b1d      	ldr	r3, [pc, #116]	; (800702c <USBD_SetConfig+0x148>)
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	461a      	mov	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006fc0:	4b1a      	ldr	r3, [pc, #104]	; (800702c <USBD_SetConfig+0x148>)
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f7ff f902 	bl	80061d0 <USBD_SetClassConfig>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006fd0:	7bfb      	ldrb	r3, [r7, #15]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00f      	beq.n	8006ff6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006fd6:	6839      	ldr	r1, [r7, #0]
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f903 	bl	80071e4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7ff f90e 	bl	8006208 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006ff4:	e014      	b.n	8007020 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f9bf 	bl	800737a <USBD_CtlSendStatus>
      break;
 8006ffc:	e010      	b.n	8007020 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f9bb 	bl	800737a <USBD_CtlSendStatus>
      break;
 8007004:	e00c      	b.n	8007020 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007006:	6839      	ldr	r1, [r7, #0]
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f8eb 	bl	80071e4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800700e:	4b07      	ldr	r3, [pc, #28]	; (800702c <USBD_SetConfig+0x148>)
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	4619      	mov	r1, r3
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f7ff f8f7 	bl	8006208 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800701a:	2303      	movs	r3, #3
 800701c:	73fb      	strb	r3, [r7, #15]
      break;
 800701e:	bf00      	nop
  }

  return ret;
 8007020:	7bfb      	ldrb	r3, [r7, #15]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	2000021c 	.word	0x2000021c

08007030 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	88db      	ldrh	r3, [r3, #6]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d004      	beq.n	800704c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f8cd 	bl	80071e4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800704a:	e023      	b.n	8007094 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b02      	cmp	r3, #2
 8007056:	dc02      	bgt.n	800705e <USBD_GetConfig+0x2e>
 8007058:	2b00      	cmp	r3, #0
 800705a:	dc03      	bgt.n	8007064 <USBD_GetConfig+0x34>
 800705c:	e015      	b.n	800708a <USBD_GetConfig+0x5a>
 800705e:	2b03      	cmp	r3, #3
 8007060:	d00b      	beq.n	800707a <USBD_GetConfig+0x4a>
 8007062:	e012      	b.n	800708a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	3308      	adds	r3, #8
 800706e:	2201      	movs	r2, #1
 8007070:	4619      	mov	r1, r3
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f927 	bl	80072c6 <USBD_CtlSendData>
        break;
 8007078:	e00c      	b.n	8007094 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	3304      	adds	r3, #4
 800707e:	2201      	movs	r2, #1
 8007080:	4619      	mov	r1, r3
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f91f 	bl	80072c6 <USBD_CtlSendData>
        break;
 8007088:	e004      	b.n	8007094 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800708a:	6839      	ldr	r1, [r7, #0]
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f8a9 	bl	80071e4 <USBD_CtlError>
        break;
 8007092:	bf00      	nop
}
 8007094:	bf00      	nop
 8007096:	3708      	adds	r7, #8
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	3b01      	subs	r3, #1
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d81e      	bhi.n	80070f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	88db      	ldrh	r3, [r3, #6]
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d004      	beq.n	80070c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80070bc:	6839      	ldr	r1, [r7, #0]
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f890 	bl	80071e4 <USBD_CtlError>
        break;
 80070c4:	e01a      	b.n	80070fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d005      	beq.n	80070e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	f043 0202 	orr.w	r2, r3, #2
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	330c      	adds	r3, #12
 80070e6:	2202      	movs	r2, #2
 80070e8:	4619      	mov	r1, r3
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f8eb 	bl	80072c6 <USBD_CtlSendData>
      break;
 80070f0:	e004      	b.n	80070fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80070f2:	6839      	ldr	r1, [r7, #0]
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 f875 	bl	80071e4 <USBD_CtlError>
      break;
 80070fa:	bf00      	nop
  }
}
 80070fc:	bf00      	nop
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	885b      	ldrh	r3, [r3, #2]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d106      	bne.n	8007124 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2201      	movs	r2, #1
 800711a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f92b 	bl	800737a <USBD_CtlSendStatus>
  }
}
 8007124:	bf00      	nop
 8007126:	3708      	adds	r7, #8
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800713c:	b2db      	uxtb	r3, r3
 800713e:	3b01      	subs	r3, #1
 8007140:	2b02      	cmp	r3, #2
 8007142:	d80b      	bhi.n	800715c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	885b      	ldrh	r3, [r3, #2]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d10c      	bne.n	8007166 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f910 	bl	800737a <USBD_CtlSendStatus>
      }
      break;
 800715a:	e004      	b.n	8007166 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800715c:	6839      	ldr	r1, [r7, #0]
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f840 	bl	80071e4 <USBD_CtlError>
      break;
 8007164:	e000      	b.n	8007168 <USBD_ClrFeature+0x3c>
      break;
 8007166:	bf00      	nop
  }
}
 8007168:	bf00      	nop
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	781a      	ldrb	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	3301      	adds	r3, #1
 800718a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	781a      	ldrb	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	3301      	adds	r3, #1
 8007198:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f7ff fabb 	bl	8006716 <SWAPBYTE>
 80071a0:	4603      	mov	r3, r0
 80071a2:	461a      	mov	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	3301      	adds	r3, #1
 80071ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	3301      	adds	r3, #1
 80071b2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f7ff faae 	bl	8006716 <SWAPBYTE>
 80071ba:	4603      	mov	r3, r0
 80071bc:	461a      	mov	r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	3301      	adds	r3, #1
 80071c6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	3301      	adds	r3, #1
 80071cc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f7ff faa1 	bl	8006716 <SWAPBYTE>
 80071d4:	4603      	mov	r3, r0
 80071d6:	461a      	mov	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	80da      	strh	r2, [r3, #6]
}
 80071dc:	bf00      	nop
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80071ee:	2180      	movs	r1, #128	; 0x80
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 fce1 	bl	8007bb8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80071f6:	2100      	movs	r1, #0
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 fcdd 	bl	8007bb8 <USBD_LL_StallEP>
}
 80071fe:	bf00      	nop
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b086      	sub	sp, #24
 800720a:	af00      	add	r7, sp, #0
 800720c:	60f8      	str	r0, [r7, #12]
 800720e:	60b9      	str	r1, [r7, #8]
 8007210:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d036      	beq.n	800728a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007220:	6938      	ldr	r0, [r7, #16]
 8007222:	f000 f836 	bl	8007292 <USBD_GetLen>
 8007226:	4603      	mov	r3, r0
 8007228:	3301      	adds	r3, #1
 800722a:	b29b      	uxth	r3, r3
 800722c:	005b      	lsls	r3, r3, #1
 800722e:	b29a      	uxth	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007234:	7dfb      	ldrb	r3, [r7, #23]
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	4413      	add	r3, r2
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	7812      	ldrb	r2, [r2, #0]
 800723e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007240:	7dfb      	ldrb	r3, [r7, #23]
 8007242:	3301      	adds	r3, #1
 8007244:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007246:	7dfb      	ldrb	r3, [r7, #23]
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	4413      	add	r3, r2
 800724c:	2203      	movs	r2, #3
 800724e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007250:	7dfb      	ldrb	r3, [r7, #23]
 8007252:	3301      	adds	r3, #1
 8007254:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007256:	e013      	b.n	8007280 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007258:	7dfb      	ldrb	r3, [r7, #23]
 800725a:	68ba      	ldr	r2, [r7, #8]
 800725c:	4413      	add	r3, r2
 800725e:	693a      	ldr	r2, [r7, #16]
 8007260:	7812      	ldrb	r2, [r2, #0]
 8007262:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	3301      	adds	r3, #1
 8007268:	613b      	str	r3, [r7, #16]
    idx++;
 800726a:	7dfb      	ldrb	r3, [r7, #23]
 800726c:	3301      	adds	r3, #1
 800726e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007270:	7dfb      	ldrb	r3, [r7, #23]
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	4413      	add	r3, r2
 8007276:	2200      	movs	r2, #0
 8007278:	701a      	strb	r2, [r3, #0]
    idx++;
 800727a:	7dfb      	ldrb	r3, [r7, #23]
 800727c:	3301      	adds	r3, #1
 800727e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1e7      	bne.n	8007258 <USBD_GetString+0x52>
 8007288:	e000      	b.n	800728c <USBD_GetString+0x86>
    return;
 800728a:	bf00      	nop
  }
}
 800728c:	3718      	adds	r7, #24
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007292:	b480      	push	{r7}
 8007294:	b085      	sub	sp, #20
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800729a:	2300      	movs	r3, #0
 800729c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80072a2:	e005      	b.n	80072b0 <USBD_GetLen+0x1e>
  {
    len++;
 80072a4:	7bfb      	ldrb	r3, [r7, #15]
 80072a6:	3301      	adds	r3, #1
 80072a8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	3301      	adds	r3, #1
 80072ae:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1f5      	bne.n	80072a4 <USBD_GetLen+0x12>
  }

  return len;
 80072b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3714      	adds	r7, #20
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b084      	sub	sp, #16
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	60f8      	str	r0, [r7, #12]
 80072ce:	60b9      	str	r1, [r7, #8]
 80072d0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2202      	movs	r2, #2
 80072d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	2100      	movs	r1, #0
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f000 fcec 	bl	8007cca <USBD_LL_Transmit>

  return USBD_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	68ba      	ldr	r2, [r7, #8]
 800730c:	2100      	movs	r1, #0
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f000 fcdb 	bl	8007cca <USBD_LL_Transmit>

  return USBD_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b084      	sub	sp, #16
 8007322:	af00      	add	r7, sp, #0
 8007324:	60f8      	str	r0, [r7, #12]
 8007326:	60b9      	str	r1, [r7, #8]
 8007328:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2203      	movs	r2, #3
 800732e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	2100      	movs	r1, #0
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f000 fcdf 	bl	8007d0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3710      	adds	r7, #16
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	2100      	movs	r1, #0
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f000 fcce 	bl	8007d0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b082      	sub	sp, #8
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2204      	movs	r2, #4
 8007386:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800738a:	2300      	movs	r3, #0
 800738c:	2200      	movs	r2, #0
 800738e:	2100      	movs	r1, #0
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fc9a 	bl	8007cca <USBD_LL_Transmit>

  return USBD_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3708      	adds	r7, #8
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2205      	movs	r2, #5
 80073ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073b0:	2300      	movs	r3, #0
 80073b2:	2200      	movs	r2, #0
 80073b4:	2100      	movs	r1, #0
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fca8 	bl	8007d0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
	...

080073c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80073cc:	2200      	movs	r2, #0
 80073ce:	4912      	ldr	r1, [pc, #72]	; (8007418 <MX_USB_DEVICE_Init+0x50>)
 80073d0:	4812      	ldr	r0, [pc, #72]	; (800741c <MX_USB_DEVICE_Init+0x54>)
 80073d2:	f7fe fe8f 	bl	80060f4 <USBD_Init>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80073dc:	f7fa f846 	bl	800146c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80073e0:	490f      	ldr	r1, [pc, #60]	; (8007420 <MX_USB_DEVICE_Init+0x58>)
 80073e2:	480e      	ldr	r0, [pc, #56]	; (800741c <MX_USB_DEVICE_Init+0x54>)
 80073e4:	f7fe feb6 	bl	8006154 <USBD_RegisterClass>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d001      	beq.n	80073f2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80073ee:	f7fa f83d 	bl	800146c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80073f2:	490c      	ldr	r1, [pc, #48]	; (8007424 <MX_USB_DEVICE_Init+0x5c>)
 80073f4:	4809      	ldr	r0, [pc, #36]	; (800741c <MX_USB_DEVICE_Init+0x54>)
 80073f6:	f7fe fdd7 	bl	8005fa8 <USBD_CDC_RegisterInterface>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d001      	beq.n	8007404 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007400:	f7fa f834 	bl	800146c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007404:	4805      	ldr	r0, [pc, #20]	; (800741c <MX_USB_DEVICE_Init+0x54>)
 8007406:	f7fe fecc 	bl	80061a2 <USBD_Start>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007410:	f7fa f82c 	bl	800146c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007414:	bf00      	nop
 8007416:	bd80      	pop	{r7, pc}
 8007418:	20000130 	.word	0x20000130
 800741c:	20000598 	.word	0x20000598
 8007420:	20000018 	.word	0x20000018
 8007424:	2000011c 	.word	0x2000011c

08007428 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800742c:	2200      	movs	r2, #0
 800742e:	4905      	ldr	r1, [pc, #20]	; (8007444 <CDC_Init_FS+0x1c>)
 8007430:	4805      	ldr	r0, [pc, #20]	; (8007448 <CDC_Init_FS+0x20>)
 8007432:	f7fe fdce 	bl	8005fd2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007436:	4905      	ldr	r1, [pc, #20]	; (800744c <CDC_Init_FS+0x24>)
 8007438:	4803      	ldr	r0, [pc, #12]	; (8007448 <CDC_Init_FS+0x20>)
 800743a:	f7fe fde8 	bl	800600e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800743e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007440:	4618      	mov	r0, r3
 8007442:	bd80      	pop	{r7, pc}
 8007444:	20001068 	.word	0x20001068
 8007448:	20000598 	.word	0x20000598
 800744c:	20000868 	.word	0x20000868

08007450 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007450:	b480      	push	{r7}
 8007452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007454:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007456:	4618      	mov	r0, r3
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	4603      	mov	r3, r0
 8007468:	6039      	str	r1, [r7, #0]
 800746a:	71fb      	strb	r3, [r7, #7]
 800746c:	4613      	mov	r3, r2
 800746e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007470:	79fb      	ldrb	r3, [r7, #7]
 8007472:	2b23      	cmp	r3, #35	; 0x23
 8007474:	d84a      	bhi.n	800750c <CDC_Control_FS+0xac>
 8007476:	a201      	add	r2, pc, #4	; (adr r2, 800747c <CDC_Control_FS+0x1c>)
 8007478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747c:	0800750d 	.word	0x0800750d
 8007480:	0800750d 	.word	0x0800750d
 8007484:	0800750d 	.word	0x0800750d
 8007488:	0800750d 	.word	0x0800750d
 800748c:	0800750d 	.word	0x0800750d
 8007490:	0800750d 	.word	0x0800750d
 8007494:	0800750d 	.word	0x0800750d
 8007498:	0800750d 	.word	0x0800750d
 800749c:	0800750d 	.word	0x0800750d
 80074a0:	0800750d 	.word	0x0800750d
 80074a4:	0800750d 	.word	0x0800750d
 80074a8:	0800750d 	.word	0x0800750d
 80074ac:	0800750d 	.word	0x0800750d
 80074b0:	0800750d 	.word	0x0800750d
 80074b4:	0800750d 	.word	0x0800750d
 80074b8:	0800750d 	.word	0x0800750d
 80074bc:	0800750d 	.word	0x0800750d
 80074c0:	0800750d 	.word	0x0800750d
 80074c4:	0800750d 	.word	0x0800750d
 80074c8:	0800750d 	.word	0x0800750d
 80074cc:	0800750d 	.word	0x0800750d
 80074d0:	0800750d 	.word	0x0800750d
 80074d4:	0800750d 	.word	0x0800750d
 80074d8:	0800750d 	.word	0x0800750d
 80074dc:	0800750d 	.word	0x0800750d
 80074e0:	0800750d 	.word	0x0800750d
 80074e4:	0800750d 	.word	0x0800750d
 80074e8:	0800750d 	.word	0x0800750d
 80074ec:	0800750d 	.word	0x0800750d
 80074f0:	0800750d 	.word	0x0800750d
 80074f4:	0800750d 	.word	0x0800750d
 80074f8:	0800750d 	.word	0x0800750d
 80074fc:	0800750d 	.word	0x0800750d
 8007500:	0800750d 	.word	0x0800750d
 8007504:	0800750d 	.word	0x0800750d
 8007508:	0800750d 	.word	0x0800750d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800750c:	bf00      	nop
  }

  return (USBD_OK);
 800750e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007510:	4618      	mov	r0, r3
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007526:	6879      	ldr	r1, [r7, #4]
 8007528:	4805      	ldr	r0, [pc, #20]	; (8007540 <CDC_Receive_FS+0x24>)
 800752a:	f7fe fd70 	bl	800600e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800752e:	4804      	ldr	r0, [pc, #16]	; (8007540 <CDC_Receive_FS+0x24>)
 8007530:	f7fe fdb6 	bl	80060a0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007534:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007536:	4618      	mov	r0, r3
 8007538:	3708      	adds	r7, #8
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	20000598 	.word	0x20000598

08007544 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	460b      	mov	r3, r1
 800754e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007550:	2300      	movs	r3, #0
 8007552:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007554:	4b0d      	ldr	r3, [pc, #52]	; (800758c <CDC_Transmit_FS+0x48>)
 8007556:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800755a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007562:	2b00      	cmp	r3, #0
 8007564:	d001      	beq.n	800756a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007566:	2301      	movs	r3, #1
 8007568:	e00b      	b.n	8007582 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800756a:	887b      	ldrh	r3, [r7, #2]
 800756c:	461a      	mov	r2, r3
 800756e:	6879      	ldr	r1, [r7, #4]
 8007570:	4806      	ldr	r0, [pc, #24]	; (800758c <CDC_Transmit_FS+0x48>)
 8007572:	f7fe fd2e 	bl	8005fd2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007576:	4805      	ldr	r0, [pc, #20]	; (800758c <CDC_Transmit_FS+0x48>)
 8007578:	f7fe fd62 	bl	8006040 <USBD_CDC_TransmitPacket>
 800757c:	4603      	mov	r3, r0
 800757e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007580:	7bfb      	ldrb	r3, [r7, #15]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	20000598 	.word	0x20000598

08007590 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007590:	b480      	push	{r7}
 8007592:	b087      	sub	sp, #28
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	4613      	mov	r3, r2
 800759c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80075a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	371c      	adds	r7, #28
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
	...

080075b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	4603      	mov	r3, r0
 80075bc:	6039      	str	r1, [r7, #0]
 80075be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	2212      	movs	r2, #18
 80075c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80075c6:	4b03      	ldr	r3, [pc, #12]	; (80075d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr
 80075d4:	2000014c 	.word	0x2000014c

080075d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	4603      	mov	r3, r0
 80075e0:	6039      	str	r1, [r7, #0]
 80075e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	2204      	movs	r2, #4
 80075e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80075ea:	4b03      	ldr	r3, [pc, #12]	; (80075f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr
 80075f8:	20000160 	.word	0x20000160

080075fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	4603      	mov	r3, r0
 8007604:	6039      	str	r1, [r7, #0]
 8007606:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007608:	79fb      	ldrb	r3, [r7, #7]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d105      	bne.n	800761a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800760e:	683a      	ldr	r2, [r7, #0]
 8007610:	4907      	ldr	r1, [pc, #28]	; (8007630 <USBD_FS_ProductStrDescriptor+0x34>)
 8007612:	4808      	ldr	r0, [pc, #32]	; (8007634 <USBD_FS_ProductStrDescriptor+0x38>)
 8007614:	f7ff fdf7 	bl	8007206 <USBD_GetString>
 8007618:	e004      	b.n	8007624 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800761a:	683a      	ldr	r2, [r7, #0]
 800761c:	4904      	ldr	r1, [pc, #16]	; (8007630 <USBD_FS_ProductStrDescriptor+0x34>)
 800761e:	4805      	ldr	r0, [pc, #20]	; (8007634 <USBD_FS_ProductStrDescriptor+0x38>)
 8007620:	f7ff fdf1 	bl	8007206 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007624:	4b02      	ldr	r3, [pc, #8]	; (8007630 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007626:	4618      	mov	r0, r3
 8007628:	3708      	adds	r7, #8
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	20001868 	.word	0x20001868
 8007634:	0800870c 	.word	0x0800870c

08007638 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	4603      	mov	r3, r0
 8007640:	6039      	str	r1, [r7, #0]
 8007642:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	4904      	ldr	r1, [pc, #16]	; (8007658 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007648:	4804      	ldr	r0, [pc, #16]	; (800765c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800764a:	f7ff fddc 	bl	8007206 <USBD_GetString>
  return USBD_StrDesc;
 800764e:	4b02      	ldr	r3, [pc, #8]	; (8007658 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007650:	4618      	mov	r0, r3
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	20001868 	.word	0x20001868
 800765c:	08008718 	.word	0x08008718

08007660 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	4603      	mov	r3, r0
 8007668:	6039      	str	r1, [r7, #0]
 800766a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	221a      	movs	r2, #26
 8007670:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007672:	f000 f843 	bl	80076fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007676:	4b02      	ldr	r3, [pc, #8]	; (8007680 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007678:	4618      	mov	r0, r3
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	20000164 	.word	0x20000164

08007684 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	4603      	mov	r3, r0
 800768c:	6039      	str	r1, [r7, #0]
 800768e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007690:	79fb      	ldrb	r3, [r7, #7]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d105      	bne.n	80076a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007696:	683a      	ldr	r2, [r7, #0]
 8007698:	4907      	ldr	r1, [pc, #28]	; (80076b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800769a:	4808      	ldr	r0, [pc, #32]	; (80076bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800769c:	f7ff fdb3 	bl	8007206 <USBD_GetString>
 80076a0:	e004      	b.n	80076ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	4904      	ldr	r1, [pc, #16]	; (80076b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80076a6:	4805      	ldr	r0, [pc, #20]	; (80076bc <USBD_FS_ConfigStrDescriptor+0x38>)
 80076a8:	f7ff fdad 	bl	8007206 <USBD_GetString>
  }
  return USBD_StrDesc;
 80076ac:	4b02      	ldr	r3, [pc, #8]	; (80076b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3708      	adds	r7, #8
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	20001868 	.word	0x20001868
 80076bc:	0800872c 	.word	0x0800872c

080076c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	4603      	mov	r3, r0
 80076c8:	6039      	str	r1, [r7, #0]
 80076ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80076cc:	79fb      	ldrb	r3, [r7, #7]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d105      	bne.n	80076de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	4907      	ldr	r1, [pc, #28]	; (80076f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80076d6:	4808      	ldr	r0, [pc, #32]	; (80076f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80076d8:	f7ff fd95 	bl	8007206 <USBD_GetString>
 80076dc:	e004      	b.n	80076e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	4904      	ldr	r1, [pc, #16]	; (80076f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80076e2:	4805      	ldr	r0, [pc, #20]	; (80076f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80076e4:	f7ff fd8f 	bl	8007206 <USBD_GetString>
  }
  return USBD_StrDesc;
 80076e8:	4b02      	ldr	r3, [pc, #8]	; (80076f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3708      	adds	r7, #8
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	20001868 	.word	0x20001868
 80076f8:	08008738 	.word	0x08008738

080076fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007702:	4b0f      	ldr	r3, [pc, #60]	; (8007740 <Get_SerialNum+0x44>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007708:	4b0e      	ldr	r3, [pc, #56]	; (8007744 <Get_SerialNum+0x48>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800770e:	4b0e      	ldr	r3, [pc, #56]	; (8007748 <Get_SerialNum+0x4c>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4413      	add	r3, r2
 800771a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d009      	beq.n	8007736 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007722:	2208      	movs	r2, #8
 8007724:	4909      	ldr	r1, [pc, #36]	; (800774c <Get_SerialNum+0x50>)
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f000 f814 	bl	8007754 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800772c:	2204      	movs	r2, #4
 800772e:	4908      	ldr	r1, [pc, #32]	; (8007750 <Get_SerialNum+0x54>)
 8007730:	68b8      	ldr	r0, [r7, #8]
 8007732:	f000 f80f 	bl	8007754 <IntToUnicode>
  }
}
 8007736:	bf00      	nop
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	1fff7a10 	.word	0x1fff7a10
 8007744:	1fff7a14 	.word	0x1fff7a14
 8007748:	1fff7a18 	.word	0x1fff7a18
 800774c:	20000166 	.word	0x20000166
 8007750:	20000176 	.word	0x20000176

08007754 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007754:	b480      	push	{r7}
 8007756:	b087      	sub	sp, #28
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	4613      	mov	r3, r2
 8007760:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007762:	2300      	movs	r3, #0
 8007764:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007766:	2300      	movs	r3, #0
 8007768:	75fb      	strb	r3, [r7, #23]
 800776a:	e027      	b.n	80077bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	0f1b      	lsrs	r3, r3, #28
 8007770:	2b09      	cmp	r3, #9
 8007772:	d80b      	bhi.n	800778c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	0f1b      	lsrs	r3, r3, #28
 8007778:	b2da      	uxtb	r2, r3
 800777a:	7dfb      	ldrb	r3, [r7, #23]
 800777c:	005b      	lsls	r3, r3, #1
 800777e:	4619      	mov	r1, r3
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	440b      	add	r3, r1
 8007784:	3230      	adds	r2, #48	; 0x30
 8007786:	b2d2      	uxtb	r2, r2
 8007788:	701a      	strb	r2, [r3, #0]
 800778a:	e00a      	b.n	80077a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	0f1b      	lsrs	r3, r3, #28
 8007790:	b2da      	uxtb	r2, r3
 8007792:	7dfb      	ldrb	r3, [r7, #23]
 8007794:	005b      	lsls	r3, r3, #1
 8007796:	4619      	mov	r1, r3
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	440b      	add	r3, r1
 800779c:	3237      	adds	r2, #55	; 0x37
 800779e:	b2d2      	uxtb	r2, r2
 80077a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	011b      	lsls	r3, r3, #4
 80077a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80077a8:	7dfb      	ldrb	r3, [r7, #23]
 80077aa:	005b      	lsls	r3, r3, #1
 80077ac:	3301      	adds	r3, #1
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	4413      	add	r3, r2
 80077b2:	2200      	movs	r2, #0
 80077b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80077b6:	7dfb      	ldrb	r3, [r7, #23]
 80077b8:	3301      	adds	r3, #1
 80077ba:	75fb      	strb	r3, [r7, #23]
 80077bc:	7dfa      	ldrb	r2, [r7, #23]
 80077be:	79fb      	ldrb	r3, [r7, #7]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d3d3      	bcc.n	800776c <IntToUnicode+0x18>
  }
}
 80077c4:	bf00      	nop
 80077c6:	bf00      	nop
 80077c8:	371c      	adds	r7, #28
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
	...

080077d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b08a      	sub	sp, #40	; 0x28
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077dc:	f107 0314 	add.w	r3, r7, #20
 80077e0:	2200      	movs	r2, #0
 80077e2:	601a      	str	r2, [r3, #0]
 80077e4:	605a      	str	r2, [r3, #4]
 80077e6:	609a      	str	r2, [r3, #8]
 80077e8:	60da      	str	r2, [r3, #12]
 80077ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077f4:	d13a      	bne.n	800786c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077f6:	2300      	movs	r3, #0
 80077f8:	613b      	str	r3, [r7, #16]
 80077fa:	4b1e      	ldr	r3, [pc, #120]	; (8007874 <HAL_PCD_MspInit+0xa0>)
 80077fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fe:	4a1d      	ldr	r2, [pc, #116]	; (8007874 <HAL_PCD_MspInit+0xa0>)
 8007800:	f043 0301 	orr.w	r3, r3, #1
 8007804:	6313      	str	r3, [r2, #48]	; 0x30
 8007806:	4b1b      	ldr	r3, [pc, #108]	; (8007874 <HAL_PCD_MspInit+0xa0>)
 8007808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780a:	f003 0301 	and.w	r3, r3, #1
 800780e:	613b      	str	r3, [r7, #16]
 8007810:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007812:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007818:	2302      	movs	r3, #2
 800781a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800781c:	2300      	movs	r3, #0
 800781e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007820:	2303      	movs	r3, #3
 8007822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007824:	230a      	movs	r3, #10
 8007826:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007828:	f107 0314 	add.w	r3, r7, #20
 800782c:	4619      	mov	r1, r3
 800782e:	4812      	ldr	r0, [pc, #72]	; (8007878 <HAL_PCD_MspInit+0xa4>)
 8007830:	f7fa f92a 	bl	8001a88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007834:	4b0f      	ldr	r3, [pc, #60]	; (8007874 <HAL_PCD_MspInit+0xa0>)
 8007836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007838:	4a0e      	ldr	r2, [pc, #56]	; (8007874 <HAL_PCD_MspInit+0xa0>)
 800783a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800783e:	6353      	str	r3, [r2, #52]	; 0x34
 8007840:	2300      	movs	r3, #0
 8007842:	60fb      	str	r3, [r7, #12]
 8007844:	4b0b      	ldr	r3, [pc, #44]	; (8007874 <HAL_PCD_MspInit+0xa0>)
 8007846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007848:	4a0a      	ldr	r2, [pc, #40]	; (8007874 <HAL_PCD_MspInit+0xa0>)
 800784a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800784e:	6453      	str	r3, [r2, #68]	; 0x44
 8007850:	4b08      	ldr	r3, [pc, #32]	; (8007874 <HAL_PCD_MspInit+0xa0>)
 8007852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007858:	60fb      	str	r3, [r7, #12]
 800785a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800785c:	2200      	movs	r2, #0
 800785e:	2100      	movs	r1, #0
 8007860:	2043      	movs	r0, #67	; 0x43
 8007862:	f7fa f8da 	bl	8001a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007866:	2043      	movs	r0, #67	; 0x43
 8007868:	f7fa f8f3 	bl	8001a52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800786c:	bf00      	nop
 800786e:	3728      	adds	r7, #40	; 0x28
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	40023800 	.word	0x40023800
 8007878:	40020000 	.word	0x40020000

0800787c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007890:	4619      	mov	r1, r3
 8007892:	4610      	mov	r0, r2
 8007894:	f7fe fcd0 	bl	8006238 <USBD_LL_SetupStage>
}
 8007898:	bf00      	nop
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	460b      	mov	r3, r1
 80078aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80078b2:	78fa      	ldrb	r2, [r7, #3]
 80078b4:	6879      	ldr	r1, [r7, #4]
 80078b6:	4613      	mov	r3, r2
 80078b8:	00db      	lsls	r3, r3, #3
 80078ba:	1a9b      	subs	r3, r3, r2
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	440b      	add	r3, r1
 80078c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	78fb      	ldrb	r3, [r7, #3]
 80078c8:	4619      	mov	r1, r3
 80078ca:	f7fe fd0a 	bl	80062e2 <USBD_LL_DataOutStage>
}
 80078ce:	bf00      	nop
 80078d0:	3708      	adds	r7, #8
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b082      	sub	sp, #8
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
 80078de:	460b      	mov	r3, r1
 80078e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80078e8:	78fa      	ldrb	r2, [r7, #3]
 80078ea:	6879      	ldr	r1, [r7, #4]
 80078ec:	4613      	mov	r3, r2
 80078ee:	00db      	lsls	r3, r3, #3
 80078f0:	1a9b      	subs	r3, r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	440b      	add	r3, r1
 80078f6:	3348      	adds	r3, #72	; 0x48
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	78fb      	ldrb	r3, [r7, #3]
 80078fc:	4619      	mov	r1, r3
 80078fe:	f7fe fd53 	bl	80063a8 <USBD_LL_DataInStage>
}
 8007902:	bf00      	nop
 8007904:	3708      	adds	r7, #8
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b082      	sub	sp, #8
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007918:	4618      	mov	r0, r3
 800791a:	f7fe fe67 	bl	80065ec <USBD_LL_SOF>
}
 800791e:	bf00      	nop
 8007920:	3708      	adds	r7, #8
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b084      	sub	sp, #16
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800792e:	2301      	movs	r3, #1
 8007930:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d102      	bne.n	8007940 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800793a:	2300      	movs	r3, #0
 800793c:	73fb      	strb	r3, [r7, #15]
 800793e:	e008      	b.n	8007952 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	2b02      	cmp	r3, #2
 8007946:	d102      	bne.n	800794e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007948:	2301      	movs	r3, #1
 800794a:	73fb      	strb	r3, [r7, #15]
 800794c:	e001      	b.n	8007952 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800794e:	f7f9 fd8d 	bl	800146c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007958:	7bfa      	ldrb	r2, [r7, #15]
 800795a:	4611      	mov	r1, r2
 800795c:	4618      	mov	r0, r3
 800795e:	f7fe fe07 	bl	8006570 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007968:	4618      	mov	r0, r3
 800796a:	f7fe fdb3 	bl	80064d4 <USBD_LL_Reset>
}
 800796e:	bf00      	nop
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
	...

08007978 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007986:	4618      	mov	r0, r3
 8007988:	f7fe fe02 	bl	8006590 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	6812      	ldr	r2, [r2, #0]
 800799a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800799e:	f043 0301 	orr.w	r3, r3, #1
 80079a2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a1b      	ldr	r3, [r3, #32]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d005      	beq.n	80079b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80079ac:	4b04      	ldr	r3, [pc, #16]	; (80079c0 <HAL_PCD_SuspendCallback+0x48>)
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	4a03      	ldr	r2, [pc, #12]	; (80079c0 <HAL_PCD_SuspendCallback+0x48>)
 80079b2:	f043 0306 	orr.w	r3, r3, #6
 80079b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80079b8:	bf00      	nop
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	e000ed00 	.word	0xe000ed00

080079c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7fe fdf2 	bl	80065bc <USBD_LL_Resume>
}
 80079d8:	bf00      	nop
 80079da:	3708      	adds	r7, #8
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	460b      	mov	r3, r1
 80079ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079f2:	78fa      	ldrb	r2, [r7, #3]
 80079f4:	4611      	mov	r1, r2
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7fe fe40 	bl	800667c <USBD_LL_IsoOUTIncomplete>
}
 80079fc:	bf00      	nop
 80079fe:	3708      	adds	r7, #8
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a16:	78fa      	ldrb	r2, [r7, #3]
 8007a18:	4611      	mov	r1, r2
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7fe fe08 	bl	8006630 <USBD_LL_IsoINIncomplete>
}
 8007a20:	bf00      	nop
 8007a22:	3708      	adds	r7, #8
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7fe fe46 	bl	80066c8 <USBD_LL_DevConnected>
}
 8007a3c:	bf00      	nop
 8007a3e:	3708      	adds	r7, #8
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fe fe43 	bl	80066de <USBD_LL_DevDisconnected>
}
 8007a58:	bf00      	nop
 8007a5a:	3708      	adds	r7, #8
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d13c      	bne.n	8007aea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007a70:	4a20      	ldr	r2, [pc, #128]	; (8007af4 <USBD_LL_Init+0x94>)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4a1e      	ldr	r2, [pc, #120]	; (8007af4 <USBD_LL_Init+0x94>)
 8007a7c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007a80:	4b1c      	ldr	r3, [pc, #112]	; (8007af4 <USBD_LL_Init+0x94>)
 8007a82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007a86:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007a88:	4b1a      	ldr	r3, [pc, #104]	; (8007af4 <USBD_LL_Init+0x94>)
 8007a8a:	2204      	movs	r2, #4
 8007a8c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007a8e:	4b19      	ldr	r3, [pc, #100]	; (8007af4 <USBD_LL_Init+0x94>)
 8007a90:	2202      	movs	r2, #2
 8007a92:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007a94:	4b17      	ldr	r3, [pc, #92]	; (8007af4 <USBD_LL_Init+0x94>)
 8007a96:	2200      	movs	r2, #0
 8007a98:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007a9a:	4b16      	ldr	r3, [pc, #88]	; (8007af4 <USBD_LL_Init+0x94>)
 8007a9c:	2202      	movs	r2, #2
 8007a9e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007aa0:	4b14      	ldr	r3, [pc, #80]	; (8007af4 <USBD_LL_Init+0x94>)
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007aa6:	4b13      	ldr	r3, [pc, #76]	; (8007af4 <USBD_LL_Init+0x94>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007aac:	4b11      	ldr	r3, [pc, #68]	; (8007af4 <USBD_LL_Init+0x94>)
 8007aae:	2200      	movs	r2, #0
 8007ab0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007ab2:	4b10      	ldr	r3, [pc, #64]	; (8007af4 <USBD_LL_Init+0x94>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007ab8:	4b0e      	ldr	r3, [pc, #56]	; (8007af4 <USBD_LL_Init+0x94>)
 8007aba:	2200      	movs	r2, #0
 8007abc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007abe:	480d      	ldr	r0, [pc, #52]	; (8007af4 <USBD_LL_Init+0x94>)
 8007ac0:	f7fa f9af 	bl	8001e22 <HAL_PCD_Init>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007aca:	f7f9 fccf 	bl	800146c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007ace:	2180      	movs	r1, #128	; 0x80
 8007ad0:	4808      	ldr	r0, [pc, #32]	; (8007af4 <USBD_LL_Init+0x94>)
 8007ad2:	f7fb fb0c 	bl	80030ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007ad6:	2240      	movs	r2, #64	; 0x40
 8007ad8:	2100      	movs	r1, #0
 8007ada:	4806      	ldr	r0, [pc, #24]	; (8007af4 <USBD_LL_Init+0x94>)
 8007adc:	f7fb fac0 	bl	8003060 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007ae0:	2280      	movs	r2, #128	; 0x80
 8007ae2:	2101      	movs	r1, #1
 8007ae4:	4803      	ldr	r0, [pc, #12]	; (8007af4 <USBD_LL_Init+0x94>)
 8007ae6:	f7fb fabb 	bl	8003060 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	20001a68 	.word	0x20001a68

08007af8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b00:	2300      	movs	r3, #0
 8007b02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b04:	2300      	movs	r3, #0
 8007b06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fa faa4 	bl	800205c <HAL_PCD_Start>
 8007b14:	4603      	mov	r3, r0
 8007b16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 f942 	bl	8007da4 <USBD_Get_USB_Status>
 8007b20:	4603      	mov	r3, r0
 8007b22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b084      	sub	sp, #16
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
 8007b36:	4608      	mov	r0, r1
 8007b38:	4611      	mov	r1, r2
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	70fb      	strb	r3, [r7, #3]
 8007b40:	460b      	mov	r3, r1
 8007b42:	70bb      	strb	r3, [r7, #2]
 8007b44:	4613      	mov	r3, r2
 8007b46:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007b56:	78bb      	ldrb	r3, [r7, #2]
 8007b58:	883a      	ldrh	r2, [r7, #0]
 8007b5a:	78f9      	ldrb	r1, [r7, #3]
 8007b5c:	f7fa fe88 	bl	8002870 <HAL_PCD_EP_Open>
 8007b60:	4603      	mov	r3, r0
 8007b62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b64:	7bfb      	ldrb	r3, [r7, #15]
 8007b66:	4618      	mov	r0, r3
 8007b68:	f000 f91c 	bl	8007da4 <USBD_Get_USB_Status>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b70:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b084      	sub	sp, #16
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	460b      	mov	r3, r1
 8007b84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b86:	2300      	movs	r3, #0
 8007b88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b94:	78fa      	ldrb	r2, [r7, #3]
 8007b96:	4611      	mov	r1, r2
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7fa fed1 	bl	8002940 <HAL_PCD_EP_Close>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ba2:	7bfb      	ldrb	r3, [r7, #15]
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f000 f8fd 	bl	8007da4 <USBD_Get_USB_Status>
 8007baa:	4603      	mov	r3, r0
 8007bac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bae:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007bd2:	78fa      	ldrb	r2, [r7, #3]
 8007bd4:	4611      	mov	r1, r2
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fa ffa9 	bl	8002b2e <HAL_PCD_EP_SetStall>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
 8007be2:	4618      	mov	r0, r3
 8007be4:	f000 f8de 	bl	8007da4 <USBD_Get_USB_Status>
 8007be8:	4603      	mov	r3, r0
 8007bea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bec:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b084      	sub	sp, #16
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	460b      	mov	r3, r1
 8007c00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c02:	2300      	movs	r3, #0
 8007c04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c06:	2300      	movs	r3, #0
 8007c08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c10:	78fa      	ldrb	r2, [r7, #3]
 8007c12:	4611      	mov	r1, r2
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7fa ffee 	bl	8002bf6 <HAL_PCD_EP_ClrStall>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c1e:	7bfb      	ldrb	r3, [r7, #15]
 8007c20:	4618      	mov	r0, r3
 8007c22:	f000 f8bf 	bl	8007da4 <USBD_Get_USB_Status>
 8007c26:	4603      	mov	r3, r0
 8007c28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c46:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007c48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	da0b      	bge.n	8007c68 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007c50:	78fb      	ldrb	r3, [r7, #3]
 8007c52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c56:	68f9      	ldr	r1, [r7, #12]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	00db      	lsls	r3, r3, #3
 8007c5c:	1a9b      	subs	r3, r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	440b      	add	r3, r1
 8007c62:	333e      	adds	r3, #62	; 0x3e
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	e00b      	b.n	8007c80 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007c68:	78fb      	ldrb	r3, [r7, #3]
 8007c6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c6e:	68f9      	ldr	r1, [r7, #12]
 8007c70:	4613      	mov	r3, r2
 8007c72:	00db      	lsls	r3, r3, #3
 8007c74:	1a9b      	subs	r3, r3, r2
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	440b      	add	r3, r1
 8007c7a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007c7e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3714      	adds	r7, #20
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	460b      	mov	r3, r1
 8007c96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ca6:	78fa      	ldrb	r2, [r7, #3]
 8007ca8:	4611      	mov	r1, r2
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fa fdbb 	bl	8002826 <HAL_PCD_SetAddress>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cb4:	7bfb      	ldrb	r3, [r7, #15]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f000 f874 	bl	8007da4 <USBD_Get_USB_Status>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b086      	sub	sp, #24
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	60f8      	str	r0, [r7, #12]
 8007cd2:	607a      	str	r2, [r7, #4]
 8007cd4:	603b      	str	r3, [r7, #0]
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007ce8:	7af9      	ldrb	r1, [r7, #11]
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	f7fa fed4 	bl	8002a9a <HAL_PCD_EP_Transmit>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cf6:	7dfb      	ldrb	r3, [r7, #23]
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f000 f853 	bl	8007da4 <USBD_Get_USB_Status>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d02:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3718      	adds	r7, #24
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b086      	sub	sp, #24
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	607a      	str	r2, [r7, #4]
 8007d16:	603b      	str	r3, [r7, #0]
 8007d18:	460b      	mov	r3, r1
 8007d1a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d20:	2300      	movs	r3, #0
 8007d22:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007d2a:	7af9      	ldrb	r1, [r7, #11]
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	f7fa fe50 	bl	80029d4 <HAL_PCD_EP_Receive>
 8007d34:	4603      	mov	r3, r0
 8007d36:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d38:	7dfb      	ldrb	r3, [r7, #23]
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f000 f832 	bl	8007da4 <USBD_Get_USB_Status>
 8007d40:	4603      	mov	r3, r0
 8007d42:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d44:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3718      	adds	r7, #24
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b082      	sub	sp, #8
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
 8007d56:	460b      	mov	r3, r1
 8007d58:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d60:	78fa      	ldrb	r2, [r7, #3]
 8007d62:	4611      	mov	r1, r2
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7fa fe80 	bl	8002a6a <HAL_PCD_EP_GetRxCount>
 8007d6a:	4603      	mov	r3, r0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007d7c:	4b03      	ldr	r3, [pc, #12]	; (8007d8c <USBD_static_malloc+0x18>)
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	370c      	adds	r7, #12
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	20000220 	.word	0x20000220

08007d90 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]

}
 8007d98:	bf00      	nop
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	4603      	mov	r3, r0
 8007dac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dae:	2300      	movs	r3, #0
 8007db0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007db2:	79fb      	ldrb	r3, [r7, #7]
 8007db4:	2b03      	cmp	r3, #3
 8007db6:	d817      	bhi.n	8007de8 <USBD_Get_USB_Status+0x44>
 8007db8:	a201      	add	r2, pc, #4	; (adr r2, 8007dc0 <USBD_Get_USB_Status+0x1c>)
 8007dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dbe:	bf00      	nop
 8007dc0:	08007dd1 	.word	0x08007dd1
 8007dc4:	08007dd7 	.word	0x08007dd7
 8007dc8:	08007ddd 	.word	0x08007ddd
 8007dcc:	08007de3 	.word	0x08007de3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	73fb      	strb	r3, [r7, #15]
    break;
 8007dd4:	e00b      	b.n	8007dee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	73fb      	strb	r3, [r7, #15]
    break;
 8007dda:	e008      	b.n	8007dee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	73fb      	strb	r3, [r7, #15]
    break;
 8007de0:	e005      	b.n	8007dee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007de2:	2303      	movs	r3, #3
 8007de4:	73fb      	strb	r3, [r7, #15]
    break;
 8007de6:	e002      	b.n	8007dee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007de8:	2303      	movs	r3, #3
 8007dea:	73fb      	strb	r3, [r7, #15]
    break;
 8007dec:	bf00      	nop
  }
  return usb_status;
 8007dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3714      	adds	r7, #20
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <__errno>:
 8007dfc:	4b01      	ldr	r3, [pc, #4]	; (8007e04 <__errno+0x8>)
 8007dfe:	6818      	ldr	r0, [r3, #0]
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	20000180 	.word	0x20000180

08007e08 <__libc_init_array>:
 8007e08:	b570      	push	{r4, r5, r6, lr}
 8007e0a:	4d0d      	ldr	r5, [pc, #52]	; (8007e40 <__libc_init_array+0x38>)
 8007e0c:	4c0d      	ldr	r4, [pc, #52]	; (8007e44 <__libc_init_array+0x3c>)
 8007e0e:	1b64      	subs	r4, r4, r5
 8007e10:	10a4      	asrs	r4, r4, #2
 8007e12:	2600      	movs	r6, #0
 8007e14:	42a6      	cmp	r6, r4
 8007e16:	d109      	bne.n	8007e2c <__libc_init_array+0x24>
 8007e18:	4d0b      	ldr	r5, [pc, #44]	; (8007e48 <__libc_init_array+0x40>)
 8007e1a:	4c0c      	ldr	r4, [pc, #48]	; (8007e4c <__libc_init_array+0x44>)
 8007e1c:	f000 fc62 	bl	80086e4 <_init>
 8007e20:	1b64      	subs	r4, r4, r5
 8007e22:	10a4      	asrs	r4, r4, #2
 8007e24:	2600      	movs	r6, #0
 8007e26:	42a6      	cmp	r6, r4
 8007e28:	d105      	bne.n	8007e36 <__libc_init_array+0x2e>
 8007e2a:	bd70      	pop	{r4, r5, r6, pc}
 8007e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e30:	4798      	blx	r3
 8007e32:	3601      	adds	r6, #1
 8007e34:	e7ee      	b.n	8007e14 <__libc_init_array+0xc>
 8007e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e3a:	4798      	blx	r3
 8007e3c:	3601      	adds	r6, #1
 8007e3e:	e7f2      	b.n	8007e26 <__libc_init_array+0x1e>
 8007e40:	08008794 	.word	0x08008794
 8007e44:	08008794 	.word	0x08008794
 8007e48:	08008794 	.word	0x08008794
 8007e4c:	08008798 	.word	0x08008798

08007e50 <memcpy>:
 8007e50:	440a      	add	r2, r1
 8007e52:	4291      	cmp	r1, r2
 8007e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e58:	d100      	bne.n	8007e5c <memcpy+0xc>
 8007e5a:	4770      	bx	lr
 8007e5c:	b510      	push	{r4, lr}
 8007e5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e66:	4291      	cmp	r1, r2
 8007e68:	d1f9      	bne.n	8007e5e <memcpy+0xe>
 8007e6a:	bd10      	pop	{r4, pc}

08007e6c <memset>:
 8007e6c:	4402      	add	r2, r0
 8007e6e:	4603      	mov	r3, r0
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d100      	bne.n	8007e76 <memset+0xa>
 8007e74:	4770      	bx	lr
 8007e76:	f803 1b01 	strb.w	r1, [r3], #1
 8007e7a:	e7f9      	b.n	8007e70 <memset+0x4>

08007e7c <sniprintf>:
 8007e7c:	b40c      	push	{r2, r3}
 8007e7e:	b530      	push	{r4, r5, lr}
 8007e80:	4b17      	ldr	r3, [pc, #92]	; (8007ee0 <sniprintf+0x64>)
 8007e82:	1e0c      	subs	r4, r1, #0
 8007e84:	681d      	ldr	r5, [r3, #0]
 8007e86:	b09d      	sub	sp, #116	; 0x74
 8007e88:	da08      	bge.n	8007e9c <sniprintf+0x20>
 8007e8a:	238b      	movs	r3, #139	; 0x8b
 8007e8c:	602b      	str	r3, [r5, #0]
 8007e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e92:	b01d      	add	sp, #116	; 0x74
 8007e94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e98:	b002      	add	sp, #8
 8007e9a:	4770      	bx	lr
 8007e9c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007ea0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007ea4:	bf14      	ite	ne
 8007ea6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007eaa:	4623      	moveq	r3, r4
 8007eac:	9304      	str	r3, [sp, #16]
 8007eae:	9307      	str	r3, [sp, #28]
 8007eb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007eb4:	9002      	str	r0, [sp, #8]
 8007eb6:	9006      	str	r0, [sp, #24]
 8007eb8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007ebc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007ebe:	ab21      	add	r3, sp, #132	; 0x84
 8007ec0:	a902      	add	r1, sp, #8
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	9301      	str	r3, [sp, #4]
 8007ec6:	f000 f869 	bl	8007f9c <_svfiprintf_r>
 8007eca:	1c43      	adds	r3, r0, #1
 8007ecc:	bfbc      	itt	lt
 8007ece:	238b      	movlt	r3, #139	; 0x8b
 8007ed0:	602b      	strlt	r3, [r5, #0]
 8007ed2:	2c00      	cmp	r4, #0
 8007ed4:	d0dd      	beq.n	8007e92 <sniprintf+0x16>
 8007ed6:	9b02      	ldr	r3, [sp, #8]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	701a      	strb	r2, [r3, #0]
 8007edc:	e7d9      	b.n	8007e92 <sniprintf+0x16>
 8007ede:	bf00      	nop
 8007ee0:	20000180 	.word	0x20000180

08007ee4 <__ssputs_r>:
 8007ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee8:	688e      	ldr	r6, [r1, #8]
 8007eea:	429e      	cmp	r6, r3
 8007eec:	4682      	mov	sl, r0
 8007eee:	460c      	mov	r4, r1
 8007ef0:	4690      	mov	r8, r2
 8007ef2:	461f      	mov	r7, r3
 8007ef4:	d838      	bhi.n	8007f68 <__ssputs_r+0x84>
 8007ef6:	898a      	ldrh	r2, [r1, #12]
 8007ef8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007efc:	d032      	beq.n	8007f64 <__ssputs_r+0x80>
 8007efe:	6825      	ldr	r5, [r4, #0]
 8007f00:	6909      	ldr	r1, [r1, #16]
 8007f02:	eba5 0901 	sub.w	r9, r5, r1
 8007f06:	6965      	ldr	r5, [r4, #20]
 8007f08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f10:	3301      	adds	r3, #1
 8007f12:	444b      	add	r3, r9
 8007f14:	106d      	asrs	r5, r5, #1
 8007f16:	429d      	cmp	r5, r3
 8007f18:	bf38      	it	cc
 8007f1a:	461d      	movcc	r5, r3
 8007f1c:	0553      	lsls	r3, r2, #21
 8007f1e:	d531      	bpl.n	8007f84 <__ssputs_r+0xa0>
 8007f20:	4629      	mov	r1, r5
 8007f22:	f000 fb39 	bl	8008598 <_malloc_r>
 8007f26:	4606      	mov	r6, r0
 8007f28:	b950      	cbnz	r0, 8007f40 <__ssputs_r+0x5c>
 8007f2a:	230c      	movs	r3, #12
 8007f2c:	f8ca 3000 	str.w	r3, [sl]
 8007f30:	89a3      	ldrh	r3, [r4, #12]
 8007f32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f36:	81a3      	strh	r3, [r4, #12]
 8007f38:	f04f 30ff 	mov.w	r0, #4294967295
 8007f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f40:	6921      	ldr	r1, [r4, #16]
 8007f42:	464a      	mov	r2, r9
 8007f44:	f7ff ff84 	bl	8007e50 <memcpy>
 8007f48:	89a3      	ldrh	r3, [r4, #12]
 8007f4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f52:	81a3      	strh	r3, [r4, #12]
 8007f54:	6126      	str	r6, [r4, #16]
 8007f56:	6165      	str	r5, [r4, #20]
 8007f58:	444e      	add	r6, r9
 8007f5a:	eba5 0509 	sub.w	r5, r5, r9
 8007f5e:	6026      	str	r6, [r4, #0]
 8007f60:	60a5      	str	r5, [r4, #8]
 8007f62:	463e      	mov	r6, r7
 8007f64:	42be      	cmp	r6, r7
 8007f66:	d900      	bls.n	8007f6a <__ssputs_r+0x86>
 8007f68:	463e      	mov	r6, r7
 8007f6a:	4632      	mov	r2, r6
 8007f6c:	6820      	ldr	r0, [r4, #0]
 8007f6e:	4641      	mov	r1, r8
 8007f70:	f000 faa8 	bl	80084c4 <memmove>
 8007f74:	68a3      	ldr	r3, [r4, #8]
 8007f76:	6822      	ldr	r2, [r4, #0]
 8007f78:	1b9b      	subs	r3, r3, r6
 8007f7a:	4432      	add	r2, r6
 8007f7c:	60a3      	str	r3, [r4, #8]
 8007f7e:	6022      	str	r2, [r4, #0]
 8007f80:	2000      	movs	r0, #0
 8007f82:	e7db      	b.n	8007f3c <__ssputs_r+0x58>
 8007f84:	462a      	mov	r2, r5
 8007f86:	f000 fb61 	bl	800864c <_realloc_r>
 8007f8a:	4606      	mov	r6, r0
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	d1e1      	bne.n	8007f54 <__ssputs_r+0x70>
 8007f90:	6921      	ldr	r1, [r4, #16]
 8007f92:	4650      	mov	r0, sl
 8007f94:	f000 fab0 	bl	80084f8 <_free_r>
 8007f98:	e7c7      	b.n	8007f2a <__ssputs_r+0x46>
	...

08007f9c <_svfiprintf_r>:
 8007f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa0:	4698      	mov	r8, r3
 8007fa2:	898b      	ldrh	r3, [r1, #12]
 8007fa4:	061b      	lsls	r3, r3, #24
 8007fa6:	b09d      	sub	sp, #116	; 0x74
 8007fa8:	4607      	mov	r7, r0
 8007faa:	460d      	mov	r5, r1
 8007fac:	4614      	mov	r4, r2
 8007fae:	d50e      	bpl.n	8007fce <_svfiprintf_r+0x32>
 8007fb0:	690b      	ldr	r3, [r1, #16]
 8007fb2:	b963      	cbnz	r3, 8007fce <_svfiprintf_r+0x32>
 8007fb4:	2140      	movs	r1, #64	; 0x40
 8007fb6:	f000 faef 	bl	8008598 <_malloc_r>
 8007fba:	6028      	str	r0, [r5, #0]
 8007fbc:	6128      	str	r0, [r5, #16]
 8007fbe:	b920      	cbnz	r0, 8007fca <_svfiprintf_r+0x2e>
 8007fc0:	230c      	movs	r3, #12
 8007fc2:	603b      	str	r3, [r7, #0]
 8007fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc8:	e0d1      	b.n	800816e <_svfiprintf_r+0x1d2>
 8007fca:	2340      	movs	r3, #64	; 0x40
 8007fcc:	616b      	str	r3, [r5, #20]
 8007fce:	2300      	movs	r3, #0
 8007fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8007fd2:	2320      	movs	r3, #32
 8007fd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fdc:	2330      	movs	r3, #48	; 0x30
 8007fde:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008188 <_svfiprintf_r+0x1ec>
 8007fe2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fe6:	f04f 0901 	mov.w	r9, #1
 8007fea:	4623      	mov	r3, r4
 8007fec:	469a      	mov	sl, r3
 8007fee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ff2:	b10a      	cbz	r2, 8007ff8 <_svfiprintf_r+0x5c>
 8007ff4:	2a25      	cmp	r2, #37	; 0x25
 8007ff6:	d1f9      	bne.n	8007fec <_svfiprintf_r+0x50>
 8007ff8:	ebba 0b04 	subs.w	fp, sl, r4
 8007ffc:	d00b      	beq.n	8008016 <_svfiprintf_r+0x7a>
 8007ffe:	465b      	mov	r3, fp
 8008000:	4622      	mov	r2, r4
 8008002:	4629      	mov	r1, r5
 8008004:	4638      	mov	r0, r7
 8008006:	f7ff ff6d 	bl	8007ee4 <__ssputs_r>
 800800a:	3001      	adds	r0, #1
 800800c:	f000 80aa 	beq.w	8008164 <_svfiprintf_r+0x1c8>
 8008010:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008012:	445a      	add	r2, fp
 8008014:	9209      	str	r2, [sp, #36]	; 0x24
 8008016:	f89a 3000 	ldrb.w	r3, [sl]
 800801a:	2b00      	cmp	r3, #0
 800801c:	f000 80a2 	beq.w	8008164 <_svfiprintf_r+0x1c8>
 8008020:	2300      	movs	r3, #0
 8008022:	f04f 32ff 	mov.w	r2, #4294967295
 8008026:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800802a:	f10a 0a01 	add.w	sl, sl, #1
 800802e:	9304      	str	r3, [sp, #16]
 8008030:	9307      	str	r3, [sp, #28]
 8008032:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008036:	931a      	str	r3, [sp, #104]	; 0x68
 8008038:	4654      	mov	r4, sl
 800803a:	2205      	movs	r2, #5
 800803c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008040:	4851      	ldr	r0, [pc, #324]	; (8008188 <_svfiprintf_r+0x1ec>)
 8008042:	f7f8 f8cd 	bl	80001e0 <memchr>
 8008046:	9a04      	ldr	r2, [sp, #16]
 8008048:	b9d8      	cbnz	r0, 8008082 <_svfiprintf_r+0xe6>
 800804a:	06d0      	lsls	r0, r2, #27
 800804c:	bf44      	itt	mi
 800804e:	2320      	movmi	r3, #32
 8008050:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008054:	0711      	lsls	r1, r2, #28
 8008056:	bf44      	itt	mi
 8008058:	232b      	movmi	r3, #43	; 0x2b
 800805a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800805e:	f89a 3000 	ldrb.w	r3, [sl]
 8008062:	2b2a      	cmp	r3, #42	; 0x2a
 8008064:	d015      	beq.n	8008092 <_svfiprintf_r+0xf6>
 8008066:	9a07      	ldr	r2, [sp, #28]
 8008068:	4654      	mov	r4, sl
 800806a:	2000      	movs	r0, #0
 800806c:	f04f 0c0a 	mov.w	ip, #10
 8008070:	4621      	mov	r1, r4
 8008072:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008076:	3b30      	subs	r3, #48	; 0x30
 8008078:	2b09      	cmp	r3, #9
 800807a:	d94e      	bls.n	800811a <_svfiprintf_r+0x17e>
 800807c:	b1b0      	cbz	r0, 80080ac <_svfiprintf_r+0x110>
 800807e:	9207      	str	r2, [sp, #28]
 8008080:	e014      	b.n	80080ac <_svfiprintf_r+0x110>
 8008082:	eba0 0308 	sub.w	r3, r0, r8
 8008086:	fa09 f303 	lsl.w	r3, r9, r3
 800808a:	4313      	orrs	r3, r2
 800808c:	9304      	str	r3, [sp, #16]
 800808e:	46a2      	mov	sl, r4
 8008090:	e7d2      	b.n	8008038 <_svfiprintf_r+0x9c>
 8008092:	9b03      	ldr	r3, [sp, #12]
 8008094:	1d19      	adds	r1, r3, #4
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	9103      	str	r1, [sp, #12]
 800809a:	2b00      	cmp	r3, #0
 800809c:	bfbb      	ittet	lt
 800809e:	425b      	neglt	r3, r3
 80080a0:	f042 0202 	orrlt.w	r2, r2, #2
 80080a4:	9307      	strge	r3, [sp, #28]
 80080a6:	9307      	strlt	r3, [sp, #28]
 80080a8:	bfb8      	it	lt
 80080aa:	9204      	strlt	r2, [sp, #16]
 80080ac:	7823      	ldrb	r3, [r4, #0]
 80080ae:	2b2e      	cmp	r3, #46	; 0x2e
 80080b0:	d10c      	bne.n	80080cc <_svfiprintf_r+0x130>
 80080b2:	7863      	ldrb	r3, [r4, #1]
 80080b4:	2b2a      	cmp	r3, #42	; 0x2a
 80080b6:	d135      	bne.n	8008124 <_svfiprintf_r+0x188>
 80080b8:	9b03      	ldr	r3, [sp, #12]
 80080ba:	1d1a      	adds	r2, r3, #4
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	9203      	str	r2, [sp, #12]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	bfb8      	it	lt
 80080c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80080c8:	3402      	adds	r4, #2
 80080ca:	9305      	str	r3, [sp, #20]
 80080cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008198 <_svfiprintf_r+0x1fc>
 80080d0:	7821      	ldrb	r1, [r4, #0]
 80080d2:	2203      	movs	r2, #3
 80080d4:	4650      	mov	r0, sl
 80080d6:	f7f8 f883 	bl	80001e0 <memchr>
 80080da:	b140      	cbz	r0, 80080ee <_svfiprintf_r+0x152>
 80080dc:	2340      	movs	r3, #64	; 0x40
 80080de:	eba0 000a 	sub.w	r0, r0, sl
 80080e2:	fa03 f000 	lsl.w	r0, r3, r0
 80080e6:	9b04      	ldr	r3, [sp, #16]
 80080e8:	4303      	orrs	r3, r0
 80080ea:	3401      	adds	r4, #1
 80080ec:	9304      	str	r3, [sp, #16]
 80080ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080f2:	4826      	ldr	r0, [pc, #152]	; (800818c <_svfiprintf_r+0x1f0>)
 80080f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080f8:	2206      	movs	r2, #6
 80080fa:	f7f8 f871 	bl	80001e0 <memchr>
 80080fe:	2800      	cmp	r0, #0
 8008100:	d038      	beq.n	8008174 <_svfiprintf_r+0x1d8>
 8008102:	4b23      	ldr	r3, [pc, #140]	; (8008190 <_svfiprintf_r+0x1f4>)
 8008104:	bb1b      	cbnz	r3, 800814e <_svfiprintf_r+0x1b2>
 8008106:	9b03      	ldr	r3, [sp, #12]
 8008108:	3307      	adds	r3, #7
 800810a:	f023 0307 	bic.w	r3, r3, #7
 800810e:	3308      	adds	r3, #8
 8008110:	9303      	str	r3, [sp, #12]
 8008112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008114:	4433      	add	r3, r6
 8008116:	9309      	str	r3, [sp, #36]	; 0x24
 8008118:	e767      	b.n	8007fea <_svfiprintf_r+0x4e>
 800811a:	fb0c 3202 	mla	r2, ip, r2, r3
 800811e:	460c      	mov	r4, r1
 8008120:	2001      	movs	r0, #1
 8008122:	e7a5      	b.n	8008070 <_svfiprintf_r+0xd4>
 8008124:	2300      	movs	r3, #0
 8008126:	3401      	adds	r4, #1
 8008128:	9305      	str	r3, [sp, #20]
 800812a:	4619      	mov	r1, r3
 800812c:	f04f 0c0a 	mov.w	ip, #10
 8008130:	4620      	mov	r0, r4
 8008132:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008136:	3a30      	subs	r2, #48	; 0x30
 8008138:	2a09      	cmp	r2, #9
 800813a:	d903      	bls.n	8008144 <_svfiprintf_r+0x1a8>
 800813c:	2b00      	cmp	r3, #0
 800813e:	d0c5      	beq.n	80080cc <_svfiprintf_r+0x130>
 8008140:	9105      	str	r1, [sp, #20]
 8008142:	e7c3      	b.n	80080cc <_svfiprintf_r+0x130>
 8008144:	fb0c 2101 	mla	r1, ip, r1, r2
 8008148:	4604      	mov	r4, r0
 800814a:	2301      	movs	r3, #1
 800814c:	e7f0      	b.n	8008130 <_svfiprintf_r+0x194>
 800814e:	ab03      	add	r3, sp, #12
 8008150:	9300      	str	r3, [sp, #0]
 8008152:	462a      	mov	r2, r5
 8008154:	4b0f      	ldr	r3, [pc, #60]	; (8008194 <_svfiprintf_r+0x1f8>)
 8008156:	a904      	add	r1, sp, #16
 8008158:	4638      	mov	r0, r7
 800815a:	f3af 8000 	nop.w
 800815e:	1c42      	adds	r2, r0, #1
 8008160:	4606      	mov	r6, r0
 8008162:	d1d6      	bne.n	8008112 <_svfiprintf_r+0x176>
 8008164:	89ab      	ldrh	r3, [r5, #12]
 8008166:	065b      	lsls	r3, r3, #25
 8008168:	f53f af2c 	bmi.w	8007fc4 <_svfiprintf_r+0x28>
 800816c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800816e:	b01d      	add	sp, #116	; 0x74
 8008170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008174:	ab03      	add	r3, sp, #12
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	462a      	mov	r2, r5
 800817a:	4b06      	ldr	r3, [pc, #24]	; (8008194 <_svfiprintf_r+0x1f8>)
 800817c:	a904      	add	r1, sp, #16
 800817e:	4638      	mov	r0, r7
 8008180:	f000 f87a 	bl	8008278 <_printf_i>
 8008184:	e7eb      	b.n	800815e <_svfiprintf_r+0x1c2>
 8008186:	bf00      	nop
 8008188:	08008758 	.word	0x08008758
 800818c:	08008762 	.word	0x08008762
 8008190:	00000000 	.word	0x00000000
 8008194:	08007ee5 	.word	0x08007ee5
 8008198:	0800875e 	.word	0x0800875e

0800819c <_printf_common>:
 800819c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081a0:	4616      	mov	r6, r2
 80081a2:	4699      	mov	r9, r3
 80081a4:	688a      	ldr	r2, [r1, #8]
 80081a6:	690b      	ldr	r3, [r1, #16]
 80081a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081ac:	4293      	cmp	r3, r2
 80081ae:	bfb8      	it	lt
 80081b0:	4613      	movlt	r3, r2
 80081b2:	6033      	str	r3, [r6, #0]
 80081b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081b8:	4607      	mov	r7, r0
 80081ba:	460c      	mov	r4, r1
 80081bc:	b10a      	cbz	r2, 80081c2 <_printf_common+0x26>
 80081be:	3301      	adds	r3, #1
 80081c0:	6033      	str	r3, [r6, #0]
 80081c2:	6823      	ldr	r3, [r4, #0]
 80081c4:	0699      	lsls	r1, r3, #26
 80081c6:	bf42      	ittt	mi
 80081c8:	6833      	ldrmi	r3, [r6, #0]
 80081ca:	3302      	addmi	r3, #2
 80081cc:	6033      	strmi	r3, [r6, #0]
 80081ce:	6825      	ldr	r5, [r4, #0]
 80081d0:	f015 0506 	ands.w	r5, r5, #6
 80081d4:	d106      	bne.n	80081e4 <_printf_common+0x48>
 80081d6:	f104 0a19 	add.w	sl, r4, #25
 80081da:	68e3      	ldr	r3, [r4, #12]
 80081dc:	6832      	ldr	r2, [r6, #0]
 80081de:	1a9b      	subs	r3, r3, r2
 80081e0:	42ab      	cmp	r3, r5
 80081e2:	dc26      	bgt.n	8008232 <_printf_common+0x96>
 80081e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80081e8:	1e13      	subs	r3, r2, #0
 80081ea:	6822      	ldr	r2, [r4, #0]
 80081ec:	bf18      	it	ne
 80081ee:	2301      	movne	r3, #1
 80081f0:	0692      	lsls	r2, r2, #26
 80081f2:	d42b      	bmi.n	800824c <_printf_common+0xb0>
 80081f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081f8:	4649      	mov	r1, r9
 80081fa:	4638      	mov	r0, r7
 80081fc:	47c0      	blx	r8
 80081fe:	3001      	adds	r0, #1
 8008200:	d01e      	beq.n	8008240 <_printf_common+0xa4>
 8008202:	6823      	ldr	r3, [r4, #0]
 8008204:	68e5      	ldr	r5, [r4, #12]
 8008206:	6832      	ldr	r2, [r6, #0]
 8008208:	f003 0306 	and.w	r3, r3, #6
 800820c:	2b04      	cmp	r3, #4
 800820e:	bf08      	it	eq
 8008210:	1aad      	subeq	r5, r5, r2
 8008212:	68a3      	ldr	r3, [r4, #8]
 8008214:	6922      	ldr	r2, [r4, #16]
 8008216:	bf0c      	ite	eq
 8008218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800821c:	2500      	movne	r5, #0
 800821e:	4293      	cmp	r3, r2
 8008220:	bfc4      	itt	gt
 8008222:	1a9b      	subgt	r3, r3, r2
 8008224:	18ed      	addgt	r5, r5, r3
 8008226:	2600      	movs	r6, #0
 8008228:	341a      	adds	r4, #26
 800822a:	42b5      	cmp	r5, r6
 800822c:	d11a      	bne.n	8008264 <_printf_common+0xc8>
 800822e:	2000      	movs	r0, #0
 8008230:	e008      	b.n	8008244 <_printf_common+0xa8>
 8008232:	2301      	movs	r3, #1
 8008234:	4652      	mov	r2, sl
 8008236:	4649      	mov	r1, r9
 8008238:	4638      	mov	r0, r7
 800823a:	47c0      	blx	r8
 800823c:	3001      	adds	r0, #1
 800823e:	d103      	bne.n	8008248 <_printf_common+0xac>
 8008240:	f04f 30ff 	mov.w	r0, #4294967295
 8008244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008248:	3501      	adds	r5, #1
 800824a:	e7c6      	b.n	80081da <_printf_common+0x3e>
 800824c:	18e1      	adds	r1, r4, r3
 800824e:	1c5a      	adds	r2, r3, #1
 8008250:	2030      	movs	r0, #48	; 0x30
 8008252:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008256:	4422      	add	r2, r4
 8008258:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800825c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008260:	3302      	adds	r3, #2
 8008262:	e7c7      	b.n	80081f4 <_printf_common+0x58>
 8008264:	2301      	movs	r3, #1
 8008266:	4622      	mov	r2, r4
 8008268:	4649      	mov	r1, r9
 800826a:	4638      	mov	r0, r7
 800826c:	47c0      	blx	r8
 800826e:	3001      	adds	r0, #1
 8008270:	d0e6      	beq.n	8008240 <_printf_common+0xa4>
 8008272:	3601      	adds	r6, #1
 8008274:	e7d9      	b.n	800822a <_printf_common+0x8e>
	...

08008278 <_printf_i>:
 8008278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800827c:	460c      	mov	r4, r1
 800827e:	4691      	mov	r9, r2
 8008280:	7e27      	ldrb	r7, [r4, #24]
 8008282:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008284:	2f78      	cmp	r7, #120	; 0x78
 8008286:	4680      	mov	r8, r0
 8008288:	469a      	mov	sl, r3
 800828a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800828e:	d807      	bhi.n	80082a0 <_printf_i+0x28>
 8008290:	2f62      	cmp	r7, #98	; 0x62
 8008292:	d80a      	bhi.n	80082aa <_printf_i+0x32>
 8008294:	2f00      	cmp	r7, #0
 8008296:	f000 80d8 	beq.w	800844a <_printf_i+0x1d2>
 800829a:	2f58      	cmp	r7, #88	; 0x58
 800829c:	f000 80a3 	beq.w	80083e6 <_printf_i+0x16e>
 80082a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80082a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082a8:	e03a      	b.n	8008320 <_printf_i+0xa8>
 80082aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082ae:	2b15      	cmp	r3, #21
 80082b0:	d8f6      	bhi.n	80082a0 <_printf_i+0x28>
 80082b2:	a001      	add	r0, pc, #4	; (adr r0, 80082b8 <_printf_i+0x40>)
 80082b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80082b8:	08008311 	.word	0x08008311
 80082bc:	08008325 	.word	0x08008325
 80082c0:	080082a1 	.word	0x080082a1
 80082c4:	080082a1 	.word	0x080082a1
 80082c8:	080082a1 	.word	0x080082a1
 80082cc:	080082a1 	.word	0x080082a1
 80082d0:	08008325 	.word	0x08008325
 80082d4:	080082a1 	.word	0x080082a1
 80082d8:	080082a1 	.word	0x080082a1
 80082dc:	080082a1 	.word	0x080082a1
 80082e0:	080082a1 	.word	0x080082a1
 80082e4:	08008431 	.word	0x08008431
 80082e8:	08008355 	.word	0x08008355
 80082ec:	08008413 	.word	0x08008413
 80082f0:	080082a1 	.word	0x080082a1
 80082f4:	080082a1 	.word	0x080082a1
 80082f8:	08008453 	.word	0x08008453
 80082fc:	080082a1 	.word	0x080082a1
 8008300:	08008355 	.word	0x08008355
 8008304:	080082a1 	.word	0x080082a1
 8008308:	080082a1 	.word	0x080082a1
 800830c:	0800841b 	.word	0x0800841b
 8008310:	680b      	ldr	r3, [r1, #0]
 8008312:	1d1a      	adds	r2, r3, #4
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	600a      	str	r2, [r1, #0]
 8008318:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800831c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008320:	2301      	movs	r3, #1
 8008322:	e0a3      	b.n	800846c <_printf_i+0x1f4>
 8008324:	6825      	ldr	r5, [r4, #0]
 8008326:	6808      	ldr	r0, [r1, #0]
 8008328:	062e      	lsls	r6, r5, #24
 800832a:	f100 0304 	add.w	r3, r0, #4
 800832e:	d50a      	bpl.n	8008346 <_printf_i+0xce>
 8008330:	6805      	ldr	r5, [r0, #0]
 8008332:	600b      	str	r3, [r1, #0]
 8008334:	2d00      	cmp	r5, #0
 8008336:	da03      	bge.n	8008340 <_printf_i+0xc8>
 8008338:	232d      	movs	r3, #45	; 0x2d
 800833a:	426d      	negs	r5, r5
 800833c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008340:	485e      	ldr	r0, [pc, #376]	; (80084bc <_printf_i+0x244>)
 8008342:	230a      	movs	r3, #10
 8008344:	e019      	b.n	800837a <_printf_i+0x102>
 8008346:	f015 0f40 	tst.w	r5, #64	; 0x40
 800834a:	6805      	ldr	r5, [r0, #0]
 800834c:	600b      	str	r3, [r1, #0]
 800834e:	bf18      	it	ne
 8008350:	b22d      	sxthne	r5, r5
 8008352:	e7ef      	b.n	8008334 <_printf_i+0xbc>
 8008354:	680b      	ldr	r3, [r1, #0]
 8008356:	6825      	ldr	r5, [r4, #0]
 8008358:	1d18      	adds	r0, r3, #4
 800835a:	6008      	str	r0, [r1, #0]
 800835c:	0628      	lsls	r0, r5, #24
 800835e:	d501      	bpl.n	8008364 <_printf_i+0xec>
 8008360:	681d      	ldr	r5, [r3, #0]
 8008362:	e002      	b.n	800836a <_printf_i+0xf2>
 8008364:	0669      	lsls	r1, r5, #25
 8008366:	d5fb      	bpl.n	8008360 <_printf_i+0xe8>
 8008368:	881d      	ldrh	r5, [r3, #0]
 800836a:	4854      	ldr	r0, [pc, #336]	; (80084bc <_printf_i+0x244>)
 800836c:	2f6f      	cmp	r7, #111	; 0x6f
 800836e:	bf0c      	ite	eq
 8008370:	2308      	moveq	r3, #8
 8008372:	230a      	movne	r3, #10
 8008374:	2100      	movs	r1, #0
 8008376:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800837a:	6866      	ldr	r6, [r4, #4]
 800837c:	60a6      	str	r6, [r4, #8]
 800837e:	2e00      	cmp	r6, #0
 8008380:	bfa2      	ittt	ge
 8008382:	6821      	ldrge	r1, [r4, #0]
 8008384:	f021 0104 	bicge.w	r1, r1, #4
 8008388:	6021      	strge	r1, [r4, #0]
 800838a:	b90d      	cbnz	r5, 8008390 <_printf_i+0x118>
 800838c:	2e00      	cmp	r6, #0
 800838e:	d04d      	beq.n	800842c <_printf_i+0x1b4>
 8008390:	4616      	mov	r6, r2
 8008392:	fbb5 f1f3 	udiv	r1, r5, r3
 8008396:	fb03 5711 	mls	r7, r3, r1, r5
 800839a:	5dc7      	ldrb	r7, [r0, r7]
 800839c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083a0:	462f      	mov	r7, r5
 80083a2:	42bb      	cmp	r3, r7
 80083a4:	460d      	mov	r5, r1
 80083a6:	d9f4      	bls.n	8008392 <_printf_i+0x11a>
 80083a8:	2b08      	cmp	r3, #8
 80083aa:	d10b      	bne.n	80083c4 <_printf_i+0x14c>
 80083ac:	6823      	ldr	r3, [r4, #0]
 80083ae:	07df      	lsls	r7, r3, #31
 80083b0:	d508      	bpl.n	80083c4 <_printf_i+0x14c>
 80083b2:	6923      	ldr	r3, [r4, #16]
 80083b4:	6861      	ldr	r1, [r4, #4]
 80083b6:	4299      	cmp	r1, r3
 80083b8:	bfde      	ittt	le
 80083ba:	2330      	movle	r3, #48	; 0x30
 80083bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083c4:	1b92      	subs	r2, r2, r6
 80083c6:	6122      	str	r2, [r4, #16]
 80083c8:	f8cd a000 	str.w	sl, [sp]
 80083cc:	464b      	mov	r3, r9
 80083ce:	aa03      	add	r2, sp, #12
 80083d0:	4621      	mov	r1, r4
 80083d2:	4640      	mov	r0, r8
 80083d4:	f7ff fee2 	bl	800819c <_printf_common>
 80083d8:	3001      	adds	r0, #1
 80083da:	d14c      	bne.n	8008476 <_printf_i+0x1fe>
 80083dc:	f04f 30ff 	mov.w	r0, #4294967295
 80083e0:	b004      	add	sp, #16
 80083e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e6:	4835      	ldr	r0, [pc, #212]	; (80084bc <_printf_i+0x244>)
 80083e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80083ec:	6823      	ldr	r3, [r4, #0]
 80083ee:	680e      	ldr	r6, [r1, #0]
 80083f0:	061f      	lsls	r7, r3, #24
 80083f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80083f6:	600e      	str	r6, [r1, #0]
 80083f8:	d514      	bpl.n	8008424 <_printf_i+0x1ac>
 80083fa:	07d9      	lsls	r1, r3, #31
 80083fc:	bf44      	itt	mi
 80083fe:	f043 0320 	orrmi.w	r3, r3, #32
 8008402:	6023      	strmi	r3, [r4, #0]
 8008404:	b91d      	cbnz	r5, 800840e <_printf_i+0x196>
 8008406:	6823      	ldr	r3, [r4, #0]
 8008408:	f023 0320 	bic.w	r3, r3, #32
 800840c:	6023      	str	r3, [r4, #0]
 800840e:	2310      	movs	r3, #16
 8008410:	e7b0      	b.n	8008374 <_printf_i+0xfc>
 8008412:	6823      	ldr	r3, [r4, #0]
 8008414:	f043 0320 	orr.w	r3, r3, #32
 8008418:	6023      	str	r3, [r4, #0]
 800841a:	2378      	movs	r3, #120	; 0x78
 800841c:	4828      	ldr	r0, [pc, #160]	; (80084c0 <_printf_i+0x248>)
 800841e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008422:	e7e3      	b.n	80083ec <_printf_i+0x174>
 8008424:	065e      	lsls	r6, r3, #25
 8008426:	bf48      	it	mi
 8008428:	b2ad      	uxthmi	r5, r5
 800842a:	e7e6      	b.n	80083fa <_printf_i+0x182>
 800842c:	4616      	mov	r6, r2
 800842e:	e7bb      	b.n	80083a8 <_printf_i+0x130>
 8008430:	680b      	ldr	r3, [r1, #0]
 8008432:	6826      	ldr	r6, [r4, #0]
 8008434:	6960      	ldr	r0, [r4, #20]
 8008436:	1d1d      	adds	r5, r3, #4
 8008438:	600d      	str	r5, [r1, #0]
 800843a:	0635      	lsls	r5, r6, #24
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	d501      	bpl.n	8008444 <_printf_i+0x1cc>
 8008440:	6018      	str	r0, [r3, #0]
 8008442:	e002      	b.n	800844a <_printf_i+0x1d2>
 8008444:	0671      	lsls	r1, r6, #25
 8008446:	d5fb      	bpl.n	8008440 <_printf_i+0x1c8>
 8008448:	8018      	strh	r0, [r3, #0]
 800844a:	2300      	movs	r3, #0
 800844c:	6123      	str	r3, [r4, #16]
 800844e:	4616      	mov	r6, r2
 8008450:	e7ba      	b.n	80083c8 <_printf_i+0x150>
 8008452:	680b      	ldr	r3, [r1, #0]
 8008454:	1d1a      	adds	r2, r3, #4
 8008456:	600a      	str	r2, [r1, #0]
 8008458:	681e      	ldr	r6, [r3, #0]
 800845a:	6862      	ldr	r2, [r4, #4]
 800845c:	2100      	movs	r1, #0
 800845e:	4630      	mov	r0, r6
 8008460:	f7f7 febe 	bl	80001e0 <memchr>
 8008464:	b108      	cbz	r0, 800846a <_printf_i+0x1f2>
 8008466:	1b80      	subs	r0, r0, r6
 8008468:	6060      	str	r0, [r4, #4]
 800846a:	6863      	ldr	r3, [r4, #4]
 800846c:	6123      	str	r3, [r4, #16]
 800846e:	2300      	movs	r3, #0
 8008470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008474:	e7a8      	b.n	80083c8 <_printf_i+0x150>
 8008476:	6923      	ldr	r3, [r4, #16]
 8008478:	4632      	mov	r2, r6
 800847a:	4649      	mov	r1, r9
 800847c:	4640      	mov	r0, r8
 800847e:	47d0      	blx	sl
 8008480:	3001      	adds	r0, #1
 8008482:	d0ab      	beq.n	80083dc <_printf_i+0x164>
 8008484:	6823      	ldr	r3, [r4, #0]
 8008486:	079b      	lsls	r3, r3, #30
 8008488:	d413      	bmi.n	80084b2 <_printf_i+0x23a>
 800848a:	68e0      	ldr	r0, [r4, #12]
 800848c:	9b03      	ldr	r3, [sp, #12]
 800848e:	4298      	cmp	r0, r3
 8008490:	bfb8      	it	lt
 8008492:	4618      	movlt	r0, r3
 8008494:	e7a4      	b.n	80083e0 <_printf_i+0x168>
 8008496:	2301      	movs	r3, #1
 8008498:	4632      	mov	r2, r6
 800849a:	4649      	mov	r1, r9
 800849c:	4640      	mov	r0, r8
 800849e:	47d0      	blx	sl
 80084a0:	3001      	adds	r0, #1
 80084a2:	d09b      	beq.n	80083dc <_printf_i+0x164>
 80084a4:	3501      	adds	r5, #1
 80084a6:	68e3      	ldr	r3, [r4, #12]
 80084a8:	9903      	ldr	r1, [sp, #12]
 80084aa:	1a5b      	subs	r3, r3, r1
 80084ac:	42ab      	cmp	r3, r5
 80084ae:	dcf2      	bgt.n	8008496 <_printf_i+0x21e>
 80084b0:	e7eb      	b.n	800848a <_printf_i+0x212>
 80084b2:	2500      	movs	r5, #0
 80084b4:	f104 0619 	add.w	r6, r4, #25
 80084b8:	e7f5      	b.n	80084a6 <_printf_i+0x22e>
 80084ba:	bf00      	nop
 80084bc:	08008769 	.word	0x08008769
 80084c0:	0800877a 	.word	0x0800877a

080084c4 <memmove>:
 80084c4:	4288      	cmp	r0, r1
 80084c6:	b510      	push	{r4, lr}
 80084c8:	eb01 0402 	add.w	r4, r1, r2
 80084cc:	d902      	bls.n	80084d4 <memmove+0x10>
 80084ce:	4284      	cmp	r4, r0
 80084d0:	4623      	mov	r3, r4
 80084d2:	d807      	bhi.n	80084e4 <memmove+0x20>
 80084d4:	1e43      	subs	r3, r0, #1
 80084d6:	42a1      	cmp	r1, r4
 80084d8:	d008      	beq.n	80084ec <memmove+0x28>
 80084da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084e2:	e7f8      	b.n	80084d6 <memmove+0x12>
 80084e4:	4402      	add	r2, r0
 80084e6:	4601      	mov	r1, r0
 80084e8:	428a      	cmp	r2, r1
 80084ea:	d100      	bne.n	80084ee <memmove+0x2a>
 80084ec:	bd10      	pop	{r4, pc}
 80084ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80084f6:	e7f7      	b.n	80084e8 <memmove+0x24>

080084f8 <_free_r>:
 80084f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084fa:	2900      	cmp	r1, #0
 80084fc:	d048      	beq.n	8008590 <_free_r+0x98>
 80084fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008502:	9001      	str	r0, [sp, #4]
 8008504:	2b00      	cmp	r3, #0
 8008506:	f1a1 0404 	sub.w	r4, r1, #4
 800850a:	bfb8      	it	lt
 800850c:	18e4      	addlt	r4, r4, r3
 800850e:	f000 f8d3 	bl	80086b8 <__malloc_lock>
 8008512:	4a20      	ldr	r2, [pc, #128]	; (8008594 <_free_r+0x9c>)
 8008514:	9801      	ldr	r0, [sp, #4]
 8008516:	6813      	ldr	r3, [r2, #0]
 8008518:	4615      	mov	r5, r2
 800851a:	b933      	cbnz	r3, 800852a <_free_r+0x32>
 800851c:	6063      	str	r3, [r4, #4]
 800851e:	6014      	str	r4, [r2, #0]
 8008520:	b003      	add	sp, #12
 8008522:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008526:	f000 b8cd 	b.w	80086c4 <__malloc_unlock>
 800852a:	42a3      	cmp	r3, r4
 800852c:	d90b      	bls.n	8008546 <_free_r+0x4e>
 800852e:	6821      	ldr	r1, [r4, #0]
 8008530:	1862      	adds	r2, r4, r1
 8008532:	4293      	cmp	r3, r2
 8008534:	bf04      	itt	eq
 8008536:	681a      	ldreq	r2, [r3, #0]
 8008538:	685b      	ldreq	r3, [r3, #4]
 800853a:	6063      	str	r3, [r4, #4]
 800853c:	bf04      	itt	eq
 800853e:	1852      	addeq	r2, r2, r1
 8008540:	6022      	streq	r2, [r4, #0]
 8008542:	602c      	str	r4, [r5, #0]
 8008544:	e7ec      	b.n	8008520 <_free_r+0x28>
 8008546:	461a      	mov	r2, r3
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	b10b      	cbz	r3, 8008550 <_free_r+0x58>
 800854c:	42a3      	cmp	r3, r4
 800854e:	d9fa      	bls.n	8008546 <_free_r+0x4e>
 8008550:	6811      	ldr	r1, [r2, #0]
 8008552:	1855      	adds	r5, r2, r1
 8008554:	42a5      	cmp	r5, r4
 8008556:	d10b      	bne.n	8008570 <_free_r+0x78>
 8008558:	6824      	ldr	r4, [r4, #0]
 800855a:	4421      	add	r1, r4
 800855c:	1854      	adds	r4, r2, r1
 800855e:	42a3      	cmp	r3, r4
 8008560:	6011      	str	r1, [r2, #0]
 8008562:	d1dd      	bne.n	8008520 <_free_r+0x28>
 8008564:	681c      	ldr	r4, [r3, #0]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	6053      	str	r3, [r2, #4]
 800856a:	4421      	add	r1, r4
 800856c:	6011      	str	r1, [r2, #0]
 800856e:	e7d7      	b.n	8008520 <_free_r+0x28>
 8008570:	d902      	bls.n	8008578 <_free_r+0x80>
 8008572:	230c      	movs	r3, #12
 8008574:	6003      	str	r3, [r0, #0]
 8008576:	e7d3      	b.n	8008520 <_free_r+0x28>
 8008578:	6825      	ldr	r5, [r4, #0]
 800857a:	1961      	adds	r1, r4, r5
 800857c:	428b      	cmp	r3, r1
 800857e:	bf04      	itt	eq
 8008580:	6819      	ldreq	r1, [r3, #0]
 8008582:	685b      	ldreq	r3, [r3, #4]
 8008584:	6063      	str	r3, [r4, #4]
 8008586:	bf04      	itt	eq
 8008588:	1949      	addeq	r1, r1, r5
 800858a:	6021      	streq	r1, [r4, #0]
 800858c:	6054      	str	r4, [r2, #4]
 800858e:	e7c7      	b.n	8008520 <_free_r+0x28>
 8008590:	b003      	add	sp, #12
 8008592:	bd30      	pop	{r4, r5, pc}
 8008594:	20000440 	.word	0x20000440

08008598 <_malloc_r>:
 8008598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859a:	1ccd      	adds	r5, r1, #3
 800859c:	f025 0503 	bic.w	r5, r5, #3
 80085a0:	3508      	adds	r5, #8
 80085a2:	2d0c      	cmp	r5, #12
 80085a4:	bf38      	it	cc
 80085a6:	250c      	movcc	r5, #12
 80085a8:	2d00      	cmp	r5, #0
 80085aa:	4606      	mov	r6, r0
 80085ac:	db01      	blt.n	80085b2 <_malloc_r+0x1a>
 80085ae:	42a9      	cmp	r1, r5
 80085b0:	d903      	bls.n	80085ba <_malloc_r+0x22>
 80085b2:	230c      	movs	r3, #12
 80085b4:	6033      	str	r3, [r6, #0]
 80085b6:	2000      	movs	r0, #0
 80085b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085ba:	f000 f87d 	bl	80086b8 <__malloc_lock>
 80085be:	4921      	ldr	r1, [pc, #132]	; (8008644 <_malloc_r+0xac>)
 80085c0:	680a      	ldr	r2, [r1, #0]
 80085c2:	4614      	mov	r4, r2
 80085c4:	b99c      	cbnz	r4, 80085ee <_malloc_r+0x56>
 80085c6:	4f20      	ldr	r7, [pc, #128]	; (8008648 <_malloc_r+0xb0>)
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	b923      	cbnz	r3, 80085d6 <_malloc_r+0x3e>
 80085cc:	4621      	mov	r1, r4
 80085ce:	4630      	mov	r0, r6
 80085d0:	f000 f862 	bl	8008698 <_sbrk_r>
 80085d4:	6038      	str	r0, [r7, #0]
 80085d6:	4629      	mov	r1, r5
 80085d8:	4630      	mov	r0, r6
 80085da:	f000 f85d 	bl	8008698 <_sbrk_r>
 80085de:	1c43      	adds	r3, r0, #1
 80085e0:	d123      	bne.n	800862a <_malloc_r+0x92>
 80085e2:	230c      	movs	r3, #12
 80085e4:	6033      	str	r3, [r6, #0]
 80085e6:	4630      	mov	r0, r6
 80085e8:	f000 f86c 	bl	80086c4 <__malloc_unlock>
 80085ec:	e7e3      	b.n	80085b6 <_malloc_r+0x1e>
 80085ee:	6823      	ldr	r3, [r4, #0]
 80085f0:	1b5b      	subs	r3, r3, r5
 80085f2:	d417      	bmi.n	8008624 <_malloc_r+0x8c>
 80085f4:	2b0b      	cmp	r3, #11
 80085f6:	d903      	bls.n	8008600 <_malloc_r+0x68>
 80085f8:	6023      	str	r3, [r4, #0]
 80085fa:	441c      	add	r4, r3
 80085fc:	6025      	str	r5, [r4, #0]
 80085fe:	e004      	b.n	800860a <_malloc_r+0x72>
 8008600:	6863      	ldr	r3, [r4, #4]
 8008602:	42a2      	cmp	r2, r4
 8008604:	bf0c      	ite	eq
 8008606:	600b      	streq	r3, [r1, #0]
 8008608:	6053      	strne	r3, [r2, #4]
 800860a:	4630      	mov	r0, r6
 800860c:	f000 f85a 	bl	80086c4 <__malloc_unlock>
 8008610:	f104 000b 	add.w	r0, r4, #11
 8008614:	1d23      	adds	r3, r4, #4
 8008616:	f020 0007 	bic.w	r0, r0, #7
 800861a:	1ac2      	subs	r2, r0, r3
 800861c:	d0cc      	beq.n	80085b8 <_malloc_r+0x20>
 800861e:	1a1b      	subs	r3, r3, r0
 8008620:	50a3      	str	r3, [r4, r2]
 8008622:	e7c9      	b.n	80085b8 <_malloc_r+0x20>
 8008624:	4622      	mov	r2, r4
 8008626:	6864      	ldr	r4, [r4, #4]
 8008628:	e7cc      	b.n	80085c4 <_malloc_r+0x2c>
 800862a:	1cc4      	adds	r4, r0, #3
 800862c:	f024 0403 	bic.w	r4, r4, #3
 8008630:	42a0      	cmp	r0, r4
 8008632:	d0e3      	beq.n	80085fc <_malloc_r+0x64>
 8008634:	1a21      	subs	r1, r4, r0
 8008636:	4630      	mov	r0, r6
 8008638:	f000 f82e 	bl	8008698 <_sbrk_r>
 800863c:	3001      	adds	r0, #1
 800863e:	d1dd      	bne.n	80085fc <_malloc_r+0x64>
 8008640:	e7cf      	b.n	80085e2 <_malloc_r+0x4a>
 8008642:	bf00      	nop
 8008644:	20000440 	.word	0x20000440
 8008648:	20000444 	.word	0x20000444

0800864c <_realloc_r>:
 800864c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800864e:	4607      	mov	r7, r0
 8008650:	4614      	mov	r4, r2
 8008652:	460e      	mov	r6, r1
 8008654:	b921      	cbnz	r1, 8008660 <_realloc_r+0x14>
 8008656:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800865a:	4611      	mov	r1, r2
 800865c:	f7ff bf9c 	b.w	8008598 <_malloc_r>
 8008660:	b922      	cbnz	r2, 800866c <_realloc_r+0x20>
 8008662:	f7ff ff49 	bl	80084f8 <_free_r>
 8008666:	4625      	mov	r5, r4
 8008668:	4628      	mov	r0, r5
 800866a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800866c:	f000 f830 	bl	80086d0 <_malloc_usable_size_r>
 8008670:	42a0      	cmp	r0, r4
 8008672:	d20f      	bcs.n	8008694 <_realloc_r+0x48>
 8008674:	4621      	mov	r1, r4
 8008676:	4638      	mov	r0, r7
 8008678:	f7ff ff8e 	bl	8008598 <_malloc_r>
 800867c:	4605      	mov	r5, r0
 800867e:	2800      	cmp	r0, #0
 8008680:	d0f2      	beq.n	8008668 <_realloc_r+0x1c>
 8008682:	4631      	mov	r1, r6
 8008684:	4622      	mov	r2, r4
 8008686:	f7ff fbe3 	bl	8007e50 <memcpy>
 800868a:	4631      	mov	r1, r6
 800868c:	4638      	mov	r0, r7
 800868e:	f7ff ff33 	bl	80084f8 <_free_r>
 8008692:	e7e9      	b.n	8008668 <_realloc_r+0x1c>
 8008694:	4635      	mov	r5, r6
 8008696:	e7e7      	b.n	8008668 <_realloc_r+0x1c>

08008698 <_sbrk_r>:
 8008698:	b538      	push	{r3, r4, r5, lr}
 800869a:	4d06      	ldr	r5, [pc, #24]	; (80086b4 <_sbrk_r+0x1c>)
 800869c:	2300      	movs	r3, #0
 800869e:	4604      	mov	r4, r0
 80086a0:	4608      	mov	r0, r1
 80086a2:	602b      	str	r3, [r5, #0]
 80086a4:	f7f8 ffd6 	bl	8001654 <_sbrk>
 80086a8:	1c43      	adds	r3, r0, #1
 80086aa:	d102      	bne.n	80086b2 <_sbrk_r+0x1a>
 80086ac:	682b      	ldr	r3, [r5, #0]
 80086ae:	b103      	cbz	r3, 80086b2 <_sbrk_r+0x1a>
 80086b0:	6023      	str	r3, [r4, #0]
 80086b2:	bd38      	pop	{r3, r4, r5, pc}
 80086b4:	20001e70 	.word	0x20001e70

080086b8 <__malloc_lock>:
 80086b8:	4801      	ldr	r0, [pc, #4]	; (80086c0 <__malloc_lock+0x8>)
 80086ba:	f000 b811 	b.w	80086e0 <__retarget_lock_acquire_recursive>
 80086be:	bf00      	nop
 80086c0:	20001e78 	.word	0x20001e78

080086c4 <__malloc_unlock>:
 80086c4:	4801      	ldr	r0, [pc, #4]	; (80086cc <__malloc_unlock+0x8>)
 80086c6:	f000 b80c 	b.w	80086e2 <__retarget_lock_release_recursive>
 80086ca:	bf00      	nop
 80086cc:	20001e78 	.word	0x20001e78

080086d0 <_malloc_usable_size_r>:
 80086d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086d4:	1f18      	subs	r0, r3, #4
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	bfbc      	itt	lt
 80086da:	580b      	ldrlt	r3, [r1, r0]
 80086dc:	18c0      	addlt	r0, r0, r3
 80086de:	4770      	bx	lr

080086e0 <__retarget_lock_acquire_recursive>:
 80086e0:	4770      	bx	lr

080086e2 <__retarget_lock_release_recursive>:
 80086e2:	4770      	bx	lr

080086e4 <_init>:
 80086e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e6:	bf00      	nop
 80086e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ea:	bc08      	pop	{r3}
 80086ec:	469e      	mov	lr, r3
 80086ee:	4770      	bx	lr

080086f0 <_fini>:
 80086f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086f2:	bf00      	nop
 80086f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086f6:	bc08      	pop	{r3}
 80086f8:	469e      	mov	lr, r3
 80086fa:	4770      	bx	lr
